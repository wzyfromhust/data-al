{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Python \u7b97\u6cd5\u4e0e\u6570\u636e\u7ed3\u6784\u89c6\u9891\u6559\u7a0b","text":""},{"location":"#_1","title":"\u8bfe\u7a0b\u7b80\u4ecb","text":"<p>\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u662f\u6bcf\u4e2a\u7a0b\u5e8f\u5458\u9700\u8981\u638c\u63e1\u7684\u57fa\u7840\u77e5\u8bc6\u4e4b\u4e00\uff0c\u4e5f\u662f\u9762\u8bd5\u4e2d\u8de8\u4e0d\u8fc7\u7684\u69db\u3002\u76ee\u524d\u5173\u4e8e Python \u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u7684\u7cfb\u7edf\u4e2d\u6587\u8d44\u6599\u6bd4\u8f83\u6b20\u7f3a\uff0c \u7b14\u8005\u5c1d\u8bd5\u5f55\u5236\u89c6\u9891\u6559\u7a0b\u5e2e\u52a9 Python \u5f00\u53d1\u8005\u638c\u63e1\u5e38\u7528\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\uff0c\u63d0\u5347\u5f00\u53d1\u6280\u80fd\u3002 \u672c\u6559\u7a0b\u662f\u4ed8\u8d39\u6559\u7a0b(\u6587\u5b57\u5185\u5bb9\u548c\u4ee3\u7801\u514d\u8d39)\uff0c\u56e0\u4e3a\u7b14\u8005\u5f55\u5236\u7684\u8fc7\u7a0b\u4e2d\u9664\u4e86\u8d2d\u4e70\u8f6f\u4ef6\u3001\u624b\u5199\u677f\u7b49\u786c\u4ef6\u4e4b\u5916\uff0c\u4e1a\u4f59\u9700\u8981\u82b1\u8d39\u5f88\u591a\u65f6\u95f4\u548c\u7cbe\u529b\u6765\u5f55\u5236\u89c6\u9891\u3001\u67e5\u8d44\u6599\u3001\u7f16\u5199\u8bfe\u4ef6\u548c\u4ee3\u7801\uff0c\u517b\u5bb6\u7cca\u53e3\u4e0d\u5bb9\u6613\uff0c\u5e0c\u671b\u5927\u5bb6\u4f53\u8c05\u3002</p>"},{"location":"#_2","title":"\u94fe\u63a5","text":"<p>\u89c6\u9891\u6559\u7a0b\u5df2\u7ecf\u53d1\u5e03\u5728\u7f51\u6613\u4e91\u8bfe\u5802\u548c csdn \u5b66\u9662\uff0c\u5185\u5bb9\u4e00\u81f4\uff0c\u63a8\u8350\u4f7f\u7528\u7f51\u6613\u4e91\u8bfe\u5802\u3002</p> <ul> <li>\u7f51\u6613\u4e91\u8bfe\u5802: Python\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\u6559\u7a0b</li> <li>csdn \u5b66\u9662\uff1aPython\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\u6559\u7a0b</li> </ul> <p>\u7535\u5b50\u4e66\u5730\u5740\uff1a</p> <ul> <li>\u7f51\u4e0a\u9605\u8bfb\u300aPython \u7b97\u6cd5\u4e0e\u6570\u636e\u7ed3\u6784\u6559\u7a0b \u300b</li> <li>github \u94fe\u63a5</li> <li>readthedoc \u7535\u5b50\u4e66\u4e0b\u8f7d</li> <li>\u300a\u5f00\u6e90\u4e00\u4e2a Python \u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u4e2d\u6587\u6559\u7a0b[\u89c6\u9891]\u300b  \u89c6\u9891\u8bb2\u89e3\u793a\u4f8b</li> </ul> <p>leetcode \u5b9e\u6218\u56fe\u89e3\u6559\u7a0b(\u63a8\u8350)\uff1a</p> <p>\u5982\u679c\u60a8\u6709\u4e00\u5b9a\u7684\u57fa\u7840\uff0c\u53ea\u662f\u60f3\u5feb\u901f\u9488\u5bf9\u9762\u8bd5\u5237\u9898\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u53c2\u8003\u7b14\u8005\u9488\u5bf9\u300a\u5251\u6307offer\u300b\u548c leetcode \u7ecf\u5178\u9898\u76ee\u7684 Python \u5237\u9898\u56fe\u89e3\u5b9e\u6218\u3002</p> <ul> <li>\u56fe\u89e3Python\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5-\u5b9e\u6218\u7bc7- leetcode\u7ecf\u5178\u9898\u76ee\u5b9e\u6218</li> </ul> <p>\u7b14\u8005\u7684\u5176\u4ed6\u8bfe\u7a0b\uff1a</p> <ul> <li>\u73a9\u8f6cVim \u4ece\u653e\u5f03\u5230\u7231\u4e0d\u91ca\u624b</li> <li>Python\u5de5\u7a0b\u5e08\u9762\u8bd5\u5b9d\u5178</li> </ul>"},{"location":"#_3","title":"\u75db\u70b9","text":"<ul> <li>\u8bb2 Python \u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u7684\u8d44\u6599\u5f88\u5c11\uff0c\u4e2d\u6587\u8d44\u6599\u66f4\u5c11</li> <li>\u5f88\u591a\u81ea\u5b66 Python \u7684\u5de5\u7a0b\u5e08\u5bf9\u57fa\u7840\u4e0d\u591f\u91cd\u89c6\uff0c\u9762\u8bd5\u4e5f\u53d1\u73b0\u5f88\u591a\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u4e0d\u8fc7\u5173\uff0c\u5f88\u591a\u4eba\u6302\u5728\u4e86\u57fa\u7840\u7684\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u4e0a</li> <li>\u7f3a\u5c11\u5de5\u7a0b\u5e94\u7528\u573a\u666f\u4e0b\u7684\u8bb2\u89e3\uff0c\u5f88\u591a\u8bb2\u7b97\u6cd5\u7684\u8d44\u6599\u592a\u300e\u6559\u79d1\u4e66\u5316\u300f\u3002\u672c\u4e66\u5b9e\u73b0\u7684\u4ee3\u7801\u5de5\u7a0b\u4e0a\u53ef\u7528</li> <li>\u7f51\u4e0a\u5f88\u591a\u89c6\u9891\u6559\u7a0b\u4e0d\u591f\u5faa\u5e8f\u6e10\u8fdb\uff0c\u4e0d\u6210\u7cfb\u7edf</li> </ul>"},{"location":"#_4","title":"\u4f5c\u8005\u7b80\u4ecb","text":"<p>\u66fe\u5c31\u804c\u4e8e\u77e5\u4e4e\uff0c\u73b0\u817e\u8baf\u89c6\u9891\u540e\u7aef\u5de5\u7a0b\u5e08\uff0c\u591a\u5e74 Python/Go \u5f00\u53d1\u7ecf\u9a8c\u3002</p> <p>\u77e5\u4e4e\u4e13\u680f\uff1a</p> <ul> <li>\u300aPython \u5b66\u4e60\u4e4b\u8def\u300b</li> <li>\u300a\u73a9\u8f6cvim(\u89c6\u9891)\u300b</li> </ul> <p>\u7535\u5b50\u4e66\uff1a\u300aPython web \u5165\u5751\u6307\u5357\u300b</p>"},{"location":"#_5","title":"\u8bfe\u7a0b\u5185\u5bb9","text":"<p>\u5305\u62ec\u6211\u4eec\u5728\u4e1a\u52a1\u5f00\u53d1\u548c\u9762\u8bd5\u4e2d\u5e38\u7528\u7684\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\uff0c\u5e0c\u671b\u53ef\u4ee5\u5e2e\u52a9 Python \u5f00\u53d1\u8005\u5feb\u901f\u4e0a\u624b\uff0c\u5f88\u591a\u8001\u624b\u5199\u4e1a\u52a1\u4ee3\u7801\u5199\u591a\u4e86\u5f88\u591a\u57fa\u7840\u77e5\u8bc6\u5fd8\u8bb0\u4e86\uff0c \u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u56de\u987e\u3002\u8bfe\u7a0b\u5c3d\u91cf\u7528\u901a\u4fd7\u7684\u65b9\u5f0f\u8bb2\u89e3\uff0c\u7ed3\u5408 python \u8bed\u8a00\u548c\u65e5\u5e38\u5f00\u53d1\u5b9e\u8df5\u7684\u7ecf\u9a8c\u3002\u4e66\u4e2d\u4ee3\u7801\u53ef\u4ee5\u4f5c\u4e3a\u5927\u5bb6\u7684\u9762\u8bd5\u7b14\u8bd5\u53c2\u8003\u3002 \u5bf9\u4e8e\u6bcf\u4e2a\u7b97\u6cd5\u548c\u7528\u5230\u7684\u6570\u636e\u7ed3\u6784\u6211\u4eec\u9700\u8981\u77e5\u9053:</p> <ul> <li>\u539f\u7406</li> <li>Python \u5b9e\u73b0\u65b9\u5f0f</li> <li>\u65f6\u95f4\u3001\u7a7a\u95f4\u590d\u6742\u5ea6</li> <li>\u4f7f\u7528\u573a\u666f\uff0c\u4ec0\u4e48\u65f6\u5019\u7528</li> </ul>"},{"location":"#_6","title":"\u76ee\u5f55\u7ed3\u6784","text":"<p>\u8fd9\u91cc\u8bb2\u89e3\u7684\u7ae0\u8282\u6211\u53c2\u8003\u4e86\u4e0b\u8fb9\u6559\u6750\u4e2d\u5217\u4e3e\u7684\u4e00\u4e9b\u4e66\u7c4d\uff0c\u5e76\u4e14\u81ea\u5df1\u8bbe\u8ba1\u4e86\u5927\u7eb2\uff0c\u4e89\u53d6\u505a\u5230\u5faa\u5e8f\u6e10\u8fdb\uff0c\u7b80\u5355\u5b9e\u7528\u3002\u56e0\u4e3a\u5b9e\u73b0\u4e00\u4e9b\u9ad8\u7ea7\u6570\u636e\u7ed3\u6784\u7684\u65f6\u5019\u4f1a\u7528\u5230 \u5f88\u591a\u5e95\u5c42\u6570\u636e\u7ed3\u6784\uff0c\u9632\u6b62\u8df3\u8dc3\u592a\u5927\u5bfc\u81f4\u8bfb\u8005\u7406\u89e3\u56f0\u96be\u3002</p> <p>\u8bfe\u7a0b\u7684\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b\uff0c\u6bcf\u4e00\u7ae0\u90fd\u6709\u914d\u5957\u7684\u6587\u5b57\u8bb2\u4e49(markdown)\uff0c\u793a\u4f8b\u4ee3\u7801\uff0c\u89c6\u9891\u8bb2\u89e3\uff0c\u8be6\u7ec6\u7684\u8bb2\u89e3\u4e00\u822c\u4f1a\u653e\u5728\u89c6\u9891\u91cc\uff0c\u4f7f\u7528\u624b\u5199\u677f\u6765 \u8fdb\u884c\u677f\u4e66\uff0c\u5305\u62ec\u6587\u5b57\u3001\u56fe\u793a\u3001\u624b\u52a8\u6a21\u62df\u7b97\u6cd5\u8fc7\u7a0b\u7b49\u3002</p> <ul> <li>\u8bfe\u7a0b\u4ecb\u7ecd</li> <li>\u8bfe\u7a0b\u7b80\u4ecb\u4e4b\u7b28\u65b9\u6cd5\u5b66\u7b97\u6cd5</li> <li>\u62bd\u8c61\u6570\u636e\u7c7b\u578b ADT\uff0c\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b</li> <li>\u6570\u7ec4\u548c\u5217\u8868</li> <li>\u94fe\u8868\uff0c\u9ad8\u7ea7\u94fe\u8868\u3002\u53cc\u94fe\u8868\uff0c\u5faa\u73af\u53cc\u7aef\u94fe\u8868</li> <li>\u961f\u5217\uff0c\u53cc\u7aef\u961f\u5217\uff0c\u5faa\u73af\u53cc\u7aef\u961f\u5217</li> <li>\u6808\uff0c\u6808\u6ea2\u51fa</li> <li>\u7b97\u6cd5\u5206\u6790\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 \u5927O \u8868\u793a\u6cd5</li> <li>\u54c8\u5e0c\u8868\uff0c\u6563\u5217\u51b2\u7a81</li> <li>\u5b57\u5178</li> <li>\u96c6\u5408</li> <li>\u9012\u5f52</li> <li>\u67e5\u627e\uff1a\u7ebf\u6027\u67e5\u627e\u548c\u4e8c\u5206\u67e5\u627e</li> <li>\u57fa\u672c\u6392\u5e8f\u7b97\u6cd5: \u5192\u6ce1\u3001\u9009\u62e9\u3001\u63d2\u5165\u6392\u5e8f</li> <li>\u9ad8\u7ea7\u6392\u5e8f\u7b97\u6cd5: \u5f52\u5e76\u6392\u5e8f\u3001\u5feb\u6392</li> <li>\u6811\uff0c\u4e8c\u53c9\u6811</li> <li>\u5806\u4e0e\u5806\u6392\u5e8f</li> <li>\u4f18\u5148\u7ea7\u961f\u5217</li> <li>\u4e8c\u53c9\u67e5\u627e\u6811</li> <li>\u56fe\u4e0e\u56fe\u7684\u904d\u5386</li> <li>python \u5185\u7f6e\u5e38\u7528\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u7684\u4f7f\u7528\u3002list, dict, set, collections \u6a21\u5757\uff0cheapq \u6a21\u5757</li> <li>\u9762\u8bd5\u7b14\u8bd5\u5e38\u8003\u7b97\u6cd5</li> </ul>"},{"location":"#_7","title":"\u7f16\u7a0b\u8bed\u8a00","text":"<p>\u6211\u4eec\u8fd9\u91cc\u4f7f\u7528\u6700\u8fd1\u5f88\u706b\u7684Python\u3002Python \u5165\u95e8\u7b80\u5355\u800c\u4e14\u662f\u4e2a\u591a\u9762\u624b\uff0c\u5728\u722c\u866b\u3001web \u540e\u7aef\u3001\u8fd0\u7ef4\u3001\u6570\u636e\u5206\u6790\u3001AI\u3001\u91cf\u5316\u6295\u8d44\u7b49\u9886\u57df\u90fd\u6709 Python \u7684\u8eab\u5f71\uff0c \u65e0\u8bba\u662f\u5426\u662f\u4e13\u4e1a\u7a0b\u5e8f\u5458\uff0c Python \u90fd\u662f\u4e00\u95e8\u5b66\u4e60\u6027\u4ef7\u6bd4\u975e\u5e38\u9ad8\u7684\u8bed\u8a00\u3002 \u77e5\u4e4e\u3001\u8c46\u74e3\u3001\u5934\u6761\u3001\u997f\u4e86\u4e48\u3001\u641c\u72d0\u7b49\u516c\u53f8\u90fd\u6709\u5e7f\u6cdb\u4f7f\u7528 Python\u3002\u7b14\u8005\u65e5\u5e38\u5de5\u4f5c\u4f7f\u7528\u4e5f\u662f Python\uff0c\u6709\u4e00\u5b9a\u5b9e\u8df5\u7ecf\u9a8c\uff0c \u5728\u77e5\u4e4e\u4e0a\u7ef4\u62a4\u4e86\u4e00\u4e2a\u4e13\u680f\u300aPython \u5b66\u4e60\u4e4b\u8def\u300b\u3002</p> <p>Python \u62bd\u8c61\u7a0b\u5ea6\u6bd4\u8f83\u9ad8\uff0c \u6211\u4eec\u80fd\u7528\u66f4\u5c11\u7684\u4ee3\u7801\u6765\u5b9e\u73b0\u529f\u80fd\uff0c\u540c\u65f6\u4e0d\u7528\u50cf C/C++ \u90a3\u6837\u62c5\u5fc3\u5185\u5b58\u7ba1\u7406\u3001\u6307\u9488\u64cd\u4f5c\u7b49\u5e95\u5c42\u95ee\u9898\uff0c \u628a\u4e3b\u8981\u5fc3\u601d\u653e\u5728\u7b97\u6cd5\u903b\u8f91\u672c\u8eab\u800c\u4e0d\u662f\u8bed\u8a00\u7ec6\u8282\u4e0a\uff0cPython \u4e5f\u53f7\u79f0\u4f2a\u4ee3\u7801\u8bed\u8a00\u3002\u6240\u6709\u4ee3\u7801\u793a\u4f8b\u4f7f\u7528 Python2/3 \u517c\u5bb9\u4ee3\u7801\uff0c \u4e0d\u8fc7\u53ea\u5728 python3.5 \u4e0b\u6d4b\u8bd5\u8fc7\uff0c\u63a8\u8350\u7528\u76f8\u540c\u7248\u672c Python \u8fdb\u884c\u4ee3\u7801\u7f16\u5199\u548c\u6d4b\u8bd5\u3002</p>"},{"location":"#_8","title":"\u53d7\u4f17","text":"<p>\u60f3\u8981\u5b66\u4e60 Python \u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u7684\u4e2d\u7ea7\u540c\u5b66\uff0c\u5305\u62ec\u81ea\u5b66\u7684\u540c\u5b66\u548c\u672c\u79d1\u4f4e\u5e74\u7ea7\u5b66\u751f\u7b49\u3002\u9700\u8981\u638c\u63e1 Python \u7684\u57fa\u672c\u8bed\u6cd5\u548c\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u7684\u4e00\u4e9b\u6982\u5ff5\uff0c\u6709\u4e00\u5b9a\u7684 Python \u4f7f\u7528\u7ecf\u9a8c\u3002\u6211\u4eec\u8fd9\u91cc\u5c3d\u91cf\u53ea\u4f7f\u7528\u6700\u57fa\u672c\u7684 Python \u8bed\u6cd5\uff0c\u4e0d\u4f1a\u518d\u53bb\u4ecb\u7ecd\u7528\u5230\u7684 Python \u8bed\u6cd5\u7cd6\u3002 \u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u7b97\u662f\u672c\u79d1\u6559\u80b2\u4e2d\u504f\u96be\u7684\u8bfe\u7a0b\uff0c\u65e2\u9700\u8981\u4f60\u7406\u89e3\u5176\u539f\u7406\uff0c\u53c8\u9700\u8981\u5177\u6709\u6709\u624e\u5b9e\u7684\u7f16\u7a0b\u80fd\u529b\u3002</p> <p>\u8bf7\u6ce8\u610f: \u672c\u6559\u7a0b\u4e0d\u662f\u96f6\u57fa\u7840\u6559\u7a0b\uff0c\u7740\u91cd\u4e8e\u4f7f\u7528 Python \u5b9e\u73b0\u5e38\u7528\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\uff0c\u4e0d\u9002\u5408\u4ece\u6765\u6ca1\u6709\u5b66\u8fc7\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u7684\u65b0\u624b\u540c\u5b66\uff0c\u8d2d\u4e70\u4e4b\u524d\u8bf7\u614e\u91cd\u8003\u8651\uff0c\u8bf7\u786e\u4fdd\u4f60\u4e4b\u524d\u770b\u8fc7\u4e00\u672c\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u7684\u6559\u6750\uff0c\u6700\u597d\u6709\u8fc7\u5176\u4ed6\u8bed\u8a00\u5b9e\u73b0\u7b97\u6cd5\u7684\u7ecf\u9a8c</p>"},{"location":"#_9","title":"\u9884\u5907\u77e5\u8bc6","text":"<p>\uff08\u6ce8\u610f\uff1a\u6709\u4e9b\u540c\u5b66\u770b\u8d77\u6765\u5f88\u5403\u529b\uff0c\u4e3a\u4e86\u4e0d\u82b1\u51a4\u6789\u94b1\uff0c\u6211\u5efa\u8bae\u4f60\u5148\u6574\u4f53\u6d4f\u89c8\u672c\u7535\u5b50\u4e66\u7684\u5185\u5bb9\u548c\u4ee3\u7801\u662f\u5426\u5728\u81ea\u5df1\u7684\u7406\u89e3\u8303\u56f4\u5185\uff0c\u518d\u51b3\u5b9a\u662f\u5426\u8d2d\u4e70\u89c6\u9891\u3002\u6709\u4e9b\u6982\u5ff5\u4e0d\u662f\u7acb\u9a6c\u5c31\u80fd\u7406\u89e3\u7684\uff0c\u9700\u8981\u53cd\u590d\u601d\u8003\u5b9e\u8df5\uff09</p> <ul> <li>\u4e86\u89e3\u57fa\u672c\u7684\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u7684\u6982\u5ff5\uff0c\u4e0d\u9002\u5408\u5b8c\u5168\u6ca1\u6709\u4e86\u89e3\u8fc7\u7b97\u6cd5\u7684\u65b0\u624b\uff0c\u66f4\u4e0d\u9002\u5408 Python \u57fa\u7840\u90fd\u6ca1\u638c\u63e1\u7684\u540c\u5b66\u3002\u8d2d\u4e70\u4e4b\u524d\u8bf7\u614e\u91cd\u8003\u8651</li> <li>\u65e0\u9700\u592a\u591a\u6570\u5b66\u57fa\u7840\uff0c\u4ec5\u5728\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790\u7684\u65f6\u5019\u4f1a\u7528\u5230\u4e00\u4e9b\u7b80\u5355\u6570\u5b66\u77e5\u8bc6\u3002\u5bf9\u4e8e\u5b66\u4e60\u57fa\u7840\u7b97\u6cd5\uff0c\u903b\u8f91\u601d\u7ef4\u53ef\u80fd\u66f4\u91cd\u8981\u4e00\u4e9b</li> </ul>"},{"location":"#_10","title":"\u53c2\u8003\u6559\u6750\u548c\u94fe\u63a5","text":"<p>\u8fd9\u91cc\u6211\u53c2\u8003\u8fc7\u4e09\u672c\u4e66\uff0c\u5747\u53ef\u4ee5\u7f51\u8d2d\u7eb8\u8d28\u7248\u6216\u8005\u7f51\u7edc\u4e0a\u641c\u7d22\u7535\u5b50\u7248\uff0c\u5efa\u8bae\u5927\u5bb6\u5148\u5927\u81f4\u9605\u8bfb\u4e00\u672c\u6559\u6750\u638c\u63e1\u57fa\u672c\u539f\u7406\uff0c\u672c\u6559\u7a0b\u91cd\u70b9\u5728\u4e8e Pythonic \u4ee3\u7801\u5b9e\u73b0\uff1a</p> <p>\u300a\u7b97\u6cd5\u56fe\u89e3\u300b: \u56fe\u89e3\u7684\u5f62\u5f0f\u5f88\u9002\u5408\u65b0\u624b\uff0c\u793a\u4f8b\u4f7f\u7528\u7684\u662f python\u3002\u63a8\u8350\u57fa\u7840\u8f83\u5c11\u7684\u540c\u5b66\u770b\u8fd9\u672c\u4e66\u5165\u95e8</p> <p>\u300aData Structures and Algorithms in Python\u300b: \u9002\u5408\u5bf9 Python \u548c\u7b97\u6cd5\u6bd4\u8f83\u719f\u6089\u7684\u540c\u5b66\uff0c\u6216\u8005\u662f\u6709\u5176\u4ed6\u8bed\u8a00\u7f16\u7a0b\u7ecf\u9a8c\u7684\u540c\u5b66\u3002\u672c\u4e66\u662f\u82f1\u6587\u7248\uff0c\u7f3a\u70b9\u662f\u4e66\u4e2d\u9519\u8bef\u771f\u7684\u5f88\u591a\uff0c\u4ee3\u7801\u6709\u4e9b\u65e0\u6cd5\u8fd0\u884c\u800c\u4e14\u4e0d\u591f Pythonic\u3002\u8be5\u4e66 \u52d8\u8bef</p> <p>\u300a\u7b97\u6cd5\u5bfc\u8bba\u300b\u7b2c\u4e09\u7248: \u559c\u6b22\u6570\u5b66\u8bc1\u660e\u548c\u677f\u7816\u4e66\u7684\u540c\u5b66\u53ef\u4ee5\u53c2\u8003\uff0c\u6709\u5f88\u591a\u9ad8\u7ea7\u4e3b\u9898\u3002\u4f7f\u7528\u4f2a\u4ee3\u7801\u53ef\u4ee5\u5f88\u5feb\u7ffb\u8bd1\u6210 Python</p>"},{"location":"#_11","title":"\u7b97\u6cd5\u53ef\u89c6\u5316","text":"<p>\u5b66\u4e60\u7b97\u6cd5\u7684\u8fc7\u7a0b\u4e2d\u6709\u65f6\u5019\u4f1a\u6bd4\u8f83\u62bd\u8c61\uff0c\u8fd9\u91cc\u7ed9\u5927\u5bb6\u63a8\u8350\u4e00\u4e9b\u53ef\u89c6\u5316\u7684\u7f51\u7ad9\uff0c\u65b9\u4fbf\u66f4\u76f4\u89c2\u5730\u7406\u89e3\u5404\u79cd\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u7684\u6267\u884c\u6b65\u9aa4\uff1a \u9047\u5230\u4e00\u4e2a\u7b97\u6cd5\u6216\u6570\u636e\u7ed3\u6784\uff0c\u4f60\u53ef\u4ee5 google \u641c\u7d22 \"\u540d\u79f0+ visualization\" \u627e\u5230\u4e00\u4e9b\u53ef\u89c6\u5316\u7f51\u7ad9\u65b9\u4fbf\u7406\u89e3\uff0c\u6bd4\u5982\u5b66\u4e60\u8df3\u8dc3\u8868\u7684\u65f6\u5019\u7b14\u8005\u5c31 \u53ef\u4ee5\u901a\u8fc7 goole \"skip list visualization\" \u641c\u5230\u4e00\u4e9b\u53ef\u89c6\u5316\u7f51\u7ad9\u5e2e\u52a9\u4f60\u7406\u89e3\u5b83\u7684\u5de5\u4f5c\u539f\u7406\u3002</p> <ul> <li>https://github.com/algorithm-visualizer/algorithm-visualizer</li> <li>https://www.cs.usfca.edu/~galles/visualization/Algorithms.html</li> <li>https://cmps-people.ok.ubc.ca/ylucet/DS/Algorithms.html</li> <li>https://runestone.academy/runestone/books/published/pythonds/index.html#</li> </ul>"},{"location":"#_12","title":"\u8bb2\u8bfe\u5f62\u5f0f","text":"<p>\u7ed8\u56fe\u6f14\u793a+\u624b\u5199\u677f+\u73b0\u573a\u7f16\u7801</p> <p>\u6211\u5c06\u4f7f\u7528\u7ed8\u56fe\u8f6f\u4ef6+\u624b\u5199\u677f\u8fdb\u884c\u7c7b\u4f3c\u4e8e\u7eb8\u7b14\u5f62\u5f0f\u7684\u8bb2\u89e3\uff0c\u8fb9\u8bb2\u8fb9\u5f00\u4e2a\u7ec8\u7aef\u5206\u6210\u4e24\u4e2a\u7a97\u53e3\uff0c\u4e00\u4e2a\u7528 vim \u7f16\u5199\u4ee3\u7801\uff0c\u53e6\u4e00\u4e2a\u7a97\u53e3\u7528\u6765\u8fd0\u884c\u4ee3\u7801\uff0c\u6240\u6709\u4ee3\u7801\u6211\u5c06\u4f1a\u73b0\u573a\u7f16\u5199(\u8fd8\u662f\u5f88\u6709\u6311\u6218\u7684)\u3002 \u6bcf\u4e2a\u89c6\u9891\u6211\u4f1a\u5c3d\u91cf\u63a7\u5236\u65f6\u957f\uff0c\u8bb2\u7684\u5185\u5bb9\u5c3d\u91cf\u901a\u4fd7\u6613\u61c2\uff0c\u6446\u8131\u5b66\u9662\u6d3e\u7684\u6388\u8bfe\u65b9\u5f0f\u3002</p> <p>\u4f60\u53ef\u4ee5\u53c2\u8003\u6211\u5728\u77e5\u4e4e\u53d1\u7684\u4e13\u680f\u6587\u7ae0\u770b\u4e0b\uff1a</p> <p>\u90a3\u4e9b\u5e74\uff0c\u6211\u4eec\u4e00\u8d77\u8dea\u8fc7\u7684\u7b97\u6cd5\u9898[\u89c6\u9891]</p> <p>\u62b1\u6b49\uff0c\u6211\u662f\u5f00\u53d1\uff0c\u4f60\u5c45\u7136\u8ba9\u6211\u5199\u5355\u6d4b[\u89c6\u9891]</p>"},{"location":"#_13","title":"\u8bfe\u7a0b\u7279\u70b9","text":"<ul> <li>\u6bcf\u4e2a\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u90fd\u6709\u8bb2\u4e49\u3001\u89c6\u9891(\u5305\u542b\u8bb2\u89e3\u3001\u56fe\u793a\u3001\u624b\u52a8\u6a21\u62df)\u3001\u6e90\u4ee3\u7801\u3002\u5176\u4e2d\u53ea\u6709\u89c6\u9891\u5185\u5bb9\u4e3a\u4ed8\u8d39\u5185\u5bb9</li> <li>\u8bb2\u4e49\u5faa\u5e8f\u6e10\u8fdb\uff0c\u7ed3\u5408\u81ea\u5df1\u7684\u5b66\u4e60\u548c\u4f7f\u7528\u7ecf\u9a8c\u8bb2\u89e3\u3002github \u4e0a\u5b9e\u65f6\u66f4\u65b0</li> <li>\u89c6\u9891\u6f14\u793a\u66f4\u52a0\u76f4\u89c2\u6613\u61c2</li> <li>\u6f14\u793a\u4ee3\u7801\u5b9e\u73b0\u601d\u8def\uff0c\u6240\u6709\u4ee3\u7801\u5728\u89c6\u9891\u91cc\u5747\u73b0\u573a\u7f16\u5199</li> <li>\u504f\u5411\u5de5\u7a0b\u5e94\u7528\u548c\u4ee3\u7801\u5b9e\u73b0\u3002\u4ee3\u7801\u76f4\u63a5\u53ef\u4ee5\u7528\u3002\u6bcf\u4e2a\u6587\u4ef6\u90fd\u662f\u81ea\u5305\u542b\u7684\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u8fd0\u884c\u548c\u8c03\u8bd5\uff0c\u8fd9\u662f\u76ee\u524d\u5927\u90e8\u5206\u4e66\u7c4d\u505a\u5f97\u4e0d\u5230\u4f4d\u7684\u5730\u65b9</li> <li>\u826f\u597d\u7684\u5de5\u7a0b\u5b9e\u8df5\uff1a\u7f16\u7801\u4e4b\u524d\u788e\u788e\u5ff5(\u5de5\u7a0b\u5b9e\u8df5)\u3002 \u8fd9\u662f\u5f88\u591a\u770b\u4e86\u51e0\u672c\u4e66\u6ca1\u6709\u592a\u591a\u4e1a\u754c\u5b9e\u8df5\u7ecf\u9a8c\u5c31\u6562\u8bb2\u8bfe\u7684\u57f9\u8bad\u73ed\u8001\u5e08\u6559\u4e0d\u4e86\u7684\u3002\u77e5\u8bc6\u5ec9\u4ef7\uff0c\u7ecf\u9a8c\u65e0\u4ef7</li> <li>\u6bcf\u4e2a\u5b9e\u73b0\u90fd\u4f1a\u6709\u5355\u6d4b\u6765\u9a8c\u8bc1\uff0c\u57f9\u517b\u826f\u597d\u7684\u7f16\u7801\u548c\u6d4b\u8bd5\u4e60\u60ef\uff0c\u4f20\u6388\u5de5\u7a0b\u7ecf\u9a8c</li> <li>\u7ed3\u5408 cpython \u5e95\u5c42\u5b9e\u73b0\u8bb2\u89e3\uff08\u6bd4\u5982list \u5185\u5b58\u5206\u914d\u7b56\u7565\u7b49\uff09\uff0c\u907f\u514d\u4e00\u4e9b\u4f7f\u7528\u4e0a\u7684\u5751\u3002\u5e76\u4e14\u4f1a\u7528 python \u6765\u6a21\u62df\u5185\u7f6e dict \u7b49\u7684\u5b9e\u73b0</li> <li>\u6bcf\u7bc7\u8bb2\u4e49\u540e\u6709\u601d\u8003\u9898\u548c\u5ef6\u4f38\u9605\u8bfb\u94fe\u63a5\uff0c\u5e2e\u52a9\u5927\u5bb6\u52a0\u6df1\u601d\u8003\u548c\u7406\u89e3\u3002\u5927\u90e8\u5206\u9898\u76ee\u7b54\u6848\u90fd\u53ef\u4ee5\u7f51\u7edc\u4e0a\u641c\u7d22\u5230</li> </ul>"},{"location":"#_14","title":"\u8d44\u6599","text":"<ul> <li>\u89c6\u9891\u3002\u5305\u542b\u6240\u6709\u8bb2\u89e3\u89c6\u9891(\u7f51\u6613\u516c\u5f00\u8bfe)</li> <li>\u4ee3\u7801\u793a\u4f8b\u3002\u6240\u6709\u4ee3\u7801\u6211\u4f1a\u653e\u5230 github \u4e0a\u3002</li> <li>markdown \u8bb2\u4e49\uff0c\u5305\u542b\u89c6\u9891\u5185\u5bb9\u7684\u63d0\u8981\u7b49\u5185\u5bb9</li> <li>\u5ef6\u4f38\u9605\u8bfb\u3002\u6211\u4f1a\u9644\u4e0a\u4e00\u4e9b\u9605\u8bfb\u8d44\u6599\u65b9\u4fbf\u60f3\u6df1\u5165\u5b66\u4e60\u7684\u540c\u5b66</li> </ul>"},{"location":"#_15","title":"\u5982\u4f55\u83b7\u53d6\u6bcf\u7ae0\u4ee3\u7801","text":"<p>\u6ce8\u610f\u6bcf\u4e00\u7ae0\u76ee\u5f55\u91cc\u90fd\u6709 py \u6587\u4ef6\uff0c\u5728\u7535\u5b50\u4e66\u91cc\u770b\u4e0d\u5230\u3002clone \u4e0b\u672c\u4ee3\u7801\u4ed3\u5e93\u627e\u5230\u5bf9\u5e94\u76ee\u5f55\u91cc\u7684 python \u6587\u4ef6\u5373\u662f\u6bcf\u7ae0\u6d89\u53ca\u5230\u7684\u4ee3\u7801\u3002 \u7531\u4e8e\u4ee3\u7801\u5b9e\u73b0\u5343\u5dee\u4e07\u522b\uff0c\u672c\u4e66\u4ee3\u7801\u5b9e\u73b0\u5177\u6709\u4e00\u5b9a\u7684\u4e2a\u4eba\u98ce\u683c\uff0c\u4e0d\u4ee3\u8868\u6700\u4f73\u5b9e\u73b0\uff0c\u4ec5\u4f9b\u53c2\u8003\uff0c\u7b14\u8005\u5c3d\u91cf\u4f7f\u7528 python2/3 \u517c\u5bb9\u4ee3\u7801\u3002 \u76ee\u524d\u5df2\u7ecf\u65b0\u589e\u300a\u5251\u6307offer\u300b\u5927\u90e8\u5206\u7ecf\u5178\u9898\u76ee\u7684 Python \u89e3\u6cd5\uff0c\u6bcf\u9053\u9898\u76ee\u9644\u5e26leetcode \u5730\u5740\uff0c\u5927\u5bb6\u53ef\u4ee5\u81ea\u5df1\u5c1d\u8bd5\u89e3\u51b3\u63d0\u4ea4\u3002 \u672c\u9879\u76ee\u9075\u5b88 MIT \u534f\u8bae\uff0c\u672c\u9879\u76ee\u4e0b\u7684\u6240\u6709\u4ee3\u7801\u60a8\u53ef\u4ee5\u4efb\u610f\u5b66\u4e60\u4fee\u6539\u548c\u4f7f\u7528\uff0c \u4f46\u662f\u76f4\u63a5\u5f15\u7528\u4ee3\u7801\u8bf7\u52a0\u4e0a\u672c\u9879\u76ee github \u5730\u5740\u3002</p>"},{"location":"#_16","title":"\u5982\u4f55\u5b66\u4e60","text":"<p>\u7b14\u8005\u8bb2\u8bfe\u5f55\u5236\u89c6\u9891\u7684\u8fc7\u7a0b\u4e5f\u662f\u81ea\u5df1\u518d\u6574\u7406\u548c\u5b66\u4e60\u7684\u8fc7\u7a0b\uff0c\u5f55\u5236\u89c6\u9891\u4e4b\u524d\u9700\u8981\u53c2\u8003\u5f88\u591a\u8d44\u6599 \u5e0c\u671b\u5bf9\u6240\u8bb2\u5230\u7684\u5185\u5bb9\uff0c\u4f60\u80fd\u591f</p> <ul> <li>\u7406\u89e3\u6240\u8bb2\u7684\u6bcf\u4e2a\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u7684<ul> <li>\u539f\u7406</li> <li>Python \u5b9e\u73b0\u65b9\u5f0f</li> <li>\u65f6\u95f4\u3001\u7a7a\u95f4\u590d\u6742\u5ea6</li> <li>\u4f7f\u7528\u573a\u666f\uff0c\u4ec0\u4e48\u65f6\u5019\u7528</li> </ul> </li> <li>\u81ea\u5df1\u5c1d\u8bd5\u5b9e\u73b0\uff0c\u5982\u679c\u629b\u5f00\u89c6\u9891\u81ea\u5df1\u5199\u8d77\u6765\u6709\u56f0\u96be\u53ef\u4ee5\u53cd\u590d\u591a\u770b\u51e0\u6b21\u89c6\u9891\uff0c\u4e00\u5b9a\u8981\u81ea\u5df1\u624b\u52a8\u5b9e\u73b0\u3002\u5f88\u591a\u9762\u8bd5\u53ef\u80fd\u4f1a\u8ba9\u624b\u5199\u3002\u4e00\u6b21\u4e0d\u884c\u5c31\u770b\u5b8c\u539f\u7406\u540e\u591a\u5b9e\u8df5\u51e0\u6b21\uff0c\u76f4\u5230\u80fd\u81ea\u5df1\u72ec\u7acb\u5b8c\u6210\u3002</li> <li>\u6bcf\u7ae0\u8bb2\u4e49\u540e\u8fb9\u90fd\u4f1a\u6709\u6211\u8bbe\u8ba1\u7684\u51e0\u4e2a\u5c0f\u95ee\u9898\uff0c\u6700\u597d\u80fd\u591f\u56de\u7b54\u4e0a\u6765\u3002\u540c\u65f6\u8fd8\u6709\u4ee3\u7801\u7ec3\u4e60\u9898\uff0c\u4f60\u53ef\u4ee5\u6311\u6218\u4e0b\u81ea\u5df1\u7684\u638c\u63e1\u7a0b\u5ea6\u3002</li> <li>\u6700\u597d\u6309\u7167\u987a\u5e8f\u5faa\u5e8f\u6e10\u8fdb\uff0c\u6bcf\u7ae0\u90fd\u4f1a\u6709\u94fa\u57ab\u548c\u8054\u7cfb\uff0c\u540e\u8fb9\u7684\u7ae0\u8282\u53ef\u80fd\u4f1a\u4f7f\u7528\u5230\u524d\u9762\u63d0\u5230\u7684\u6570\u636e\u7ed3\u6784</li> <li>\u6839\u636e\u81ea\u5df1\u7684\u57fa\u7840\u7ed3\u5408\u6211\u5217\u4e3e\u7684\u6559\u6750\u548c\u89c6\u9891\u5b66\u4e60\uff0c\u7b2c\u4e00\u6b21\u7406\u89e3\u4e0d\u4e86\u7684\u53ef\u4ee5\u53cd\u590d\u591a\u770b\u51e0\u6b21\uff0c\u591a\u7f16\u5199\u4ee3\u7801\u7ec3\u4e60\u5230\u719f\u7ec3\u4e3a\u6b62</li> </ul>"},{"location":"#_17","title":"\u8bfe\u7a0b\u76ee\u6807","text":"<p>\u638c\u63e1\u57fa\u672c\u7684\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u539f\u7406\uff0c\u80fd\u72ec\u7acb\u4f7f\u7528 Python \u8bed\u8a00\u5b9e\u73b0\uff0c\u80fd\u5728\u65e5\u5e38\u5f00\u53d1\u4e2d\u7075\u6d3b\u9009\u7528\u6570\u636e\u7ed3\u6784\u3002 \u5bf9\u4e8e\u627e\u5de5\u4f5c\u7684\u540c\u5b66\u63d0\u5347\u9762\u8bd5\u6210\u529f\u7387\u3002</p>"},{"location":"#_18","title":"\u5f00\u53d1\u548c\u6d4b\u8bd5\u5de5\u5177","text":"<p>\u63a8\u8350\u4f7f\u7528\u4ee5\u4e0b\u5de5\u5177\u8fdb\u884c\u5f00\u53d1\uff0c\u5982\u679c\u4f7f\u7528\u7f16\u8f91\u5668\u6700\u597d\u88c5\u5bf9 \u5e94 Python \u63d2\u4ef6\uff0c\u7b14\u8005\u89c6\u9891\u6f14\u793a\u4e2d\u4f7f\u7528\u4e86 vim\uff0c\u8bfb\u8005\u53ef\u4ee5\u81ea\u5df1\u6311\u9009\u81ea\u5df1\u559c\u6b22\u7684\u5f00\u53d1\u5de5\u5177\uff1a</p> <ul> <li>Pycharm</li> <li>Sublime</li> <li>Atom</li> <li>Vscode</li> <li>Vim/Emacs</li> </ul> <p>\u6ce8\u610f\u89c6\u9891\u4e2d\u4f7f\u7528\u5230\u4e86 pytest \u6d4b\u8bd5\u6846\u67b6\u548c when-changed \u6587\u4ef6\u53d8\u52a8\u76d1\u63a7\u5de5\u5177(\u65b9\u4fbf\u6211\u4eec\u4fee\u6539\u5b8c\u4ee3\u7801\u4fdd\u5b58\u540e\u81ea\u52a8\u6267\u884c\u6d4b\u8bd5)\uff0c\u4f60\u9700\u8981\u7528 pip \u5b89\u88c5</p> <pre><code>pip install pytest\npip install when-changed\n</code></pre> <p>\u89c6\u9891\u6f14\u793a\u91cc\u6211\u4f7f\u7528\u5230\u4e86\u4e00\u4e2a\u7b80\u5355\u7684 test.sh \u811a\u672c\u6587\u4ef6\uff0c\u5185\u5bb9\u5982\u4e0b:</p> <p><pre><code>#!/usr/bin/env bash\n\n# pip install when-changed, \u76d1\u63a7\u6587\u4ef6\u53d8\u52a8\u5e76\u4e14\u6587\u4ef6\u4fee\u6539\u4e4b\u540e\u81ea\u52a8\u6267\u884c pytest \u5355\u6d4b\uff0c\u65b9\u4fbf\u6211\u4eec\u8fb9\u4fee\u6539\u8fb9\u8dd1\u6d4b\u8bd5\n when-changed -v -r -1 -s ./    \"py.test -s $1\"\n</code></pre> \u5c06\u4ee5\u4e0a\u5185\u5bb9\u653e\u5230 test.sh \u6587\u4ef6\u540e\u52a0\u4e0a\u53ef\u6267\u884c\u6743\u9650, <code>chmod +x test.sh</code>\uff0c\u4e4b\u540e\u5c31\u53ef\u4ee5\u7528</p> <p><pre><code>'./test.sh somefile.py'\n</code></pre> \u6bcf\u6b21\u6211\u4eec\u6539\u52a8\u4e86\u4ee3\u7801\uff0c\u5c31\u4f1a\u81ea\u52a8\u6267\u884c\u4ee3\u7801\u91cc\u7684\u5355\u5143\u6d4b\u8bd5\u4e86\u3002pytest \u4f1a\u81ea\u52a8\u53d1\u73b0\u4ee5 test \u5f00\u5934\u7684\u51fd\u6570\u5e76\u6267\u884c\u6d4b\u8bd5\u4ee3\u7801\u3002\u826f\u597d\u7684\u5de5\u7a0b\u9700\u8981\u6211\u4eec\u7528\u5355\u6d4b\u6765\u4fdd\u8bc1\uff0c\u5c06\u6765\u5373\u4f7f\u4fee\u6539\u4e86\u5185\u90e8\u5b9e\u73b0\u903b\u8f91\u4e5f\u65b9\u4fbf\u505a\u56de\u5f52\u9a8c\u8bc1\u3002</p> <p>\u6216\u8005\u4f60\u53ef\u4ee5\u5728\u7684 ~/.bashrc  or  ~/.zshrc \u91cc\u8fb9\u52a0\u4e0a\u8fd9\u4e2a\u6620\u5c04\uff08\u522b\u5fd8\u8bb0\u52a0\u4e0a\u4e4b\u540esource\u4e0b\uff09:</p> <pre><code># \u76d1\u63a7\u5f53\u524d\u6587\u4ef6\u5939\u6587\u4ef6\u53d8\u52a8\u81ea\u52a8\u6267\u884c\u547d\u4ee4\nalias watchtest='when-changed -v -r -1 -s ./ '\n</code></pre> <p>\u7136\u540e\u5728\u4f60\u7684\u4ee3\u7801\u76ee\u5f55\u91cc\u5934\u6267\u884c <code>watchtest pytest -s somefile.py</code> \u4e00\u6837\u7684\u6548\u679c</p>"},{"location":"#_19","title":"\u6d4b\u8bd5\u7528\u4f8b\u8bbe\u8ba1","text":"<p>\u7b14\u8005\u5728\u521a\u5b66\u4e60\u7f16\u7a0b\u7684\u65f6\u5019\u603b\u662f\u5fd8\u8bb0\u5904\u7406\u4e00\u4e9b\u7279\u4f8b(\u5c24\u5176\u662f\u52a8\u6001\u8bed\u8a00\u53ef\u4ee5\u4f20\u5404\u79cd\u503c)\uff0c\u4e3a\u4e86\u517b\u6210\u826f\u597d\u7684\u7f16\u7a0b\u548c\u6d4b\u8bd5\u4e60\u60ef\uff0c\u5728\u7f16\u5199\u5355\u5143\u6d4b\u8bd5\u7528\u4f8b\u7684\u65f6\u5019\uff0c \u6211\u4eec\u6ce8\u610f\u8003\u8651\u4e0b\u5982\u4e0b\u6d4b\u8bd5\u7528\u4f8b(\u7b49\u4ef7\u7c7b\u5212\u5206)\uff1a</p> <ul> <li>\u6b63\u5e38\u503c\u529f\u80fd\u6d4b\u8bd5</li> <li>\u8fb9\u754c\u503c\uff08\u6bd4\u5982\u6700\u5927\u6700\u5c0f\uff0c\u6700\u5de6\u6700\u53f3\u503c\uff09</li> <li>\u5f02\u5e38\u503c\uff08\u6bd4\u5982 None\uff0c\u7a7a\u503c\uff0c\u975e\u6cd5\u503c\uff09</li> </ul> <pre><code>def binary_search(array, target):\n    if not array:\n        return -1\n    beg, end = 0, len(array)\n    while beg &lt; end:\n        mid = beg + (end - beg) // 2  # py3\n        if array[mid] == target:\n            return mid\n        elif array[mid] &gt; target:\n            end = mid\n        else:\n            beg = mid + 1\n    return -1\n\n\ndef test():\n    \"\"\"\n    \u5982\u4f55\u8bbe\u8ba1\u6d4b\u8bd5\u7528\u4f8b\uff1a\n    - \u6b63\u5e38\u503c\u529f\u80fd\u6d4b\u8bd5\n    - \u8fb9\u754c\u503c\uff08\u6bd4\u5982\u6700\u5927\u6700\u5c0f\uff0c\u6700\u5de6\u6700\u53f3\u503c\uff09\n    - \u5f02\u5e38\u503c\uff08\u6bd4\u5982 None\uff0c\u7a7a\u503c\uff0c\u975e\u6cd5\u503c\uff09\n    \"\"\"\n    # \u6b63\u5e38\u503c\uff0c\u5305\u542b\u6709\u548c\u65e0\u4e24\u79cd\u7ed3\u679c\n    assert binary_search([0, 1, 2, 3, 4, 5], 1) == 1\n    assert binary_search([0, 1, 2, 3, 4, 5], 6) == -1\n    assert binary_search([0, 1, 2, 3, 4, 5], -1) == -1\n    # \u8fb9\u754c\u503c\n    assert binary_search([0, 1, 2, 3, 4, 5], 0) == 0\n    assert binary_search([0, 1, 2, 3, 4, 5], 5) == 5\n    assert binary_search([0], 0) == 0\n\n    # \u5f02\u5e38\u503c\n    assert binary_search([], 1) == -1\n</code></pre> <p>\u5f53\u7136\u6211\u4eec\u4e5f\u4e0d\u7528\u505a\u7684\u975e\u5e38\u7ec6\u81f4\uff0c\u8981\u4e0d\u7136\u5199\u6d4b\u8bd5\u662f\u4e00\u4ef6\u975e\u5e38\u7e41\u7410\u7d2f\u4eba\u7684\u4e8b\u60c5\uff0c\u751a\u81f3\u6709\u65f6\u5019\u4e3a\u4e86\u6d4b\u8bd5\u800c\u6d4b\u8bd5\uff0c\u53ea\u662f\u4e3a\u4e86\u8ba9\u5355\u6d4b\u8986\u76d6\u7387\u597d\u770b\u70b9\u3002 \u5f53\u7136\u5982\u679c\u662fweb\u5e94\u7528\u7528\u6237\u8f93\u5165\uff0c\u6211\u4eec\u8981\u5047\u8bbe\u6240\u6709\u7684\u53c2\u6570\u90fd\u662f\u4e0d\u53ef\u4fe1\u7684\u3002 \u4f46\u662f\u5f88\u591a\u5185\u90e8\u8c03\u7528\u7684\u51fd\u6570\u6211\u4eec\u57fa\u4e8e\u7ea6\u5b9a\u6765\u7f16\u7a0b\uff0c\u5982\u679c\u4f60\u778e\u4f20\u53c2\u6570\uff0c\u90a3\u5c31\u662f\u8c03\u7528\u8005\u7684\u8d23\u4efb\u4e86\u3002</p>"},{"location":"#_20","title":"\u52d8\u8bef","text":"<p>\u8f93\u51fa\u5176\u5b9e\u4e5f\u662f\u4e00\u79cd\u518d\u5b66\u4e60\u7684\u8fc7\u7a0b\uff0c\u4e2d\u9014\u9700\u8981\u67e5\u770b\u5927\u91cf\u8d44\u6599\u3001\u7f16\u5199\u8bb2\u4e49\u3001\u89c6\u9891\u5f55\u5236\u3001\u4ee3\u7801\u7f16\u5199\u7b49\uff0c\u96be\u514d\u6709\u758f\u6f0f\u751a\u81f3\u9519\u8bef\u4e4b\u5904\u3002 \u6709\u51fa\u7248\u793e\u627e\u8fc7\u7b14\u8005\u60f3\u8ba9\u6211\u51fa\u4e66\uff0c\u4e00\u6765\u81ea\u5df1\u5bf9\u51fa\u4e66\u5174\u8da3\u4e0d\u5927\uff0c\u53e6\u5916\u611f\u89c9\u4e66\u7c4d\u76f8\u5bf9\u89c6\u9891\u4e0d\u591f\u76f4\u89c2\uff0c\u6709\u9519\u8bef\u4e5f\u4e0d\u80fd\u53ca\u65f6\u4fee\u6539\uff0c\u6253\u7b97\u76f4\u63a5\u628a\u6240\u6709\u6587\u5b57\u5185\u5bb9\u8bb2\u4e49\u548c\u4ee3\u7801\u7b49\u653e\u5230 github \u4e0a\uff0c\u4f9b\u5927\u5bb6\u514d\u8d39\u67e5\u9605\u3002</p> <p>\u5982\u679c\u4f60\u53d1\u73b0\u6587\u5b57\u5185\u5bb9\u3001\u4ee3\u7801\u5185\u5bb9\u3001\u89c6\u9891\u5185\u5bb9\u6709\u9519\u8bef\u6216\u8005\u6709\u7591\u95ee\uff0c\u6b22\u8fce\u5728 github \u4e0a\u63d0 issue \u8ba8\u8bba(\u6216\u8005\u7f51\u6613\u516c\u5f00\u8bfe\u8bc4\u8bba\u533a)\uff0c\u6216\u8005\u76f4\u63a5\u63d0 Merge Request\uff0c\u6211\u4f1a\u5c3d\u91cf\u53ca\u65f6\u4fee\u6b63\u76f8\u5173\u5185\u5bb9\uff0c\u9632\u6b62\u5bf9\u8bfb\u8005\u4ea7\u751f\u8bef\u5bfc\u3002 \u540c\u65f6\u975e\u5e38\u611f\u8c22\u8ba4\u771f\u5b66\u4e60\u5e76\u53ca\u65f6\u53d1\u73b0\u4e66\u4e2d\u9519\u8bef\u7684\u540c\u5b66\uff0c\u975e\u5e38\u6b22\u8fce\u9488\u5bf9\u77e5\u8bc6\u672c\u8eab\u7684\u4ea4\u6d41\u548c\u8ba8\u8bba\uff0c\u4efb\u4f55\u5efa\u8bae\u548c\u4fee\u6b63\u6211\u90fd\u4f1a\u8ba4\u771f\u6c42\u8bc1\u3002 \u5bf9\u4e8e\u63d0\u51fa\u4fee\u6b63\u610f\u89c1\u6216\u8005\u63d0\u4ea4\u4ee3\u7801\u7684\u540c\u5b66\uff0c\u7531\u4e8e\u4eba\u6570\u6bd4\u8f83\u591a\u8fd9\u91cc\u5c31\u4e0d\u4e00\u4e00\u5217\u4e3e\u4e86\uff0c\u53ef\u4ee5\u5728\u4ee5\u4e0b\u5217\u8868\u67e5\u770b\uff0c\u518d\u6b21\u611f\u8c22\u4f60\u4eec\u3002\u7b14\u8005\u4fe1\u5949\u5f00\u6e90\u7cbe\u795e\uff0c\u300e\u773c\u775b\u8db3\u591f\u591a\uff0cbug \u65e0\u5904\u85cf\u300f\u3002 \u5982\u679c\u60a8\u53d1\u73b0\u89c6\u9891\u4e2d\u7684\u4ee3\u7801\u6709\u8bef\uff0c\u8bf7\u53ca\u65f6\u4f7f\u7528 git pull \u62c9\u53d6\u672c\u9879\u76ee\u7684\u4ee3\u7801\u66f4\u65b0\uff0c\u6700\u597d\u7528\u76ee\u524d\u6700\u65b0\u7684\u4ee3\u7801\u6765\u5b66\u4e60\u548c\u5b9e\u8df5\u3002</p> <p>issue</p> <p>contributors</p>"},{"location":"#git","title":"\u5982\u4f55\u66f4\u65b0\u4ee3\u7801(\u5199\u7ed9\u4e0d\u719f\u6089 git \u7684\u540c\u5b66)","text":"<p>\u5982\u679c\u4f60\u76f4\u63a5 clone \u7684\u672c\u9879\u76ee\u7684\u4ee3\u7801\u4ed3\u5e93\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 <code>git pull origin master</code> \u62c9\u53d6\u66f4\u65b0\u3002 \u5982\u679c\u4f60\u5148 fork \u5230\u4e86\u81ea\u5df1\u7684\u4ed3\u5e93\uff0c\u7136\u540e clone \u5230\u672c\u5730\u7684\u662f\u4f60\u81ea\u5df1\u7684\u4ed3\u5e93\uff0c\u4f60\u53ef\u4ee5\u7f16\u8f91\u672c\u5730\u9879\u76ee\u7684 <code>.git/config</code>\uff0c \u589e\u52a0\u5982\u4e0b\u914d\u7f6e\uff1a</p> <pre><code>[remote \"pegasuswang\"]\n    url = https://github.com/PegasusWang/python_data_structures_and_algorithms.git\n    fetch = +refs/heads/*:refs/remotes/origin/*\n</code></pre> <p>\u7136\u540e\u4f7f\u7528 <code>git pull pegasuswang master</code> \u62c9\u53d6\u66f4\u65b0\u3002</p>"},{"location":"#_21","title":"\u5982\u4f55\u63d0\u95ee\uff1f","text":"<p>\u5982\u679c\u8bfb\u8005\u5173\u4e8e\u4ee3\u7801\u3001\u89c6\u9891\u3001\u8bb2\u4e49\u6709\u4efb\u4f55\u7591\u95ee\uff0c\u6b22\u8fce\u4e00\u8d77\u8ba8\u8bba \u8bf7\u6ce8\u610f\u4ee5\u4e0b\u51e0\u70b9\uff1a</p> <ul> <li>\u63cf\u8ff0\u5c3d\u91cf\u5177\u4f53\uff0c\u89c6\u9891\u6216\u8005\u4ee3\u7801\u54ea\u4e00\u90e8\u5206\u6709\u95ee\u9898(\u53ef\u4ee5\u5177\u4f53\u5230\u6587\u6863\u6216\u8005\u4ee3\u7801\u884c\u6570)\uff1f\u8bf7\u5c3d\u91cf\u628a\u6d89\u53ca\u7ae0\u8282\u548c\u4ee3\u7801\u8d34\u51fa\u6765\uff0c\u65b9\u4fbf\u5b9a\u4f4d\u95ee\u9898\u3002</li> <li>\u5982\u679c\u6d89\u53ca\u5230\u4ee3\u7801\uff0c\u63d0\u95ee\u65f6\u8bf7\u4fdd\u6301\u4ee3\u7801\u7684\u683c\u5f0f</li> <li>\u5982\u679c\u76f4\u63a5\u63d0\u4e86\u4ee3\u7801bug\uff0c\u6700\u597d\u6709\u76f8\u5173\u6d4b\u8bd5\u7528\u4f8b\u5c55\u793a\u5931\u8d25 test case\uff0c\u65b9\u4fbf\u590d\u73b0\u95ee\u9898</li> </ul>"},{"location":"#_22","title":"\u672c\u7535\u5b50\u4e66\u5236\u4f5c\u548c\u5199\u4f5c\u65b9\u5f0f","text":"<p>\u4f7f\u7528 mkdocs \u548c markdown \u6784\u5efa\uff0c\u4f7f\u7528  Python-Markdown-Math \u5b8c\u6210\u6570\u5b66\u516c\u5f0f\u3002 markdown \u8bed\u6cd5\u53c2\u8003\uff1ahttp://xianbai.me/learn-md/article/about/readme.html</p> <p>\u5b89\u88c5\u4f9d\u8d56\uff1a <pre><code>pip install mkdocs    # \u5236\u4f5c\u7535\u5b50\u4e66, http://markdown-docs-zh.readthedocs.io/zh_CN/latest/\n# https://stackoverflow.com/questions/27882261/mkdocs-and-mathjax/31874157\npip install https://github.com/mitya57/python-markdown-math/archive/master.zip\n\n# \u6216\u8005\u76f4\u63a5\npip install -r requirements.txt\n\n# \u5982\u679c\u4f60 fork \u4e86\u672c\u9879\u76ee\uff0c\u53ef\u4ee5\u5b9a\u671f\u62c9\u53d6\u4e3b\u4ed3\u5e93\u7684\u4ee3\u7801\u6765\u83b7\u53d6\u66f4\u65b0\uff0c\u76ee\u524d\u8fd8\u5728\u4e0d\u65ad\u66f4\u65b0\u76f8\u5173\u7ae0\u8282\n</code></pre></p> <p>\u4f60\u53ef\u4ee5 clone \u672c\u9879\u76ee\u540e\u5728\u672c\u5730\u7f16\u5199\u548c\u67e5\u770b\u7535\u5b50\u4e66\uff1a <pre><code>mkdocs serve     # \u4fee\u6539\u81ea\u52a8\u66f4\u65b0\uff0c\u6d4f\u89c8\u5668\u6253\u5f00 http://localhost:8000 \u8bbf\u95ee\n# \u6570\u5b66\u516c\u5f0f\u53c2\u8003 https://www.zybuluo.com/codeep/note/163962\nmkdocs gh-deploy    # \u90e8\u7f72\u5230\u81ea\u5df1\u7684 github pages\n</code></pre></p> <p>\u626b\u7801\u52a0\u5165\u8bfe\u7a0b\uff1a</p> <p></p>"},{"location":"00_%E8%AF%BE%E7%A8%8B%E7%AE%80%E4%BB%8B%E4%B9%8B%E7%AC%A8%E6%96%B9%E6%B3%95%E5%AD%A6%E7%AE%97%E6%B3%95/why_and_how_to_learn/","title":"\u4ec0\u4e48\u662f\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\uff1f","text":"<p>\u4f60\u53ef\u80fd\u4f1a\u5728\u4e00\u4e9b\u6559\u6750\u4e0a\u770b\u5230\u8fd9\u53e5\u8bdd\uff1a</p> <p>\u7a0b\u5e8f = \u7b97\u6cd5 + \u6570\u636e\u7ed3\u6784</p> <p>\u7b97\u6cd5\uff08Algorithm\uff09\uff1a\u662f\u6307\u89e3\u9898\u65b9\u6848\u7684\u51c6\u786e\u800c\u5b8c\u6574\u7684\u63cf\u8ff0\uff0c\u662f\u4e00\u7cfb\u5217\u89e3\u51b3\u95ee\u9898\u7684\u6e05\u6670\u6307\u4ee4\uff0c\u7b97\u6cd5\u4ee3\u8868\u7740\u7528\u7cfb\u7edf\u7684\u65b9\u6cd5\u63cf\u8ff0\u89e3\u51b3\u95ee\u9898\u7684\u7b56\u7565\u673a\u5236\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u80fd\u591f\u5bf9\u4e00\u5b9a\u89c4\u8303\u7684\u8f93\u5165\uff0c\u5728\u6709\u9650\u65f6\u95f4\u5185\u83b7\u5f97\u6240\u8981\u6c42\u7684\u8f93\u51fa\u3002</p> <p>\u6570\u636e\u7ed3\u6784\uff08Data Structures\uff09\uff1a\u662f\u8ba1\u7b97\u673a\u5b58\u50a8\u548c\u7ec4\u7ec7\u6570\u636e\u7684\u4e00\u79cd\u65b9\u5f0f\uff0c\u53ef\u4ee5\u7528\u6765\u9ad8\u6548\u5730\u5904\u7406\u6570\u636e\u3002</p> <p>\u4e3e\u4e2a\u4f8b\u5b50\uff1a\u4e8c\u5206\u67e5\u627e\u5c31\u662f\u4e00\u4e2a\u975e\u5e38\u7ecf\u5178\u7684\u7b97\u6cd5\uff0c\u800c\u4e8c\u5206\u67e5\u627e\u7ecf\u5e38\u9700\u8981\u4f5c\u7528\u5728\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4\u4e0a\u3002\u8fd9\u91cc\u4e8c\u5206\u5c31\u662f\u4e00\u79cd\u6298\u534a\u7684\u7b97\u6cd5\u601d\u60f3\uff0c \u800c\u6570\u7ec4\u662f\u6211\u4eec\u6700\u5e38\u7528\u7684\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u652f\u6301\u6839\u636e\u4e0b\u6807\u5feb\u901f\u8bbf\u95ee\u3002\u5f88\u591a\u7b97\u6cd5\u9700\u8981\u7279\u5b9a\u7684\u6570\u636e\u7ed3\u6784\u6765\u5b9e\u73b0\uff0c\u6240\u4ee5\u7ecf\u5e38\u628a\u5b83\u4eec\u653e\u5230\u4e00\u5757\u8bb2\u3002</p> <p>\u5b9e\u9645\u4e0a\uff0c\u5728\u771f\u6b63\u7684\u9879\u76ee\u5f00\u53d1\u4e2d\uff0c\u5927\u90e8\u5206\u65f6\u95f4\u90fd\u662f \u4ece\u6570\u636e\u5e93\u53d6\u6570\u636e -&gt; \u6570\u636e\u64cd\u4f5c\u548c\u7ed3\u6784\u5316 -&gt; \u8fd4\u56de\u7ed9\u524d\u7aef\uff0c\u5728\u6570\u636e\u64cd\u4f5c\u8fc7\u7a0b\u4e2d\u9700\u8981\u5408\u7406\u5730\u62bd\u8c61\uff0c \u7ec4\u7ec7\u3001\u5904\u7406\u6570\u636e\uff0c\u5982\u679c\u9009\u7528\u4e86\u9519\u8bef\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5c31\u4f1a\u9020\u6210\u4ee3\u7801\u8fd0\u884c\u4f4e\u6548\u3002\u8fd9\u4e5f\u662f\u6211\u4eec\u9700\u8981\u5b66\u4e60\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u7684\u539f\u56e0\u3002</p>"},{"location":"00_%E8%AF%BE%E7%A8%8B%E7%AE%80%E4%BB%8B%E4%B9%8B%E7%AC%A8%E6%96%B9%E6%B3%95%E5%AD%A6%E7%AE%97%E6%B3%95/why_and_how_to_learn/#_2","title":"\u7b28\u65b9\u6cd5\u5b66\u7b97\u6cd5","text":"<p>\u8fd9\u91cc\u6211\u4eec\u7528\u4e00\u79cd\u5f88\u539f\u59cb\u7684\u300e\u7b28\u300f\u65b9\u6cd5\u6765\u5b66\u4e60\u7b97\u6cd5\uff1a\u7eb8\u7b14\u6a21\u62df\u3002</p> <ul> <li>\u9605\u8bfb\u8d44\u6599\u4e86\u89e3\u7b97\u6cd5\u601d\u60f3</li> <li>\u7eb8\u7b14\u6a21\u62df\u5c1d\u8bd5\u7406\u89e3</li> <li>\u7528\u81ea\u5df1\u719f\u6089\u7684\u7f16\u7a0b\u8bed\u8a00\u6765\u5b9e\u73b0</li> <li>\u5355\u6d4b</li> </ul>"},{"location":"00_%E8%AF%BE%E7%A8%8B%E7%AE%80%E4%BB%8B%E4%B9%8B%E7%AC%A8%E6%96%B9%E6%B3%95%E5%AD%A6%E7%AE%97%E6%B3%95/why_and_how_to_learn/#_3","title":"\u5c0f\u95ee\u9898","text":"<ul> <li>\u4f60\u8fd8\u77e5\u9053\u54ea\u4e9b\u7ecf\u5178\u7684\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\uff1f</li> <li>\u5b66\u4e60\u7b97\u6cd5\u4f60\u89c9\u5f97\u9700\u8981\u54ea\u4e9b\u9884\u5907\u77e5\u8bc6\uff1f</li> <li>\u6211\u4eec\u7684\u4e1a\u52a1\u4ee3\u7801\u5f00\u53d1\u4e2d\u4f1a\u6d89\u53ca\u5230\u7b97\u6cd5\u5417\uff1f</li> <li>\u4f60\u4e86\u89e3 redis \u5417\uff0c\u4f60\u77e5\u9053\u5b83\u6709\u54ea\u51e0\u4e2a\u5e38\u7528\u7684\u6570\u636e\u7ed3\u6784\u5417\uff1f\u4f60\u77e5\u9053\u5b83\u7684\u5e95\u5c42\u5b9e\u73b0\u65b9\u5f0f\u5417\uff1f</li> </ul>"},{"location":"01_%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/ADT_OOP/","title":"Python \u4e00\u5207\u7686\u5bf9\u8c61","text":"<p>\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5728 python \u4e2d\u6211\u4eec\u7ecf\u5e38\u4f7f\u7528\u7684 list</p> <pre><code>l = list()    # \u5b9e\u4f8b\u5316\u4e00\u4e2a list \u5bf9\u8c61 l\nl.append(1)    # \u8c03\u7528 l \u7684 append \u65b9\u6cd5\nl.append(2)\nl.remove(1)\nprint(len(l))    # \u8c03\u7528\u5bf9\u8c61\u7684 `__len__` \u65b9\u6cd5\n</code></pre> <p>\u5728\u540e\u9762\u5b9e\u73b0\u65b0\u7684\u6570\u636e\u7c7b\u578b\u65f6\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 python \u7684 class \u5b9e\u73b0\uff0c\u5b83\u5305\u542b\u5c5e\u6027\u548c\u65b9\u6cd5\u3002 \u5c5e\u6027\u4e00\u822c\u662f\u4f7f\u7528\u67d0\u79cd\u7279\u5b9a\u7684\u6570\u636e\u7c7b\u578b\uff0c\u800c\u65b9\u6cd5\u4e00\u822c\u662f\u5bf9\u5c5e\u6027\u7684\u64cd\u4f5c\u3002 \u8fd9\u91cc\u4f60\u53ea\u9700\u4e86\u89e3\u8fd9\u4e48\u591a\u5c31\u884c\u4e86\uff0c \u6211\u4eec\u4e0d\u4f1a\u4f7f\u7528\u7ee7\u627f\u7b49\u7279\u6027\u3002</p>"},{"location":"01_%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/ADT_OOP/#adt","title":"\u4ec0\u4e48\u662f\u62bd\u8c61\u6570\u636e\u7c7b\u578b ADT","text":"<p>\u5b9e\u9645\u4e0a python \u5185\u7f6e\u7684 list \u5c31\u53ef\u4ee5\u770b\u6210\u4e00\u79cd\u62bd\u8c61\u6570\u636e\u7c7b\u578b\u3002</p> <p>ADT: Abstract Data Type\uff0c\u62bd\u8c61\u6570\u636e\u7c7b\u578b\uff0c\u6211\u4eec\u5728\u7ec4\u5408\u5df2\u6709\u7684\u6570\u636e\u7ed3\u6784\u6765\u5b9e\u73b0\u4e00\u79cd\u65b0\u7684\u6570\u636e\u7c7b\u578b\uff0c ADT \u5b9a\u4e49\u4e86\u7c7b\u578b\u7684\u6570\u636e\u548c\u64cd\u4f5c\u3002</p> <p>\u6211\u4eec\u4ee5\u62bd\u8c61\u4e00\u4e2a\u80cc\u5305(Bag) \u6570\u636e\u7c7b\u578b\u6765\u8bf4\u660e\uff0c\u80cc\u5305\u662f\u4e00\u79cd\u5bb9\u5668\u7c7b\u578b\uff0c\u6211\u4eec\u53ef\u4ee5\u7ed9\u5b83\u6dfb\u52a0\u4e1c\u897f\uff0c\u4e5f\u53ef\u4ee5\u79fb\u9664\u4e1c\u897f\uff0c\u5e76\u4e14\u6211\u4eec\u60f3\u77e5\u9053\u80cc\u5305\u91cc \u6709\u591a\u5c11\u4e1c\u897f\u3002\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u65b0\u7684\u6570\u636e\u7c7b\u578b\u53eb\u505a Bag.</p> <pre><code>class Bag:\n    \"\"\" \u80cc\u5305\u7c7b\u578b \"\"\"\n    pass\n</code></pre>"},{"location":"01_%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/ADT_OOP/#bag-adt","title":"\u5b9e\u73b0\u4e00\u4e2a Bag ADT","text":"<p>\u89c6\u9891\u4e2d\u6211\u4eec\u5c06\u4f7f\u7528 python \u7684 class \u6765\u5b9e\u73b0\u4e00\u4e2a\u65b0\u7684\u5bb9\u5668\u7c7b\u578b\u53eb\u505a Bag\u3002</p>"},{"location":"01_%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/ADT_OOP/#adt_1","title":"\u5b9e\u73b0 ADT \u6211\u4eec\u5e94\u8be5\u6ce8\u610f\u4ec0\u4e48\uff1f","text":"<ul> <li>\u5982\u4f55\u9009\u7528\u6070\u5f53\u7684\u6570\u636e\u7ed3\u6784\u4f5c\u4e3a\u5b58\u50a8\uff1f</li> <li>\u9009\u53d6\u7684\u6570\u636e\u7ed3\u6784\u80fd\u5426\u6ee1\u8db3 ADT \u7684\u529f\u80fd\u9700\u6c42</li> <li>\u5b9e\u73b0\u6548\u7387\u5982\u4f55\uff1f</li> </ul>"},{"location":"01_%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/ADT_OOP/#_1","title":"\u5c0f\u95ee\u9898\uff1a","text":"<ul> <li>\u4f60\u4e86\u89e3 python \u7684\u9b54\u672f\u65b9\u6cd5\u5417\uff1f \u6bd4\u5982 <code>__len__</code> \uff0c\u8c03\u7528 len(l) \u7684\u65f6\u5019\u53d1\u751f\u4e86\u4ec0\u4e48\uff1f</li> <li>\u4f60\u4e86\u89e3\u5355\u6d4b\u5417\uff1f\u6211\u4eec\u4ee5\u540e\u5c06\u4f7f\u7528 pytest \u8fd0\u884c\u5355\u5143\u6d4b\u8bd5\uff0c\u4fdd\u8bc1\u6211\u4eec\u5b9e\u73b0\u7684\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u662f\u6b63\u786e\u7684\u3002\u4f60\u53ef\u4ee5\u7f51\u4e0a\u641c\u7d22\u4e0b\u5b83\u7684\u7b80\u5355\u7528\u6cd5</li> </ul>"},{"location":"01_%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/ADT_OOP/#_2","title":"\u5ef6\u4f38\u9605\u8bfb\uff1a","text":"<p>\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5--ADT</p> <p>http://www.nhu.edu.tw/~chun/CS-ch12-Abstract%20Data%20Types.pdf</p>"},{"location":"02_%E6%95%B0%E7%BB%84%E5%92%8C%E5%88%97%E8%A1%A8/array_and_list/","title":"\u7ebf\u6027\u7ed3\u6784","text":"<p>\u672c\u8282\u6211\u4eec\u4ece\u6700\u7b80\u5355\u548c\u5e38\u7528\u7684\u7ebf\u6027\u7ed3\u6784\u5f00\u59cb\uff0c\u5e76\u7ed3\u5408 Python \u8bed\u8a00\u672c\u8eab\u5185\u7f6e\u7684\u6570\u636e\u7ed3\u6784\u548c\u5176\u5e95\u5c42\u5b9e\u73b0\u65b9\u5f0f\u6765\u8bb2\u89e3\u3002 \u867d\u7136\u672c\u8d28\u4e0a\u6570\u636e\u7ed3\u6784\u7684\u601d\u60f3\u662f\u8bed\u8a00\u65e0\u5173\u7684\uff0c\u4f46\u662f\u4e86\u89e3 Python \u7684\u5b9e\u73b0\u65b9\u5f0f\u6709\u52a9\u4e8e\u4f60\u907f\u514d\u4e00\u4e9b\u5751\u3002</p> <p>\u6211\u4eec\u4f1a\u5728\u4ee3\u7801\u4e2d\u6ce8\u91ca\u51fa\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002</p>"},{"location":"02_%E6%95%B0%E7%BB%84%E5%92%8C%E5%88%97%E8%A1%A8/array_and_list/#array","title":"\u6570\u7ec4 array","text":"<p>\u6570\u7ec4\u662f\u6700\u5e38\u7528\u5230\u7684\u4e00\u79cd\u7ebf\u6027\u7ed3\u6784\uff0c\u5176\u5b9e python \u5185\u7f6e\u4e86\u4e00\u4e2a array \u6a21\u5757\uff0c\u4f46\u662f\u5927\u90e8\u4eba\u751a\u81f3\u4ece\u6765\u6ca1\u7528\u8fc7\u5b83\u3002 Python \u7684 array \u662f\u5185\u5b58\u8fde\u7eed\u3001\u5b58\u50a8\u7684\u90fd\u662f\u540c\u4e00\u6570\u636e\u7c7b\u578b\u7684\u7ed3\u6784\uff0c\u800c\u4e14\u53ea\u80fd\u5b58\u6570\u503c\u548c\u5b57\u7b26\u3002</p> <p>\u6211\u5efa\u8bae\u4f60\u8bfe\u4e0b\u770b\u4e0b array \u7684\u6587\u6863\uff1ahttps://docs.python.org/2/library/array.html</p> <p>\u4f60\u53ef\u80fd\u5f88\u5c11\u4f1a\u4f7f\u7528\u5230\u5b83(\u6211\u63a8\u8350\u4f60\u7528 numpy.array)\uff0c\u6211\u5c06\u5728\u89c6\u9891\u91cc\u7b80\u5355\u4ecb\u7ecd\u4e0b\u5b83\u7684\u4f7f\u7528\u548c\u5de5\u4f5c\u65b9\u5f0f\uff0c\u6700\u5e38\u7528\u7684\u8fd8\u662f\u63a5\u4e0b\u6765\u8981\u8bf4\u7684 list\uff0c \u672c\u7ae0\u6700\u540e\u6211\u4eec\u4f1a\u7528 list \u6765\u5b9e\u73b0\u4e00\u4e2a\u56fa\u5b9a\u957f\u5ea6\u3001\u5e76\u4e14\u652f\u6301\u6240\u6709 Python \u6570\u636e\u7c7b\u578b\u7684\u6570\u7ec4 Array.</p>"},{"location":"02_%E6%95%B0%E7%BB%84%E5%92%8C%E5%88%97%E8%A1%A8/array_and_list/#list","title":"\u5217\u8868 list","text":"<p>\u5982\u679c\u4f60\u5b66\u8fc7 C++\uff0clist \u5176\u5b9e\u548c C++ STL\uff08\u6807\u51c6\u6a21\u677f\u5e93\uff09\u4e2d\u7684 vector \u5f88\u7c7b\u4f3c\uff0c\u5b83\u53ef\u80fd\u662f\u4f60\u7684 Python \u5b66\u4e60\u4e2d\u4f7f\u7528\u6700\u9891\u7e41\u7684\u6570\u636e\u7ed3\u6784\u4e4b\u4e00\u3002 \u8fd9\u91cc\u6211\u4eec\u4e0d\u518d\u53bb\u81ea\u5df1\u5b9e\u73b0 list\uff0c\u56e0\u4e3a\u8fd9\u662f\u4e2a Python \u63d0\u4f9b\u7684\u975e\u5e38\u57fa\u7840\u7684\u6570\u636e\u7c7b\u578b\uff0c\u6211\u4f1a\u5728\u89c6\u9891\u4e2d\u8bb2\u89e3\u5b83\u7684\u5de5\u4f5c\u65b9\u5f0f\u548c\u5185\u5b58\u5206\u914d\u7b56\u7565\uff0c \u907f\u514d\u4f7f\u7528\u8fc7\u7a0b\u4e2d\u78b0\u5230\u4e00\u4e9b\u5751\u3002\u5f53\u7136\u5982\u679c\u4f60\u6709\u6bc5\u529b\u6216\u8005\u5174\u8da3\u7684\u4e86\u89e3\u5e95\u5c42\u662f\u5982\u4f55\u5b9e\u73b0\u7684\uff0c\u53ef\u4ee5\u770b\u770b cpython \u89e3\u91ca\u5668\u7684\u5177\u4f53\u5b9e\u73b0\u3002</p> \u64cd\u4f5c \u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6 list[index] O(1) list.append O(1) list.insert O(n) list.pop(index), default last element O(1) list.remove O(n) <p></p>"},{"location":"02_%E6%95%B0%E7%BB%84%E5%92%8C%E5%88%97%E8%A1%A8/array_and_list/#list-array-adt","title":"\u7528 list \u5b9e\u73b0 Array ADT","text":"<p>\u8bb2\u5b8c\u4e86 list \u8ba9\u6211\u4eec\u6765\u5b9e\u73b0\u4e00\u4e2a\u5b9a\u957f\u7684\u6570\u7ec4 Array ADT\uff0c\u5728\u5176\u4ed6\u4e00\u4e9b\u8bed\u8a00\u4e2d\uff0c\u5185\u7f6e\u7684\u6570\u7ec4\u7ed3\u6784\u5c31\u662f\u5b9a\u957f\u7684\u3002 \u8fd9\u91cc\u6211\u4eec\u4f1a\u4f7f\u7528 list \u4f5c\u4e3a Array \u7684\u4e00\u4e2a\u6210\u5458\uff08\u4ee3\u7406\uff09\u3002\u5177\u4f53\u8bf7\u53c2\u8003\u89c6\u9891\u8bb2\u89e3\u548c\u4ee3\u7801\u793a\u4f8b\uff0c\u540e\u8fb9\u6211\u4eec\u4f1a\u4f7f\u7528\u5230\u8fd9\u4e2a Array \u7c7b\u3002</p>"},{"location":"02_%E6%95%B0%E7%BB%84%E5%92%8C%E5%88%97%E8%A1%A8/array_and_list/#_2","title":"\u5c0f\u95ee\u9898","text":"<ul> <li>\u4f60\u77e5\u9053\u7ebf\u6027\u7ed3\u6784\u7684\u67e5\u627e\uff0c\u5220\u9664\uff0c\u8bbf\u95ee\u4e00\u4e2a\u5143\u7d20\u7684\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u5417\uff1f(\u540e\u8fb9\u6211\u4eec\u4f1a\u4ecb\u7ecd\u8fd9\u4e2a\u6982\u5ff5\uff0c\u73b0\u5728\u4f60\u53ef\u4ee5\u7b80\u5355\u5730\u7406\u89e3\u4e3a\u4e00\u4e2a\u64cd\u4f5c\u9700\u8981\u7684\u5e73\u5747\u6b65\u9aa4)</li> <li>list \u5185\u5b58\u91cd\u65b0\u5206\u914d\u7684\u65f6\u5019\u4e3a\u4ec0\u4e48\u8981\u6709\u5197\u4f59\uff1f\u4e0d\u4f1a\u6d6a\u8d39\u7a7a\u95f4\u5417\uff1f</li> <li>\u5f53\u4f60\u9891\u7e41\u7684pop list \u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u65f6\u5019\uff0c\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f\u5982\u679c\u9700\u8981\u9891\u7e41\u5728\u4e24\u5934\u589e\u6dfb\u5143\u7d20\uff0c\u4f60\u77e5\u9053\u66f4\u9ad8\u6548\u7684\u6570\u636e\u7ed3\u6784\u5417\uff1f\u540e\u8fb9\u6211\u4eec\u4f1a\u8bb2\u5230</li> </ul>"},{"location":"02_%E6%95%B0%E7%BB%84%E5%92%8C%E5%88%97%E8%A1%A8/array_and_list/#_3","title":"\u5ef6\u4f38\u9605\u8bfb","text":"<p>Python list implementation</p> <p>https://github.com/python/cpython/blob/master/Objects/listobject.c</p>"},{"location":"02_%E6%95%B0%E7%BB%84%E5%92%8C%E5%88%97%E8%A1%A8/array_and_list/#_4","title":"\u52d8\u8bef","text":"<p>\u89c6\u9891\u91cc\u7684 Array.clear \u65b9\u6cd5\u6709\u8bef\u3002\u5e94\u8be5\u662f <code>for i in range(len(self._items))</code>\uff0c\u5df2\u7ecf\u5728\u540e\u7eed\u6240\u6709\u4f7f\u7528\u5230 Array \u7684\u4ee3\u7801\u91cc\u4fee\u6b63</p>"},{"location":"03_%E9%93%BE%E8%A1%A8/linked_list/","title":"\u94fe\u5f0f\u7ed3\u6784","text":"<p>\u4e0a\u4e00\u8282\u8bb2\u5230\u4e86\u652f\u6301\u968f\u673a\u8bbf\u95ee\u7684\u7ebf\u6027\u7ed3\u6784\uff0c\u8fd9\u6b21\u6211\u4eec\u5f00\u59cb\u8bb2\u94fe\u5f0f\u7ed3\u6784, \u89c6\u9891\u91cc\u6211\u4f1a\u8bf4\u4e0b\u8fd9\u4e24\u79cd\u7ed3\u6784\u7684\u533a\u522b\uff0c\u7136\u540e\u8bb2\u89e3\u6700\u5e38\u89c1\u7684\u5355\u94fe\u8868\u548c\u53cc\u94fe\u8868\u3002 \u4e4b\u524d\u5728\u4e13\u680f\u6587\u7ae0\u90a3\u4e9b\u5e74\uff0c\u6211\u4eec\u4e00\u8d77\u8dea\u8fc7\u7684\u7b97\u6cd5\u9898[\u89c6\u9891]\u91cc\u5b9e\u73b0\u8fc7\u4e00\u4e2a lru_cache\uff0c \u4f7f\u7528\u5230\u7684\u5c31\u662f\u5faa\u73af\u53cc\u7aef\u94fe\u8868\uff0c\u5982\u679c\u611f\u89c9\u8fd9\u7bc7\u6587\u7ae0\u6709\u70b9\u96be\u7406\u89e3\uff0c\u6211\u4eec\u8fd9\u91cc\u5c06\u4f1a\u5faa\u5e8f\u6e10\u8fdb\u5730\u6765\u5b9e\u73b0\u3002 \u540e\u8fb9\u8bb2\u5230\u54c8\u5e0c\u8868\u7684\u51b2\u7a81\u89e3\u51b3\u65b9\u5f0f\u7684\u65f6\u5019\uff0c\u6211\u4eec\u4f1a\u518d\u6b21\u63d0\u5230\u94fe\u8868\u3002</p> <p>\u4e0a\u4e00\u8282\u6211\u4eec\u5206\u6790\u4e86 list \u7684\u5404\u79cd\u64cd\u4f5c\u662f\u5982\u4f55\u5b9e\u73b0\u7684\uff0c\u5982\u679c\u4f60\u8fd8\u6709\u5370\u8c61\u7684\u8bdd\uff0clist \u5728\u5934\u90e8\u8fdb\u884c\u63d2\u5165\u662f\u4e2a\u76f8\u5f53\u8017\u65f6\u7684\u64cd\u4f5c\uff08\u9700\u8981\u628a\u540e\u8fb9\u7684\u5143\u7d20\u4e00\u4e2a\u4e00\u4e2a\u632a\u4e2a\u4f4d\u7f6e\uff09\u3002\u5047\u5982\u4f60\u9700\u8981\u9891\u7e41\u5728\u6570\u7ec4\u4e24\u5934\u589e\u5220\uff0clist \u5c31\u4e0d\u592a\u5408\u9002\u3002 \u4eca\u5929\u6211\u4eec\u4ecb\u7ecd\u7684\u94fe\u5f0f\u7ed3\u6784\u5c06\u6446\u8131\u8fd9\u4e2a\u7f3a\u9677\uff0c\u5f53\u7136\u4e86\u94fe\u5f0f\u7ed3\u6784\u672c\u8eab\u4e5f\u6709\u7f3a\u9677\uff0c\u6bd4\u5982\u4f60\u4e0d\u80fd\u50cf\u6570\u7ec4\u4e00\u6837\u968f\u673a\u6839\u636e\u4e0b\u6807\u8bbf\u95ee\uff0c\u4f60\u60f3\u67e5\u627e\u4e00\u4e2a\u5143\u7d20\u53ea\u80fd\u8001\u8001\u5b9e\u5b9e\u4ece\u5934\u904d\u5386\u3002 \u6240\u4ee5\u561b\uff0c\u5b66\u4e60\u548c\u4e86\u89e3\u6570\u636e\u7ed3\u6784\u7684\u539f\u7406\u548c\u5b9e\u73b0\u4f60\u624d\u80fd\u51c6\u786e\u5730\u9009\u62e9\u5230\u5e95\u4ec0\u4e48\u65f6\u5019\u8be5\u7528\u4ec0\u4e48\u6570\u636e\u7ed3\u6784\uff0c\u800c\u4e0d\u662f\u778e\u9009\u5bfc\u81f4\u4ee3\u7801\u6027\u80fd\u5f88\u5dee\u3002</p>"},{"location":"03_%E9%93%BE%E8%A1%A8/linked_list/#_2","title":"\u5355\u94fe\u8868","text":"<p>\u548c\u7ebf\u6027\u7ed3\u6784\u4e0d\u540c\uff0c\u94fe\u5f0f\u7ed3\u6784\u5185\u5b58\u4e0d\u8fde\u7eed\u7684\uff0c\u800c\u662f\u4e00\u4e2a\u4e2a\u4e32\u8d77\u6765\u7684\uff0c\u8fd9\u4e2a\u65f6\u5019\u5c31\u9700\u8981\u6bcf\u4e2a\u94fe\u63a5\u8868\u7684\u8282\u70b9\u4fdd\u5b58\u4e00\u4e2a\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u9488\u3002 \u8fd9\u91cc\u53ef\u4e0d\u8981\u6df7\u6dc6\u4e86\u5217\u8868\u548c\u94fe\u8868\uff08\u5b83\u4eec\u7684\u4e2d\u6587\u53d1\u97f3\u7c7b\u4f3c\uff0c\u4f46\u662f\u5217\u8868 list \u5e95\u5c42\u5176\u5b9e\u8fd8\u662f\u7ebf\u6027\u7ed3\u6784\uff0c\u94fe\u8868\u624d\u662f\u771f\u7684\u901a\u8fc7\u6307\u9488\u5173\u8054\u7684\u94fe\u5f0f\u7ed3\u6784\uff09\u3002 \u770b\u5230\u6307\u9488\u4f60\u4e5f\u4e0d\u7528\u6015\uff0c\u8fd9\u91cc\u6211\u4eec\u7528\u7684 python\uff0c\u4f60\u53ea\u9700\u8981\u4e00\u4e2a\u7b80\u5355\u8d4b\u503c\u64cd\u4f5c\u5c31\u80fd\u5b9e\u73b0\uff0c\u4e0d\u7528\u62c5\u5fc3 c \u8bed\u8a00\u91cc\u590d\u6742\u7684\u6307\u9488\u3002</p> <p>\u5148\u6765\u5b9a\u4e49\u4e00\u4e2a\u94fe\u63a5\u8868\u7684\u8282\u70b9\uff0c\u521a\u624d\u8bf4\u5230\u6709\u4e00\u4e2a\u6307\u9488\u4fdd\u5b58\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u4f4d\u7f6e\uff0c\u6211\u4eec\u53eb\u5b83 next\uff0c \u5f53\u7136\u8fd8\u9700\u8981\u4e00\u4e2a value \u5c5e\u6027\u4fdd\u5b58\u503c</p> <p><pre><code>class Node(object):\n    def __init__(self, value, next=None):\n        self.value = value\n        self.next = next\n</code></pre> \u7136\u540e\u5c31\u662f\u6211\u4eec\u7684\u5355\u94fe\u8868 LinkedList ADT:</p> <p><pre><code>class LinkedList(object):\n    \"\"\" \u94fe\u63a5\u8868 ADT\n    [root] -&gt; [node0] -&gt; [node1] -&gt; [node2]\n    \"\"\"\n</code></pre> \u5b9e\u73b0\u6211\u4eec\u4f1a\u5728\u89c6\u9891\u4e2d\u7528\u753b\u56fe\u6765\u6a21\u62df\u5e76\u4e14\u624b\u52a8\u4ee3\u7801\u5b9e\u73b0\uff0c\u4ee3\u7801\u91cc\u6211\u4eec\u4f1a\u6807\u8bc6\u6bcf\u4e2a\u6b65\u9aa4\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u8fd9\u91cc\u8bf7\u9ad8\u5ea6\u96c6\u4e2d\u7cbe\u529b\uff0c \u867d\u7136\u94fe\u8868\u7684\u601d\u60f3\u5f88\u7b80\u5355\uff0c\u4f46\u662f\u60f3\u8981\u6b63\u786e\u5199\u5bf9\u94fe\u8868\u7684\u64cd\u4f5c\u4ee3\u7801\u53ef\u4e0d\u5bb9\u6613\uff0c\u7a0d\u4e0d\u7559\u795e\u5c31\u53ef\u80fd\u4e22\u5931\u4e00\u4e9b\u6b65\u9aa4\u3002 \u8fd9\u91cc\u6211\u4eec\u8fd8\u662f\u4f1a\u7528\u7b80\u5355\u7684\u5355\u6d4b\u6765\u9a8c\u8bc1\u4ee3\u7801\u662f\u5426\u6309\u7167\u9884\u671f\u5de5\u4f5c\u3002</p> <p>\u6765\u770b\u4e0b\u65f6\u95f4\u590d\u6742\u5ea6\uff1a</p> \u94fe\u8868\u64cd\u4f5c \u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6 linked_list.append(value) O(1) linked_list.appendleft(value) O(1) linked_list.find(value) O(n) linked_list.remove(value) O(n)"},{"location":"03_%E9%93%BE%E8%A1%A8/linked_list/#_3","title":"\u53cc\u94fe\u8868","text":"<p>\u4e0a\u8fb9\u6211\u4eec\u4eb2\u81ea\u5b9e\u73b0\u4e86\u4e00\u4e2a\u5355\u94fe\u8868\uff0c\u4f46\u662f\u80fd\u770b\u5230\u5f88\u660e\u663e\u7684\u95ee\u9898\uff0c\u5355\u94fe\u8868\u867d\u7136 append \u662f O(1)\uff0c\u4f46\u662f\u5b83\u7684 find \u548c remove \u90fd\u662f O(n)\u7684\uff0c \u56e0\u4e3a\u5220\u9664\u4f60\u4e5f\u9700\u8981\u5148\u67e5\u627e\uff0c\u800c\u5355\u94fe\u8868\u67e5\u627e\u53ea\u6709\u4e00\u4e2a\u65b9\u5f0f\u5c31\u662f\u4ece\u5934\u627e\u5230\u5c3e\uff0c\u4e2d\u95f4\u627e\u5230\u624d\u9000\u51fa\u3002 \u8fd9\u91cc\u6211\u4e4b\u524d\u63d0\u5230\u8fc7\u5982\u679c\u8981\u5b9e\u73b0\u4e00\u4e2a lru \u7f13\u5b58\uff08\u8bbf\u95ee\u65f6\u95f4\u6700\u4e45\u7684\u8e22\u51fa\uff09\uff0c\u6211\u4eec\u9700\u8981\u5728\u4e00\u4e2a\u94fe\u8868\u91cc\u80fd\u9ad8\u6548\u7684\u5220\u9664\u5143\u7d20\uff0c \u5e76\u628a\u5b83\u8ffd\u52a0\u5230\u8bbf\u95ee\u8868\u7684\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u8fd9\u4e2a\u65f6\u5019\u5355\u94fe\u8868\u5c31\u6ee1\u8db3\u4e0d\u4e86\u4e86\uff0c \u56e0\u4e3a\u7f13\u5b58\u5728 dict \u91cc\u67e5\u627e\u7684\u65f6\u95f4\u662f O(1)\uff0c\u4f60\u66f4\u65b0\u8bbf\u95ee\u987a\u5e8f\u5c31 O(n)\u4e86\uff0c\u7f13\u5b58\u5c31\u6ca1\u4e86\u4f18\u52bf\u3002</p> <p>\u8fd9\u91cc\u5c31\u8981\u4f7f\u7528\u5230\u53cc\u94fe\u8868\u4e86\uff0c\u76f8\u6bd4\u5355\u94fe\u8868\u6765\u8bf4\uff0c\u6bcf\u4e2a\u8282\u70b9\u65e2\u4fdd\u5b58\u4e86\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u9488\uff0c\u540c\u65f6\u8fd8\u4fdd\u5b58\u4e86\u4e0a\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u9488\u3002</p> <pre><code>class Node(object):\n    # \u5982\u679c\u8282\u70b9\u5f88\u591a\uff0c\u6211\u4eec\u53ef\u4ee5\u7528 __slots__ \u6765\u8282\u7701\u5185\u5b58\uff0c\u628a\u5c5e\u6027\u4fdd\u5b58\u5728\u4e00\u4e2a tuple \u800c\u4e0d\u662f dict \u91cc\n    # \u611f\u5174\u8da3\u53ef\u4ee5\u81ea\u884c\u641c\u7d22  python  __slots__\n    __slots__ = ('value', 'prev', 'next')\n\n    def __init__(self, value=None, prev=None, next=None):\n        self.value, self.prev, self.next = value, prev, next\n</code></pre> <p>\u5bf9\uff0c \u5c31\u591a\u4e86 prev\uff0c\u6709\u5565\u4f18\u52bf\u561b\uff1f</p> <ul> <li>\u770b\u4f3c\u6211\u4eec\u53cd\u8fc7\u6765\u904d\u5386\u53cc\u94fe\u8868\u4e86\u3002\u53cd\u8fc7\u6765\u4ece\u54ea\u91cc\u5f00\u59cb\u5462\uff1f\u6211\u4eec\u53ea\u8981\u8ba9 root \u7684 prev \u6307\u5411 tail \u8282\u70b9\uff0c\u4e0d\u5c31\u4e32\u8d77\u6765\u4e86\u5417\uff1f</li> <li>\u76f4\u63a5\u5220\u9664\u8282\u70b9\uff0c\u5f53\u7136\u5982\u679c\u7ed9\u7684\u662f\u4e00\u4e2a\u503c\uff0c\u6211\u4eec\u8fd8\u662f\u9700\u8981\u67e5\u627e\u8fd9\u4e2a\u503c\u5728\u54ea\u4e2a\u8282\u70b9\uff1f - \u4f46\u662f\u5982\u679c\u7ed9\u4e86\u4e00\u4e2a\u8282\u70b9\uff0c\u6211\u4eec\u628a\u5b83\u62ff\u6389\uff0c\u76f4\u63a5\u8ba9\u5b83\u7684\u524d\u540e\u8282\u70b9\u4e92\u76f8\u6307\u8fc7\u53bb\u4e0d\u5c31\u884c\u4e86\uff1f\u54c7\u6b27\uff0c\u5220\u9664\u5c31\u662f O(1) \u4e86\uff0c\u4e24\u6b65\u64cd\u4f5c\u5c31\u884c\u5566</li> </ul> <p>\u597d\uff0c\u5e9f\u8bdd\u4e0d\u591a\u8bf4\uff0c\u6211\u4eec\u5728\u89c6\u9891\u91cc\u4ecb\u7ecd\u600e\u4e48\u5b9e\u73b0\u4e00\u4e2a\u53cc\u94fe\u8868 ADT\u3002\u4f60\u53ef\u4ee5\u76f4\u63a5\u5728\u672c\u9879\u76ee\u7684 <code>docs/03_\u94fe\u8868/double_link_list.py</code> \u627e\u5230\u4ee3\u7801\u3002 \u6700\u540e\u8ba9\u6211\u4eec\u770b\u4e0b\u5b83\u7684\u65f6\u95f4\u590d\u6742\u5ea6:(\u8fd9\u91cc CircularDoubleLinkedList \u53d6\u5927\u5199\u5b57\u6bcd\u7f29\u5199\u4e3a cdll)</p> \u5faa\u73af\u53cc\u7aef\u94fe\u8868\u64cd\u4f5c \u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6 cdll.append(value) O(1) cdll.appendleft(value) O(1) cdll.remove(node)\uff0c\u6ce8\u610f\u8fd9\u91cc\u53c2\u6570\u662f node O(1) cdll.headnode() O(1) cdll.tailnode() O(1)"},{"location":"03_%E9%93%BE%E8%A1%A8/linked_list/#_4","title":"\u5c0f\u95ee\u9898\uff1a","text":"<ul> <li>\u8fd9\u91cc\u5355\u94fe\u8868\u6211\u6ca1\u6709\u5b9e\u73b0 insert \u65b9\u6cd5\uff0c\u4f60\u80fd\u81ea\u5df1\u5c1d\u8bd5\u5b9e\u73b0\u5417\uff1f  insert(value, new_value)\uff0c\u6211\u60f3\u5728\u67d0\u4e2a\u503c\u4e4b\u524d\u63d2\u5165\u4e00\u4e2a\u503c\u3002\u4f60\u540c\u6837\u9700\u8981\u5148\u67e5\u627e\uff0c\u6240\u4ee5\u8fd9\u4e2a\u6b65\u9aa4\u4e5f\u4e0d\u591f\u9ad8\u6548\u3002</li> <li>\u4f60\u80fd\u5c1d\u8bd5\u81ea\u5df1\u5b9e\u73b0\u4e2a lru cache \u5417\uff1f\u9700\u8981\u4f7f\u7528\u5230\u6211\u4eec\u8fd9\u91cc\u63d0\u5230\u7684\u5faa\u73af\u53cc\u7aef\u94fe\u8868</li> <li>\u501f\u52a9\u5185\u7f6e\u7684 collections.OrderedDict\uff0c\u5b83\u6709\u4e24\u4e2a\u65b9\u6cd5 popitem \u548c move_to_end\uff0c\u6211\u4eec\u53ef\u4ee5\u8fc5\u901f\u5b9e\u73b0\u4e00\u4e2a LRU cache\u3002\u8bf7\u4f60\u5c1d\u8bd5\u7528 OrderedDict \u6765\u5b9e\u73b0\u3002</li> <li>python \u5185\u7f6e\u5e93\u7684\u54ea\u4e9b\u6570\u636e\u7ed3\u6784\u4f7f\u7528\u5230\u4e86\u672c\u7ae0\u8bb2\u7684\u94fe\u5f0f\u7ed3\u6784\uff1f</li> </ul>"},{"location":"03_%E9%93%BE%E8%A1%A8/linked_list/#_5","title":"\u76f8\u5173\u9605\u8bfb","text":"<p>\u90a3\u4e9b\u5e74\uff0c\u6211\u4eec\u4e00\u8d77\u8dea\u8fc7\u7684\u7b97\u6cd5\u9898- Lru cache[\u89c6\u9891]</p>"},{"location":"03_%E9%93%BE%E8%A1%A8/linked_list/#_6","title":"\u52d8\u8bef\uff1a","text":"<p>\u89c6\u9891\u4e2d LinkedList.remove \u65b9\u6cd5\u8bb2\u89e3\u6709\u9057\u6f0f\uff0c linked_list.py \u6587\u4ef6\u5df2\u7ecf\u4fee\u6b63\uff0c\u8bf7\u8bfb\u8005\u6ce8\u610f\u3002\u5177\u4f53\u8bf7\u53c2\u8003 fix linked_list &amp; add gitigonre\u3002\u89c6\u9891\u6700\u540e\u589e\u52a0\u4e86\u4e00\u6bb5\u52d8\u8bef\u8bf4\u660e\u3002</p>"},{"location":"03_%E9%93%BE%E8%A1%A8/linked_list/#leetcode","title":"Leetcode","text":"<p>\u53cd\u8f6c\u94fe\u8868 reverse-linked-list</p> <p>\u8fd9\u91cc\u6709\u4e00\u9053\u5173\u4e8e LRU \u7684\u7ec3\u4e60\u9898\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u4e0b\u3002 LRU Cache</p> <p>\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868 merge-two-sorted-lists</p>"},{"location":"04_%E9%98%9F%E5%88%97/queue/","title":"\u961f\u5217\u548c\u6808","text":"<p>\u524d\u9762\u8bb2\u4e86\u7ebf\u6027\u548c\u94fe\u5f0f\u7ed3\u6784\uff0c\u5982\u679c\u4f60\u987a\u5229\u638c\u63e1\u4e86\uff0c\u4e0b\u8fb9\u7684\u961f\u5217\u548c\u6808\u5c31\u5c0f\u83dc\u4e00\u789f\u4e86\u3002\u56e0\u4e3a\u6211\u4eec\u4f1a\u7528\u524d\u4e24\u7ae0\u8bb2\u5230\u7684\u4e1c\u897f\u6765\u5b9e\u73b0\u961f\u5217\u548c\u6808\u3002 \u4e4b\u6240\u4ee5\u653e\u5230\u4e00\u8d77\u8bb2\u662f\u56e0\u4e3a\u8fd9\u4e24\u4e2a\u4e1c\u897f\u5f88\u7c7b\u4f3c\uff0c\u961f\u5217\u662f\u5148\u8fdb\u5148\u51fa\u7ed3\u6784(FIFO, first in first out)\uff0c \u6808\u662f\u540e\u8fdb\u5148\u51fa\u7ed3\u6784(LIFO, last in first out)\u3002</p> <p>\u751f\u6d3b\u4e2d\u7684\u6570\u636e\u7ed3\u6784\uff1a</p> <ul> <li>\u961f\u5217\u3002\u6ca1\u9519\u5c31\u662f\u54b1\u5e73\u5e38\u6392\u961f\uff0c\u7b2c\u4e00\u4e2a\u6765\u7684\u7b2c\u4e00\u4e2a\u8d70</li> </ul> <p>\u672c\u7ae0\u6211\u4eec\u8be6\u7ec6\u8bb2\u8bb2\u5e38\u7528\u7684\u961f\u5217</p>"},{"location":"04_%E9%98%9F%E5%88%97/queue/#queue","title":"\u961f\u5217 Queue","text":"<p>\u8fd9\u91cc\u5356\u4e2a\u5173\u5b50\uff0c\u5982\u679c\u4f60\u719f\u6089\u4e86\u4e0a\u4e24\u8282\u8bb2\u7684\u5185\u5bb9\uff0c\u8fd9\u91cc\u4f60\u4f1a\u9009\u53d6\u54ea\u4e2a\u6570\u636e\u7ed3\u6784\u4f5c\u4e3a\u961f\u5217\u7684\u5e95\u5c42\u5b58\u50a8\uff1f \u8fd8\u8bb0\u5f97\u7b2c\u4e00\u7ae0\u8bb2\u7684\u5982\u4f55\u5b9e\u73b0 ADT \u5417\uff1f\u6211\u89c6\u9891\u4e86\u8bf4\u4e86\u4e09\u4e2a\u6ce8\u610f\u4e8b\u9879\uff1a</p> <ul> <li>1.\u5982\u4f55\u9009\u7528\u6070\u5f53\u7684\u6570\u636e\u7ed3\u6784\u4f5c\u4e3a\u5b58\u50a8\uff1f</li> <li>2.\u9009\u53d6\u7684\u6570\u636e\u7ed3\u6784\u80fd\u5426\u6ee1\u8db3 ADT \u7684\u529f\u80fd\u9700\u6c42</li> <li>3.\u5b9e\u73b0\u6548\u7387\u5982\u4f55\uff1f</li> </ul> <p>\u6211\u4eec\u5148\u6765\u770b\u770b list \u53ef\u4ee5\u4e0d\uff1f\u5bf9\u7167\u8fd9\u4e2a\u4e09\u4e2a\u9700\u6c42\uff0c\u770b\u770b\u80fd\u5426\u6ee1\u8db3\uff1a</p> <ul> <li>1.\u6211\u4eec\u9009\u62e9\u4e86 list</li> <li>2.\u770b\u8d77\u6765\u961f\u5217\u9700\u8981\u4ece\u5934\u5220\u9664\uff0c\u5411\u5c3e\u90e8\u589e\u52a0\u5143\u7d20\uff0c\u4e5f\u5c31\u662f list.pop(0) \u548c list.append(element)</li> <li>3.\u55ef\uff0c\u8c8c\u4f3c list.pop(0) \u4f1a\u5bfc\u81f4\u6240\u6709\u5176\u540e\u6240\u6709\u5143\u7d20\u5411\u524d\u79fb\u52a8\u4e00\u4e2a\u4f4d\u7f6e\uff0cO(n)\u590d\u6742\u5ea6\u3002append \u5e73\u5747\u5012\u662fO(1)\uff0c\u4f46\u662f\u5982\u679c\u5185\u5b58\u4e0d\u591f\u8fd8\u8981\u91cd\u65b0\u5206\u914d\u5185\u5b58\u3002</li> </ul> <p>\u4f60\u770b\uff0c\u4f7f\u7528\u4e86 list \u7684\u8bdd\u9891\u7e41 pop(0) \u662f\u975e\u5e38\u4f4e\u6548\u7684\u3002(\u5f53\u7136list \u5b9e\u73b0\u8fd8\u6709\u53e6\u4e00\u79cd\u65b9\u5f0f\u5c31\u662f\u63d2\u5165\u7528 list.insert(0, item)\uff0c\u5220\u9664\u7528list.pop())</p> <p>\u8111\u5b50\u518d\u8f6c\u8f6c\uff0c \u6211\u4eec\u7b2c\u4e8c\u7ae0\u5b9e\u73b0\u4e86 \u94fe\u8868 LinkedList\uff0c\u770b\u770b\u80fd\u5426\u6ee1\u8db3\u8981\u6c42\uff1a</p> <ul> <li>1.\u8fd9\u91cc\u9009\u62e9 LinkedList</li> <li>2.\u5220\u9664\u5934\u5143\u7d20 LinkedList.popleft()\uff0c\u8ffd\u52a0 append(element)\u3002\u90fd\u53ef\u4ee5\u6ee1\u8db3</li> <li>3.\u54c7\u6b27\uff0c\u8fd9\u4e24\u4e2a\u64cd\u4f5c\u90fd\u662f O(1) \u7684\uff0c\u5b8c\u7f8e\u3002</li> </ul> <p>\u597d\uff0c \u5c31\u7528 LinkedList \u4e86\uff0c\u6211\u4eec\u5f00\u59cb\u5b9e\u73b0\uff0c\u5177\u4f53\u770b\u89c6\u9891\u3002\u8fd9\u6b21\u5b9e\u73b0\u6211\u4eec\u8fd8\u5c06\u6f14\u793a\u81ea\u5b9a\u4e49\u5f02\u5e38\u548c\u6d4b\u8bd5\u5f02\u5e38\u3002</p>"},{"location":"04_%E9%98%9F%E5%88%97/queue/#_2","title":"\u7528\u6570\u7ec4\u5b9e\u73b0\u961f\u5217","text":"<p>\u96be\u9053\u7528\u6570\u7ec4\u5c31\u4e0d\u80fd\u5b9e\u73b0\u961f\u5217\u4e86\u5417\uff1f\u5176\u5b9e\u8fd8\u662f\u53ef\u4ee5\u7684\u3002\u53ea\u4e0d\u8fc7\u6570\u7ec4\u662f\u9884\u5148\u5206\u914d\u56fa\u5b9a\u5185\u5b58\u7684\uff0c\u6240\u4ee5\u5982\u679c\u4f60\u77e5\u9053\u4e86\u961f\u5217\u7684\u6700\u5927\u957f\u5ea6\uff0c\u4e5f\u662f \u53ef\u4ee5\u7528\u6570\u7ec4\u6765\u5b9e\u73b0\u7684\u3002</p> <p>\u60f3\u8c61\u4e00\u4e0b\uff0c\u961f\u5217\u5c31\u4fe9\u64cd\u4f5c\uff0c\u8fdb\u8fdb\u51fa\u51fa\uff0c\u4e00\u8fdb\u4e00\u51fa\uff0cpop \u548c push \u64cd\u4f5c\u3002 \u4f3c\u4e4e\u53ea\u8981\u4e24\u4e2a\u4e0b\u6807 head, tail \u5c31\u53ef\u4ee5\u4e86\u3002 \u5f53\u6211\u4eec push \u7684\u65f6\u5019\u8d4b\u503c\u5e76\u4e14\u524d\u79fb head\uff0cpop \u7684\u65f6\u5019\u524d\u79fb tail \u5c31\u53ef\u4ee5\u4e86\u3002\u4f60\u53ef\u4ee5\u5728\u7eb8\u4e0a \u6a21\u62df\u4e0b\u8bd5\u8bd5\u3002\u5217\u961f\u7684\u957f\u5ea6\u5c31\u662f head-pop\uff0c\u8fd9\u4e2a\u957f\u5ea6\u5fc5\u987b\u4e0d\u80fd\u5927\u4e8e\u521d\u59cb\u5316\u7684\u6700\u5927\u7a0b\u5ea6\u3002</p> <p>\u5982\u679c head \u5148\u5230\u4e86\u6570\u7ec4\u672b\u5c3e\u548b\u529e\uff1f\u91cd\u5934\u6765\u5457\uff0c\u53ea\u8981\u6211\u4eec\u4fdd\u8bc1 tail \u4e0d\u4f1a\u8d85\u8fc7 head \u5c31\u884c\u3002</p> <p>head = 0,1,2,3,4 ... 0,1,2,3,4 ...</p> <p>\u91cd\u5934\u518d\u6765\uff0c\u5faa\u73af\u5f80\u590d\uff0c\u4eff\u4f5b\u4e00\u4e2a\u8f6e\u56de\u3002\u3002\u3002\u3002 \u600e\u4e48\u91cd\u5934\u6765\u5462\uff1f\u770b\u4e0a\u8fb9\u6570\u7ec4\u7684\u89c4\u5f8b\u4f60\u5982\u679c\u8fd8\u60f3\u4e0d\u8d77\u6765\u7528\u53d6\u6a21\uff0c\u4f30\u8ba1\u5c0f\u5b66\u6570\u5b66\u662f\u4f53\u80b2\u8001\u5e08\u6559\u7684\u3002</p> <pre><code>maxsize = 5\nfor i in range(100):\n    print(i % maxsize)\n</code></pre> <p></p> <p>\u6211\u4eec\u6765\u5b9e\u73b0\u4e00\u4e2a\u7a7a\u95f4\u6709\u9650\u7684\u5faa\u73af\u961f\u5217\u3002ArrayQueue\uff0c\u5b83\u7684\u5b9e\u73b0\u5f88\u7b80\u5355\uff0c\u4f46\u662f\u7f3a\u70b9\u662f\u9700\u8981\u9884\u5148\u77e5\u9053\u961f\u5217\u7684\u957f\u5ea6\u6765\u5206\u914d\u5185\u5b58\u3002</p>"},{"location":"04_%E9%98%9F%E5%88%97/queue/#double-ended-queue","title":"\u53cc\u7aef\u961f\u5217 Double ended Queue","text":"<p>\u770b\u4e86\u89c6\u9891\u76f8\u4fe1\u4f60\u5df2\u7ecf\u4f1a\u5b9e\u73b0\u961f\u5217\u4e86\uff0c\u4f60\u53ef\u80fd\u8fd8\u542c\u8fc7\u53cc\u7aef\u961f\u5217\u3002\u4e0a\u8fb9\u8bb2\u5230\u7684\u961f\u5217 \u961f\u5934\u51fa\uff0c\u5c3e\u5c3e\u8fdb\uff0c\u6211\u4eec\u5982\u679c\u60f3\u5934\u90e8\u548c\u5c3e\u5df4\u90fd\u80fd\u8fdb\u80fd\u51fa\u5462\uff1f \u8fd9\u5c31\u662f\u53cc\u7aef\u961f\u5217\u4e86\uff0c\u5982\u679c\u4f60\u7528\u8fc7 collections.deque \u6a21\u5757\uff0c\u5c31\u662f\u8fd9\u4e2a\u4e1c\u897f\u3002\u4ed6\u80fd\u9ad8\u6548\u5728\u4e24\u5934\u64cd\u4f5c\u3002</p> <p>\u5047\u5982\u8ba9\u4f60\u5b9e\u73b0\u4f60\u80fd\u60f3\u8d77\u6765\u561b\uff1f \u4f3c\u4e4e\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u80fd append()  appendleft() popleft() pop() \u90fd\u662f O(1) \u7684\u6570\u636e\u7ed3\u6784\u3002</p> <p>\u4e0a\u8fb9\u6211\u4eec\u5b9e\u73b0 \u961f\u5217\u7684 LinkedList \u53ef\u4ee5\u5417\uff1f\u8c8c\u4f3c\u5c31\u5dee\u4e00\u4e2a pop() \u6700\u540e\u8fb9\u7684\u5143\u7d20\u65e0\u6cd5\u5b9e\u73b0\u4e86\u3002 \u5bf9\uff0c\u6211\u4eec\u8fd8\u6709\u53cc\u7aef\u94fe\u8868\u3002\u5b83\u6709\u8fd9\u51e0\u4e2a\u65b9\u6cd5\uff1a</p> <ul> <li>append</li> <li>appendleft</li> <li>headnode()</li> <li>tailnode()</li> <li>remove(node)    # O(1)</li> </ul> <p>\u554a\u54c8\uff0c\u4f3c\u4e4e\u5220\u9664\u5934\u5c3e\u90fd\u53ef\u4ee5\u5566\uff0c\u800c\u4e14\u90fd\u662f O(1) \u7684\uff0c\u5b8c\u7f8e\u3002 \u4ea4\u7ed9\u4f60\u4e00\u4e2a\u8270\u5de8\u7684\u4efb\u52a1\uff0c\u5b9e\u73b0\u53cc\u7aef\u961f\u5217 Deque\uff08\uff09 ADT\u3002\u4f60\u53ef\u4ee5\u53c2\u8003\u524d\u51e0\u7ae0\u7684\u4efb\u4f55\u4ee3\u7801\uff0c\u6311\u6218\u4e00\u4e0b\u8fd9\u4e2a\u4efb\u52a1\uff0c\u522b\u5fd8\u8bb0\u5199\u5355\u5143\u6d4b\u8bd5\u5466\u3002\u5f53\u7136\u5982\u679c\u6ca1\u60f3\u51fa\u6765\u4e5f\u6ca1\u5173\u7cfb\uff0c\u540e\u8fb9\u6211\u4eec\u5b9e\u73b0\u6808\u7684\u65f6\u5019\u8fd8\u4f1a\u7528\u5230\u5b83\uff0c\u90a3\u91cc\u6211\u4eec\u4f1a\u5b9e\u73b0\u8fd9\u4e2a\u4ee3\u7801\u3002</p>"},{"location":"04_%E9%98%9F%E5%88%97/queue/#_3","title":"\u601d\u8003\u9898","text":"<ul> <li>\u4f60\u80fd\u7528 python \u7684 deque \u6765\u5b9e\u73b0 queue ADT \u5417\uff1f</li> <li>\u54ea\u4e9b\u7ecf\u5178\u7b97\u6cd5\u91cc\u7528\u5230\u4e86\u961f\u5217\u5462\uff1f</li> </ul>"},{"location":"05_%E6%A0%88/stack/","title":"\u6808","text":"<p>\u6808\u8fd9\u4e2a\u8bcd\u5b9e\u9645\u4e0a\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u91cc\u4f7f\u7528\u5f88\u591a\uff0c\u9664\u4e86\u6570\u636e\u7ed3\u6784\u5916\uff0c\u8fd8\u6709\u5185\u5b58\u91cc\u7684\u6808\u533a \uff08\u548c\u5806\u5bf9\u5e94\uff09\uff0c\u719f\u6089 C \u7cfb\u8bed\u8a00\u7684\u8bdd\u5e94\u8be5\u4e0d\u4f1a\u964c\u751f\u3002 \u4e0a\u4e00\u7ae0\u6211\u4eec\u8bb2\u5230\u4e86\u5148\u8fdb\u5148\u51fa queue\uff0c\u5176\u5b9e\u7528 python \u7684\u5185\u7f6e\u7c7b\u578b collections.deque \u6216\u8005\u6211\u4eec\u81ea\u5df1\u5b9e\u73b0\u7684 LinkedList \u6765\u5b9e\u73b0\u5b83\u90fd\u5f88\u7b80\u5355\u3002 \u672c\u7ae0\u6211\u4eec\u8bb2\u8bb2 \u540e\u8fdb\u5148\u51fa\u7684\u6808\u3002</p> <p>\u751f\u6d3b\u4e2d\u7684\u6570\u636e\u7ed3\u6784\uff1a</p> <ul> <li>\u6808\u3002\u597d\u6bd4\u5728\u6876\u91cc\u5934\u653e\u76d8\u5b50\uff0c\u5148\u653e\u7684\u76d8\u5b50\u653e\u5728\u4e86\u5e95\u4e0b\uff0c\u540e\u6765\u7684\u76d8\u5b50\u653e\u5728\u4e0a\u8fb9\u3002\u4f60\u8981\u62ff\u7684\u65f6\u5019\uff0c\u4e5f\u662f\u5148\u62ff\u6700\u4e0a\u8fb9\u7684\u3002</li> </ul> <p>\u6808\u5176\u5b9e\u4e5f\u5f88\u7b80\u5355\uff0c\u56e0\u4e3a\u57fa\u7840\u64cd\u4f5c\u5c31\u4fe9\uff0c\u4e00\u4e2a push \u548c\u4e00\u4e2a pop\uff0c\u54a6\uff0c\u548b\u548c\u961f\u5217\u4e00\u6837\u7684\uff1f \u786e\u5b9e\u65b9\u6cd5\u540d\u5b57\u4e00\u6837\uff0c\u4f46\u662f\u5f97\u5230\u7684\u7ed3\u679c\u53ef\u662f\u4e0d\u540c\u7684\u3002</p>"},{"location":"05_%E6%A0%88/stack/#adt","title":"\u6808 ADT","text":"<p>\u4e0a\u4e00\u7ae0\u6211\u4ecb\u7ecd\u4e86\u6211\u4eec\u600e\u6837\u9009\u53d6\u6070\u5230\u7684\u6570\u636e\u7ed3\u6784\u6765\u5b9e\u73b0\u65b0\u7684 ADT\uff1f\u4f60\u80fd\u60f3\u5230\u8fd9\u91cc\u6211\u4eec\u5e94\u8be5\u4f7f\u7528\u4e4b\u524d\u63d0\u5230\u7684\u54ea\u4e2a\u6570\u636e\u7ed3\u6784\u6765\u5b9e\u73b0\u5417\uff1f \u4f60\u7684\u5927\u8111\u53ef\u80fd\u5f00\u59cb\u9ad8(gui)\u901f(su)\u65cb\u8f6c\u4e86\uff0c\u4e0a\u51e0\u7ae0\u5b66\u8fc7\u7684 array, list, deque, LinkedList, CircularDoubleLinkedList, queue \u7b49\u5728\u5927\u8111\u91cc\u547c\u5578\u800c\u8fc7\uff0c\u8fd9\u4e2a\u65f6\u5019\u53ef\u80fd\u5df2\u7ecf\u4e00\u8138\u6101\u5bb9\u4e86\uff0c\u5230\u5e95\u8be5\u9009\u5565\uff1f</p> <p>\u8fd8\u7528\u95ee\u561b\uff0c\u5f53\u7136\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u6700\u5c0f\u7684\u5566\uff0c\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u7a7a\u95f4\u90fd\u662f\u591f\u7528\u7684\u3002 \u5176\u5b9e\u4f60\u4f1a\u53d1\u73b0\u6808\u6bd4\u961f\u5217\u8fd8\u7b80\u5355\uff0c\u56e0\u4e3a\u5b83\u53ea\u5728\u9876\u4e0a\u64cd\u4f5c\uff08\u60f3\u8c61\u88c5\u7740\u76d8\u5b50\u7684\u6876\uff09\uff0c\u5982\u679c\u6709\u4e00\u79cd\u6570\u636e\u7ed3\u6784\u80fd\u65b9\u4fbf\u5728\u5c3e\u90e8\u589e\u51cf\u5143\u7d20\u4e0d\u5c31\u6ee1\u8db3\u9700\u6c42\u4e86\u5417\u3002 \u8fd9\u4e2a\u65f6\u5019\u5982\u679c\u4f60\u5fd8\u8bb0\u4e86\uff0c\u53ef\u4ee5\u7ffb\u7ffb\u524d\u51e0\u7ae0\uff0c\u770b\u770b\u54ea\u4e2a\u6570\u636e\u7ed3\u6784\u7b26\u5408\u8981\u6c42\u3002</p> <p>\u60f3\u4e00\u4e0b\uff0c\u4f3c\u4e4e CircularDoubleLinkedList \u5faa\u73af\u53cc\u7aef\u961f\u5217\u662f\u6ee1\u8db3\u7684\uff0c\u56e0\u4e3a\u589e\u5220\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u90fd\u662f O(1)\u3002 \u4e0d\u8fc7\u770b\u4e86\u4e0b\u793a\u4f8b\u4ee3\u7801\uff0c\u4f3c\u4e4e\u6ca1\u6709 pop() \u65b9\u6cd5\uff0c\u5bf9\uff0c\u56e0\u4e3a\u6211\u5df2\u7ecf\u628a\u5b9e\u73b0 deque \u4f5c\u4e3a\u601d\u8003\u9898\u4e86\u3002\ud83d\ude02 \u5982\u679c\u4e4b\u524d\u4f60\u6ca1\u5199\u51fa\u6765\u4e5f\u6ca1\u5173\u7cfb\uff0c\u8fd9\u91cc\u6211\u4eec\u4f1a\u518d\u5b9e\u73b0\u5b83\u3002</p> <p>\u89c6\u9891\u91cc\u6211\u4eec\u5c06\u501f\u52a9 CircularDoubleLinkedList \u5b9e\u73b0 \u53cc\u7aef\u961f\u5217 Deque \uff0c\u5e76\u4e14\u7528 Deque \u5b9e\u73b0 Stack\u3002</p>"},{"location":"05_%E6%A0%88/stack/#stack-over-flow","title":"Stack over flow \u4ec0\u4e48\u9b3c\uff1f","text":"<p>\u55ef\uff0cstackoverflow \u4e0d\u662f\u4e00\u4e2a\u7a0b\u5e8f\u5458\u95ee\u7b54\u7f51\u7ad9\u5417\uff1f\u6ca1\u9519\u3002 \u51fd\u6570\u7684\u4e34\u65f6\u53d8\u91cf\u662f\u5b58\u50a8\u5728\u6808\u533a\u7684\uff0c\u5982\u679c\u4f60\u4e0d\u5e78\u5199\u4e86\u4e00\u4e2a\u6ca1\u6709\u51fa\u53e3\u7684\u9012\u5f52\u51fd\u6570\uff0c\u5c31\u4f1a\u8fd9\u4e2a\u9519\u3002\u4e0d\u4fe1\u4f60\u8bd5\u8bd5\uff1a</p> <pre><code>def infinite_fib(n):\n    return infinite_fib(n-1) + infinite_fib(n-2)\ninfinite_fib(10)\n</code></pre> <p>\u4e00\u5927\u6bb5\u8f93\u51fa\u4e4b\u540e\u5c31\u4f1a\u51fa\u73b0\u5f02\u5e38\uff1a RecursionError: maximum recursion depth exceeded\u3002 \u540e\u8fb9\u4f1a\u8bb2\u5230\u9012\u5f52\uff0c\u9012\u5f52\u662f\u521d\u5b66\u8005\u6bd4\u8f83\u96be\u7406\u89e3\u7684\u6982\u5ff5\uff0c\u5728\u6811\u7684\u904d\u5386\u7b49\u5730\u65b9\u8fd8\u4f1a\u770b\u5230\u5b83\u3002</p>"},{"location":"05_%E6%A0%88/stack/#_2","title":"\u6570\u636e\u7ed3\u6784\u5934\u8111\u98ce\u66b4\u6cd5","text":"<p>\u5f53\u6211\u4eec\u4e0d\u77e5\u9053\u4f7f\u7528\u4ec0\u4e48\u6570\u636e\u7ed3\u6784\u6765\u89e3\u51b3\u95ee\u9898\u7684\u65f6\u5019\uff0c\u300a\u7a0b\u5e8f\u5458\u9762\u8bd5\u91d1\u5178\u300b\u8fd9\u672c\u4e66\u7684\u7b2c\u516d\u7ae0\u63d0\u5230\u4e86\u4e00\u79cd\u65b9\u5f0f\u53eb\u505a\u300e\u6570\u636e\u7ed3\u6784\u5934\u8111\u98ce\u66b4\u6cd5\u300f\u3002 \u8fd9\u79cd\u7b28\u65b9\u6cd5\u5c31\u662f\u5feb\u901f\u8fc7\u4e00\u904d\u6570\u636e\u7ed3\u6784\u7684\u5217\u8868\uff0c\u7136\u540e\u9010\u4e00\u5c1d\u8bd5\u5404\u79cd\u6570\u636e\u7ed3\u6784\u770b\u770b\u54ea\u4e2a\u6700\u9002\u5408\u3002</p> <p>\u5728\u4f60\u5b9e\u73b0\u4e00\u4e2a\u66f4\u9ad8\u7ea7\u7684\u6570\u636e\u7ed3\u6784\u7684\u65f6\u5019\uff0c\u5982\u679c\u8111\u5b50\u6ca1\u6709\u601d\u8def\uff0c\u4e0d\u59a8\u5c1d\u8bd5\u4e0b\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u8fc5\u901f\u8fc7\u4e00\u904d\u4f60\u6240\u77e5\u9053\u7684\u6570\u636e\u7ed3\u6784\uff0c\u770b\u770b\u54ea\u79cd\u6700\u9002\u5408\u3002(\u4ece\u6bcf\u4e2a\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u5206\u6790\u5bfb\u627e\u6700\u4f18\u89e3)</p>"},{"location":"05_%E6%A0%88/stack/#_3","title":"\u601d\u8003\u9898","text":"<ul> <li>\u4e0a\u4e00\u7ae0\u6211\u4eec\u7528\u6570\u7ec4\u5b9e\u73b0\u4e86\u961f\u5217\uff0c\u5176\u5b9e\u4e5f\u80fd\u7528\u6570\u7ec4\u6765\u5b9e\u73b0\u6808\uff0c\u4f60\u80fd\u81ea\u5df1\u7528\u6570\u7ec4\u6765\u5b9e\u73b0\u4e00\u4e2a\u6808\u7684 ADT \u5417\uff1f</li> <li>\u5b9e\u9645\u4e0a\u501f\u52a9 python \u5185\u7f6e\u7684 list/collections.deque \u7ed3\u6784\u5c31\u5f88\u5bb9\u6613\u5b9e\u73b0\u4e00\u4e2a\u6808\uff0c\u8bf7\u4f60\u5c1d\u8bd5\u5b9e\u73b0\uff0c\u672c\u7ae0\u6211\u4eec\u5168\u90e8\u4f7f\u7528\u81ea\u5df1\u7f16\u5199\u7684\u6570\u636e\u7ed3\u6784\u800c\u6ca1\u7528\u5230 python \u5185\u7f6e\u7684\u6570\u636e\u7ed3\u6784\u3002</li> <li>\u8fd9\u91cc\u6211\u4eec\u81ea\u5df1\u5b9e\u73b0\u4e86 Deque\uff0c\u4f60\u80fd\u7528 python \u5185\u7f6e\u7684 collections.deque \u5b9e\u73b0\u6808\u5417\uff1f\u6709\u8f6e\u5b50\u80fd\u76f4\u63a5\u7528\u7684\u8bdd\u770b\u8d77\u6765\u5c31\u7b80\u5355\u591a\u4e86\uff0c\u8fd9\u91cc\u6211\u4eec\u4e3a\u4e86\u5b66\u4e60\u6570\u636e\u7ed3\u6784\u7684\u5b9e\u73b0\u5c31\u907f\u514d\u4e86\u76f4\u63a5\u4f7f\u7528\u5185\u7f6e\u7ed3\u6784</li> <li>\u54ea\u4e9b\u7ecf\u5178\u7b97\u6cd5\u91cc\u4f7f\u7528\u5230\u4e86\u6808\u5462\uff1f</li> </ul>"},{"location":"05_%E6%A0%88/stack/#leetcode","title":"Leetcode \u7ec3\u4e60","text":"<p>https://leetcode.com/problems/implement-queue-using-stacks/</p>"},{"location":"06_%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/big_o/","title":"\u7b97\u6cd5\u590d\u6742\u5ea6\u5206\u6790","text":"<p>\u524d\u9762\u6211\u4eec\u8bf4\u4e86\u5f88\u591a\u6b21\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(1), O(n) \u5565\u7684\uff0c\u5e76\u6ca1\u6709\u4ed4\u7ec6\u8bb2\u89e3\u8fd9\u4e2a O \u7b26\u53f7\u7a76\u7adf\u662f\u4ec0\u4e48\u3002 \u4f60\u53ef\u4ee5\u5927\u6982\u7406\u89e3\u4e3a\u64cd\u4f5c\u7684\u6b21\u6570\u548c\u6570\u636e\u4e2a\u6570\u7684\u6bd4\u4f8b\u5173\u7cfb\u3002\u6bd4\u5982 O(1) \u5c31\u662f\u6709\u9650\u6b21\u6570\u64cd\u4f5c\uff0cO(n) \u5c31\u662f\u64cd\u4f5c\u6b63\u6bd4\u4e8e\u4f60\u7684\u5143\u7d20\u4e2a\u6570\u3002 \u8fd9\u4e00\u7ae0\u6211\u4eec\u7528\u66f4\u4e25\u8c28\u7684\u65b9\u5f0f\u6765\u5b9a\u4e49\u5b83\u3002</p>"},{"location":"06_%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/big_o/#o","title":"\u5927 O \u8868\u793a\u6cd5","text":"<p>\u6211\u4eec\u4ece\u4e00\u4e2a\u8ba1\u7b97\u77e9\u9635\u7684\u4f8b\u5b50\u6765\u5f15\u5165\uff0c\u8fd9\u91cc\u6211\u53c2\u8003\u4e86 \u300aData Structures and Algorithms in Python\u300b \u4e2d\u7ed9\u7684\u4e00\u4e2a\u4f8b\u5b50:</p> <p>\u8003\u8651\u8ba1\u7b97\u4e00\u4e2a n * n \u77e9\u9635\u6240\u6709\u5143\u7d20\u7684\u548c\uff08\u5982\u679c\u4f60\u4e0d\u77e5\u9053\u77e9\u9635\uff0c\u5c31\u7406\u89e3\u4e3a\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\uff09\uff1a</p> <p> </p> <p>\u8fd9\u91cc\u5217\u4e3e\u4e24\u79cd\u65b9\u5f0f:</p> <pre><code># version1\ntotal_sum = 0\nfor i in range(n):\n    row_sum[i] = 0\n    for j in range(n):\n        row_sum[i] = row_sum[i] + matrix[i, j]\n        total_sum = total_sum + matrix[i, j]\n\n# version2\ntotal_sum = 0\nfor i in range(n):\n    row_sum[i] = 0\n    for j in range(n):\n        row_sum[i] = row_sum[i] + matrix[i, j]\n    total_sum = total_sum + row_sum[i]    # \u6ce8\u610f\u8fd9\u91cc\u548c\u4e0a\u8fb9\u7684\u4e0d\u540c\n</code></pre> <p>v1 \u7248\u672c\u7684\u5173\u952e\u64cd\u4f5c\u5728 j \u5faa\u73af\u91cc\uff0c\u4e24\u6b65\u52a0\u6cd5\u64cd\u4f5c\uff0c\u7531\u4e8e\u5d4c\u5957\u5728\u7b2c\u4e00\u4e2a\u5faa\u73af\u91cc\uff0c\u64cd\u4f5c\u6b65\u9aa4\u662f \u3002</p> <p>v2 \u7248\u672c\u7684 total_sum \u53ea\u6709 n \u6b21\u64cd\u4f5c\uff0c\u5b83\u7684\u64cd\u4f5c\u6b21\u6570\u662f \u3002</p> <p>\u8fd9\u91cc\u4f60\u53ef\u80fd\u8fd8\u611f\u89c9\u4e0d\u5230\u5b83\u4eec\u6709\u591a\u5927\u5dee\u522b\uff0c\u56e0\u4e3a\u8ba1\u7b97\u673a\u6267\u884c\u7684\u592a\u5feb\u4e86\uff0c\u4f46\u662f\u5f53 n \u589e\u957f\u7279\u522b\u5feb\u7684\u65f6\u5019\uff0c\u603b\u7684\u64cd\u4f5c\u6b21\u6570\u5dee\u8ddd\u5c31\u5f88\u660e\u663e\u4e86\uff1a</p> n 10 200 110 100 20,000 10,100 1000 2,000,000 1,001,000 10000 200,000,000 100,010,000 100000 20,000,000,000 10,000,100,000 <p>\u901a\u5e38\u6211\u4eec\u4e0d\u592a\u5173\u6ce8\u6bcf\u4e2a\u7b97\u6cd5\u5177\u4f53\u6267\u884c\u4e86\u591a\u5c11\u6b21\uff0c\u800c\u66f4\u5173\u5fc3\u968f\u7740\u8f93\u5165\u89c4\u6a21 n \u7684\u589e\u52a0\uff0c\u7b97\u6cd5\u8fd0\u884c\u65f6\u95f4\u5c06\u4ee5\u4ec0\u4e48\u901f\u5ea6\u589e\u52a0\u3002\u4e3a\u6b64\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7b26\u53f7\uff0c \u7528\u6765\u8868\u793a\u5728\u6700\u7cdf\u7cd5\u7684\u60c5\u51b5\u4e0b\u7b97\u6cd5\u7684\u8fd0\u884c\u65f6\u95f4\uff0c\u5927 O \u7b26\u53f7\uff0c\u5728\u6570\u5b66\u4e0a\u79f0\u4e4b\u4e3a\u6e10\u8fdb\u4e0a\u754c\uff08\u300a\u7b97\u6cd5\u5bfc\u8bba\u300b\uff09\u3002</p>"},{"location":"06_%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/big_o/#_2","title":"\u5982\u4f55\u8ba1\u7b97\u65f6\u95f4\u590d\u6742\u5ea6","text":"<p>\u4e0a\u8fb9\u6211\u4eec\u5217\u4e3e\u4e86\u4e24\u4e2a\u7248\u672c\u7684\u8ba1\u7b97\u77e9\u9635\u548c\u7684\u4ee3\u7801\uff0c\u4f60\u770b\u5230\u4e86\u4e24\u4e2a\u516c\u5f0f:</p> <ul> <li>v1:  </li> <li>v2:  </li> </ul> <p>\u5f53 n \u975e\u5e38\u5927\u7684\u65f6\u5019\uff0c \u7684\u6570\u503c\u8fd9\u91cc\u5c06\u5360\u4e3b\u5bfc\uff0c\u6211\u4eec\u53ef\u4ee5\u5ffd\u7565 n \u7684\u5f71\u54cd</p> <ul> <li>v1:  </li> <li>v2:  </li> </ul> <p>\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\u4e24\u4e2a\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5747\u4e3a  </p>"},{"location":"06_%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/big_o/#_3","title":"\u5e38\u7528\u65f6\u95f4\u590d\u6742\u5ea6","text":"<p>\u8fd9\u91cc\u6211\u4eec\u5217\u4e3e\u4e00\u4e9b\u5e38\u7528\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u6309\u7167\u589e\u957f\u901f\u5ea6\u6392\u5e8f\uff0c\u65e5\u5e38\u6211\u4eec\u7684\u4e1a\u52a1\u4ee3\u7801\u4e2d\u6700\u5e38\u7528\u7684\u662f\u6307\u6570\u4e4b\u524d\u7684\u590d\u6742\u5ea6\uff0c\u6307\u6570\u548c\u9636\u4e58\u7684\u589e\u957f\u901f\u5ea6\u975e\u5e38\u5feb\uff0c \u5f53\u8f93\u5165\u6bd4\u8f83\u5927\u7684\u65f6\u5019\u7528\u5728\u4e1a\u52a1\u4ee3\u7801\u91cc\u662f\u4e0d\u53ef\u63a5\u53d7\u7684\u3002</p> O \u540d\u79f0 \u4e3e\u4f8b 1 \u5e38\u91cf\u65f6\u95f4 \u4e00\u6b21\u8d4b\u503c \u5bf9\u6570\u65f6\u95f4 \u6298\u534a\u67e5\u627e \u7ebf\u6027\u65f6\u95f4 \u7ebf\u6027\u67e5\u627e n \u5bf9\u6570\u7ebf\u6027\u65f6\u95f4 \u5feb\u901f\u6392\u5e8f \u5e73\u65b9 \u4e24\u91cd\u5faa\u73af \u7acb\u65b9 \u4e09\u91cd\u5faa\u73af \u6307\u6570 \u9012\u5f52\u6c42\u6590\u6ce2\u90a3\u5951\u6570\u5217 \u9636\u4e58 \u65c5\u884c\u5546\u95ee\u9898"},{"location":"06_%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/big_o/#_4","title":"\u7a7a\u95f4\u590d\u6742\u5ea6","text":"<p>\u76f8\u6bd4\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u8ba8\u8bba\u6bd4\u8f83\u5c11\u3002\u56e0\u4e3a\u7528\u6237\u8001\u7237\u7b49\u4e0d\u53ca\uff0c\u51b5\u4e14\u73b0\u5728\u5b58\u50a8\u8d8a\u6765\u8d8a\u767d\u83dc\u4ef7\u4e86\uff0c\u66f4\u591a\u65f6\u5019\u6211\u4eec\u4e3a\u4e86\u63d0\u5347\u54cd\u5e94\u901f\u5ea6\u5b81\u53ef\u591a \u4f7f\u7528\u70b9\u7a7a\u95f4\u3002 \u7a7a\u95f4\u590d\u6742\u5ea6\u76f8\u5bf9\u597d\u7b97\u4e00\u4e9b\uff0c\u5c31\u662f\u6bcf\u4e2a\u5143\u7d20\u7684\u7a7a\u95f4\u5360\u7528\u4e58\u4ee5\u603b\u7684\u5143\u7d20\u6570\uff0c\u6709\u4e9b\u7b97\u6cd5\u9700\u8981\u989d\u5916\u7684\u7a7a\u95f4\u5b58\u50a8\uff0c\u6709\u4e9b\u53ef\u4ee5\u672c\u5730\u89e3\u51b3\u3002 \u5982\u679c\u80fd\u672c\u5730\u641e\u5b9a\u7684\u6211\u4eec\u6210\u4e3a in place \u7684\uff0c\u539f\u5730\u64cd\u4f5c\uff0c\u6bd4\u5982\u4ea4\u6362\u4e00\u4e2a \u6570\u7ec4\u4e2d\u7684\u67d0\u4e24\u4e2a\u4f4d\u7f6e\u7684\u5143\u7d20\u3002\u4f46\u662f\u6709\u4e9b\u64cd\u4f5c\u53ef\u80fd\u5c31\u9700\u8981\u7533\u8bf7\u989d\u5916\u7684\u7a7a\u95f4 \u6765\u5b8c\u6210\u7b97\u6cd5\u4e86\uff0c\u540e\u8fb9\u6211\u4eec\u4ecb\u7ecd\u6392\u5e8f\u7b97\u6cd5\u7684\u65f6\u5019\u4f1a\u8bb2\u5230\u3002</p>"},{"location":"06_%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/big_o/#_5","title":"\u5e38\u89c1\u590d\u6742\u5ea6\u589e\u957f\u8d8b\u52bf\u56fe","text":"<p>\u4e3a\u4e86\u8ba9\u4f60\u6709\u4e2a\u76f4\u89c2\u7684\u611f\u89c9\uff0c\u6211\u4eec\u6765\u770b\u770b\u4e00\u4e9b\u7ecf\u5178\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u5bf9\u5e94\u7684\u589e\u957f\u8d8b\u52bf\u56fe\uff0c\u4e0d\u540c\u51fd\u6570\u5728\u8f93\u5165\u89c4\u6a21\u589e\u957f\u7684\u65f6\u5019\u5f88\u5feb\u5c31\u4f1a\u6709\u5de8\u5927\u7684\u589e\u957f\u5dee\u5f02</p> <p></p>"},{"location":"06_%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/big_o/#_6","title":"\u65f6\u95f4\u6362\u7a7a\u95f4\uff0c\u7a7a\u95f4\u6362\u65f6\u95f4","text":"<p>\u6709\u4e00\u4e9b\u65f6\u5019\u65f6\u95f4\u548c\u7a7a\u95f4\u4e24\u8005\u4e0d\u53ef\u517c\u5f97\uff0c\u6211\u4eec\u4f1a\u727a\u7272\u5176\u4e2d\u4e4b\u4e00\u6765\u6362\u53d6\u53e6\u4e00\u4e2a\u3002</p> <p>\u7a7a\u95f4\u6362\u65f6\u95f4\uff1a\u6bd4\u5982\u5178\u578b\u7684\u5c31\u662f python \u4e2d\u7684\u96c6\u5408\uff08\u540e\u9762\u4f1a\u8bb2\u5230\u5b83\u7684\u5b9e\u73b0\u539f\u7406\uff09\uff0c\u867d\u7136\u5b83\u6bd4\u8f83\u6d6a\u8d39\u7a7a\u95f4\uff0c\u4f46\u662f\u5374\u80fd\u7528 O(1) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u6765\u5224\u91cd\u3002</p> <p>\u65f6\u95f4\u6362\u7a7a\u95f4\uff1a\u5f53\u6211\u4eec\u7a7a\u95f4\u4e0d\u591f\u7528\uff0c\u5178\u578b\u7684\u5c31\u662f\u7f13\u5b58\u5931\u6548\u7b97\u6cd5\uff0c\u6211\u4eec\u4e0d\u53ef\u80fd\u7f13\u5b58\u4e0b\u65e0\u9650\u5bb9\u91cf\u7684\u6570\u636e\uff0c\u5c31\u4f1a\u4f7f\u7528\u4e00\u4e9b\u7f13\u5b58\u6dd8\u6c70\u7b97\u6cd5\u6765\u4fdd\u8bc1\u7a7a\u95f4\u53ef\u7528\u3002</p>"},{"location":"06_%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/big_o/#_7","title":"\u601d\u8003\u9898","text":"<ul> <li>\u56de\u5934\u770b\u770b\u524d\u51e0\u7ae0\u6211\u4eec\u8bb2\u5230\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4ee5\u53ca\u6bcf\u4e2a\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u4f60\u80fd\u7406\u89e3\u4e86\u5417\uff1f</li> <li>\u4e8c\u5206\u67e5\u627e\u662f\u9488\u5bf9\u6709\u5e8f\u5143\u7d20\u7684\u4e00\u79cd\u7ecf\u5178\u7684\u67e5\u627e\u7b97\u6cd5\uff0c\u4f60\u77e5\u9053\u7684\u5b83\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5417\uff1f\u4f60\u80fd\u7b80\u5355\u8bc1\u660e\u4e0b\u5417\u3002</li> <li>\u6590\u6ce2\u90a3\u5951\u6570\u5217\u4f60\u80af\u5b9a\u5f88\u719f\u6089\uff0c\u5b83\u7684\u516c\u5f0f\u662f F(n) = F(n-1) + F(n-2)\uff0c\u4f60\u77e5\u9053\u8ba1\u7b97\u4e00\u4e2a\u6590\u6ce2\u90a3\u5951\u6570 F(n)   \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5417\uff1f\u4f60\u4f1a\u7528\u6570\u5b66\u516c\u5f0f\u8bc1\u660e\u5417\uff1f</li> <li>\u4f60\u80fd\u6307\u51fa\u65f6\u95f4\u548c\u7a7a\u95f4\u6743\u8861\u7684\u4f8b\u5b50\u5417\uff1f\u5f80\u5f80\u5f88\u591a\u9ad8\u6548\u7684\u6570\u636e\u7ed3\u6784\u80fd\u540c\u65f6\u517c\u987e\u65f6\u95f4\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\uff0c\u4f46\u662f\u6709\u65f6\u5019\u6211\u4eec\u5374\u5f97\u505a\u51fa\u4e00\u5b9a\u7684\u6743\u8861</li> </ul>"},{"location":"06_%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/big_o/#_8","title":"\u53c2\u8003\u8d44\u6599","text":"<p>\u5982\u679c\u4f60\u5bf9\u6570\u5b66\u611f\u5174\u8da3\uff0c\u5efa\u8bae\u4f60\u9605\u8bfb\u300a\u7b97\u6cd5\u5bfc\u8bba\u300b\u300e\u51fd\u6570\u7684\u589e\u957f\u300f\u8fd9\u4e00\u8282 \u548c\u300aData Structures and Algorithms in Python\u300b\u7b2c4\u7ae0\u3002</p> <p>(\u672c\u7ae0\u6211\u7528\u4e86 MathJax \u6765\u4e66\u5199\u4e00\u4e9b\u7b80\u5355\u7684\u6570\u5b66\u516c\u5f0f\uff0c\u4f7f\u7528 \"$\"\u5305\u542b\u8d77\u6765\u7684\u5c31\u662f\u6570\u5b66\u516c\u5f0f)</p>"},{"location":"07_%E5%93%88%E5%B8%8C%E8%A1%A8/hashtable/","title":"\u54c8\u5e0c\u8868","text":"<p>\u4e0d\u77e5\u9053\u4f60\u6709\u6ca1\u6709\u597d\u5947\u8fc7\u4e3a\u4ec0\u4e48 Python \u91cc\u7684 dict \u548c set \u67e5\u627e\u901f\u5ea6\u8fd9\u4e48\u5feb\u5462\uff0c\u7528\u4e86\u4ec0\u4e48\u9ed1\u9b54\u6cd5\u5417\uff1f \u7ecf\u5e38\u542c\u522b\u4eba\u8bf4\u54c8\u5e0c\u8868(\u4e5f\u53eb\u505a\u6563\u5217\u8868)\uff0c\u7a76\u7adf\u4ec0\u4e48\u662f\u54c8\u5e0c\u8868\u5462\uff1f\u8fd9\u4e00\u7ae0\u6211\u4eec\u6765\u4ecb\u7ecd\u54c8\u5e0c\u8868\uff0c\u540e\u7eed\u7ae0\u8282\u6211\u4eec\u4f1a\u770b\u5230 Python \u4e2d\u7684\u5b57\u5178\u548c\u96c6\u5408\u662f\u5982\u4f55\u5b9e\u73b0\u7684\u3002</p>"},{"location":"07_%E5%93%88%E5%B8%8C%E8%A1%A8/hashtable/#_2","title":"\u54c8\u5e0c\u8868\u7684\u5de5\u4f5c\u8fc7\u7a0b","text":"<p>\u524d\u9762\u6211\u4eec\u5df2\u7ecf\u8bb2\u5230\u4e86\u6570\u7ec4\u548c\u94fe\u8868\uff0c\u6570\u7ec4\u80fd\u901a\u8fc7\u4e0b\u6807 O(1) \u8bbf\u95ee\uff0c\u4f46\u662f\u5220\u9664\u4e00\u4e2a\u4e2d\u95f4\u5143\u7d20\u5374\u8981\u79fb\u52a8\u5176\u4ed6\u5143\u7d20\uff0c\u65f6\u95f4 O(n)\u3002 \u5faa\u73af\u53cc\u7aef\u94fe\u8868\u5012\u662f\u53ef\u4ee5\u5728\u77e5\u9053\u4e00\u4e2a\u8282\u70b9\u7684\u60c5\u51b5\u4e0b\u8fc5\u901f\u5220\u9664\u5b83\uff0c\u4f46\u662f\u5427\u67e5\u627e\u53c8\u6210\u4e86 O(n)\u3002</p> <p>\u96be\u9053\u5c31\u6ca1\u6709\u4e00\u79cd\u65b9\u6cd5\u53ef\u4ee5\u5feb\u901f\u5b9a\u4f4d\u548c\u5220\u9664\u5143\u7d20\u5417\uff1f\u4f3c\u4e4e\u60f3\u8981\u5feb\u901f\u627e\u5230\u4e00\u4e2a\u5143\u7d20\u9664\u4e86\u77e5\u9053\u4e0b\u6807\u4e4b\u5916\u522b\u65e0\u4ed6\u6cd5\uff0c\u4e8e\u662f\u4e4e\u806a\u660e\u7684\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6\u53c8\u60f3\u5230\u4e86\u4e00\u79cd\u65b9\u6cd5\u3002 \u80fd\u4e0d\u80fd\u7ed9\u6bcf\u4e2a\u5143\u7d20\u4e00\u79cd\u300e\u903b\u8f91\u4e0b\u6807\u300f\uff0c\u7136\u540e\u76f4\u63a5\u627e\u5230\u5b83\u5462\uff0c\u54c8\u5e0c\u8868\u5c31\u662f\u8fd9\u79cd\u5b9e\u73b0\u3002\u5b83\u901a\u8fc7\u4e00\u4e2a\u54c8\u5e0c\u51fd\u6570\u6765\u8ba1\u7b97\u4e00\u4e2a\u5143\u7d20\u5e94\u8be5\u653e\u5728\u6570\u7ec4\u54ea\u4e2a\u4f4d\u7f6e\uff0c\u5f53\u7136\u5bf9\u4e8e\u4e00\u4e2a \u7279\u5b9a\u7684\u5143\u7d20\uff0c\u54c8\u5e0c\u51fd\u6570\u6bcf\u6b21\u8ba1\u7b97\u7684\u4e0b\u6807\u5fc5\u987b\u8981\u4e00\u6837\u624d\u53ef\u4ee5\uff0c\u800c\u4e14\u8303\u56f4\u4e0d\u80fd\u8d85\u8fc7\u7ed9\u5b9a\u7684\u6570\u7ec4\u957f\u5ea6\u3002</p> <p>\u6211\u4eec\u8fd8\u662f\u4ee5\u4e66\u4e2d\u7684\u4f8b\u5b50\u8bf4\u660e\uff0c\u5047\u5982\u6211\u4eec\u6709\u4e00\u4e2a\u6570\u7ec4 T\uff0c\u5305\u542b M=13 \u4e2a\u5143\u7d20\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u7b80\u5355\u7684\u54c8\u5e0c\u51fd\u6570 h</p> <pre><code>h(key) = key % M\n</code></pre> <p>\u8fd9\u91cc\u53d6\u6a21\u8fd0\u7b97\u4f7f\u5f97 h(key) \u7684\u7ed3\u679c\u4e0d\u4f1a\u8d85\u8fc7\u6570\u7ec4\u7684\u957f\u5ea6\u4e0b\u6807\u3002\u6211\u4eec\u6765\u5206\u522b\u63d2\u5165\u4ee5\u4e0b\u5143\u7d20\uff1a</p> <p>765, 431, 96, 142, 579, 226, 903, 388</p> <p>\u5148\u6765\u8ba1\u7b97\u4e0b\u5b83\u4eec\u5e94\u7528\u54c8\u5e0c\u51fd\u6570\u540e\u7684\u7ed3\u679c:</p> <p><pre><code>M = 13\nh(765) = 765 % M = 11\nh(431) = 431 % M = 2\nh(96) = 96 % M = 5\nh(142) = 142 % M = 12\nh(579) = 579 % M = 7\nh(226) = 226 % M = 5\nh(903) = 903 % M = 6\nh(388) = 388 % M = 11\n</code></pre> \u4e0b\u8fb9\u6211\u753b\u4e2a\u56fe\u6f14\u793a\u6574\u4e2a\u63d2\u5165\u8fc7\u7a0b(\u7eaf\u624b\u5de5\u7ed8\u5236\uff0c\u539f\u8c05\u6211\u5b57\u5199\u5f97\u4e0d\u592a\u4f18\u96c5):</p> <p></p>"},{"location":"07_%E5%93%88%E5%B8%8C%E8%A1%A8/hashtable/#collision","title":"\u54c8\u5e0c\u51b2\u7a81 (collision)","text":"<p>\u8fd9\u91cc\u5230\u63d2\u5165 226 \u8fd9\u4e2a\u5143\u7d20\u7684\u65f6\u5019\uff0c\u4e0d\u5e78\u5730\u53d1\u73b0 h(226) = h(96) = 5\uff0c\u4e0d\u540c\u7684 key \u901a\u8fc7\u6211\u4eec\u7684\u54c8\u5e0c\u51fd\u6570\u8ba1\u7b97\u540e\u5f97\u5230\u7684\u4e0b\u6807\u4e00\u6837\uff0c \u8fd9\u79cd\u60c5\u51b5\u6210\u4e3a\u54c8\u5e0c\u51b2\u7a81\u3002\u600e\u4e48\u529e\u5462\uff1f\u806a\u660e\u7684\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6\u53c8\u60f3\u5230\u4e86\u529e\u6cd5\uff0c\u5176\u5b9e\u4e00\u79cd\u76f4\u89c2\u7684\u60f3\u6cd5\u662f\u5982\u679c\u51b2\u7a81\u4e86\u6211\u80fd\u4e0d\u80fd\u8ba9\u6570\u7ec4\u4e2d \u5bf9\u5e94\u7684\u69fd\u53d8\u6210\u4e00\u4e2a\u94fe\u5f0f\u7ed3\u6784\u5462\uff1f\u8fd9\u5c31\u662f\u5176\u4e2d\u4e00\u79cd\u89e3\u51b3\u65b9\u6cd5\uff0c\u53eb\u505a \u94fe\u63a5\u6cd5(chaining)\u3002\u5982\u679c\u6211\u4eec\u7528\u94fe\u63a5\u6cd5\u6765\u5904\u7406\u51b2\u7a81\uff0c\u540e\u8fb9\u7684\u63d2\u5165\u662f\u8fd9\u6837\u7684\uff1a</p> <p></p> <p>\u8fd9\u6837\u5c31\u7528\u94fe\u8868\u89e3\u51b3\u4e86\u51b2\u7a81\u95ee\u9898\uff0c\u4f46\u662f\u5982\u679c\u54c8\u5e0c\u51fd\u6570\u9009\u4e0d\u597d\u7684\u8bdd\uff0c\u53ef\u80fd\u5c31\u5bfc\u81f4\u51b2\u7a81\u592a\u591a\u4e00\u4e2a\u94fe\u53d8\u5f97\u592a\u957f\uff0c\u8fd9\u6837\u67e5\u627e\u5c31\u4e0d\u518d\u662f O(1) \u7684\u4e86\u3002 \u8fd8\u6709\u4e00\u79cd\u53eb\u505a\u5f00\u653e\u5bfb\u5740\u6cd5(open  addressing)\uff0c\u5b83\u7684\u57fa\u672c\u601d\u60f3\u662f\u5f53\u4e00\u4e2a\u69fd\u88ab\u5360\u7528\u7684\u65f6\u5019\uff0c\u91c7\u7528\u4e00\u79cd\u65b9\u5f0f\u6765\u5bfb\u627e\u4e0b\u4e00\u4e2a\u53ef\u7528\u7684\u69fd\u3002 \uff08\u8fd9\u91cc\u69fd\u6307\u7684\u662f\u6570\u7ec4\u4e2d\u7684\u4e00\u4e2a\u4f4d\u7f6e\uff09\uff0c\u6839\u636e\u627e\u4e0b\u4e00\u4e2a\u69fd\u7684\u65b9\u5f0f\u4e0d\u540c\uff0c\u5206\u4e3a\uff1a</p> <ul> <li>\u7ebf\u6027\u63a2\u67e5(linear probing): \u5f53\u4e00\u4e2a\u69fd\u88ab\u5360\u7528\uff0c\u627e\u4e0b\u4e00\u4e2a\u53ef\u7528\u7684\u69fd\u3002   </li> <li>\u4e8c\u6b21\u63a2\u67e5(quadratic probing): \u5f53\u4e00\u4e2a\u69fd\u88ab\u5360\u7528\uff0c\u4ee5\u4e8c\u6b21\u65b9\u4f5c\u4e3a\u504f\u79fb\u91cf\u3002  </li> <li>\u53cc\u91cd\u6563\u5217(double hashing): \u91cd\u65b0\u8ba1\u7b97 hash \u7ed3\u679c\u3002  </li> </ul> <p>\u6211\u4eec\u9009\u4e00\u4e2a\u7b80\u5355\u7684\u4e8c\u6b21\u63a2\u67e5\u51fd\u6570 \uff0c\u5b83\u7684\u610f\u601d\u662f\u5982\u679c \u9047\u5230\u4e86\u51b2\u7a81\uff0c\u6211\u4eec\u5c31\u5728\u539f\u59cb\u8ba1\u7b97\u7684\u4f4d\u7f6e\u4e0d\u65ad\u52a0\u4e0a i \u7684\u5e73\u65b9\u3002\u6211\u5199\u4e86\u6bb5\u4ee3\u7801\u6765\u6a21\u62df\u6574\u4e2a\u8ba1\u7b97\u4e0b\u6807\u7684\u8fc7\u7a0b\uff1a</p> <p><pre><code>inserted_index_set = set()\nM = 13\n\ndef h(key, M=13):\n    return key % M\n\nto_insert = [765, 431, 96, 142, 579, 226, 903, 388]\nfor number in to_insert:\n    index = h(number)\n    first_index = index\n    i = 1\n    while index in inserted_index_set:   # \u5982\u679c\u8ba1\u7b97\u53d1\u73b0\u5df2\u7ecf\u5360\u7528\uff0c\u7ee7\u7eed\u8ba1\u7b97\u5f97\u5230\u4e0b\u4e00\u4e2a\u53ef\u7528\u69fd\u7684\u4f4d\u7f6e\n        print('\\th({number}) = {number} % M = {index} collision'.format(number=number, index=index))\n        index = (first_index +  i*i) % M   # \u6839\u636e\u4e8c\u6b21\u65b9\u63a2\u67e5\u7684\u516c\u5f0f\u91cd\u65b0\u8ba1\u7b97\u4e0b\u4e00\u4e2a\u9700\u8981\u63d2\u5165\u7684\u4f4d\u7f6e\n        i += 1\n    else:\n        print('h({number}) = {number} % M = {index}'.format(number=number, index=index))\n        inserted_index_set.add(index)\n</code></pre> \u8fd9\u6bb5\u4ee3\u7801\u8f93\u51fa\u7684\u7ed3\u679c\u5982\u4e0b\uff1a</p> <pre><code>h(765) = 765 % M = 11\nh(431) = 431 % M = 2\nh(96) = 96 % M = 5\nh(142) = 142 % M = 12\nh(579) = 579 % M = 7\n    h(226) = 226 % M = 5 collision\nh(226) = 226 % M = 6\n    h(903) = 903 % M = 6 collision\n    h(903) = 903 % M = 7 collision\nh(903) = 903 % M = 10\n    h(388) = 388 % M = 11 collision\n    h(388) = 388 % M = 12 collision\n    h(388) = 388 % M = 2 collision\n    h(388) = 388 % M = 7 collision\nh(388) = 388 % M = 1\n</code></pre> <p>\u9047\u5230\u51b2\u7a81\u4e4b\u540e\u4f1a\u91cd\u65b0\u8ba1\u7b97\uff0c\u6bcf\u4e2a\u5f85\u63d2\u5165\u5143\u7d20\u6700\u7ec8\u7684\u4e0b\u6807\u5c31\u662f\uff1a</p> <p></p> <p></p>"},{"location":"07_%E5%93%88%E5%B8%8C%E8%A1%A8/hashtable/#cpython","title":"Cpython \u5982\u4f55\u89e3\u51b3\u54c8\u5e0c\u51b2\u7a81","text":"<p>\u5982\u679c\u4f60\u5bf9 cpython \u89e3\u91ca\u5668\u7684\u5b9e\u73b0\u611f\u5174\u8da3\uff0c\u53ef\u4ee5\u53c2\u8003\u4e0b\u8fd9\u4e2a\u6587\u4ef6 dictobject.c\u3002 \u4e0d\u540c cpython \u7248\u672c\u5b9e\u73b0\u7684\u63a2\u67e5\u65b9\u5f0f\u662f\u4e0d\u540c\u7684\uff0c\u540e\u8fb9\u6211\u4eec\u81ea\u5df1\u5b9e\u73b0 HashTable ADT \u7684\u65f6\u5019\u4f1a\u6a21\u4eff\u8fd9\u4e2a\u63a2\u67e5\u65b9\u5f0f\u6765\u89e3\u51b3\u51b2\u7a81\u3002</p> <pre><code>The first half of collision resolution is to visit table indices via this\nrecurrence:\n\n    j = ((5*j) + 1) mod 2**i\n\nFor any initial j in range(2**i), repeating that 2**i times generates each\nint in range(2**i) exactly once (see any text on random-number generation for\nproof).  By itself, this doesn't help much:  like linear probing (setting\nj += 1, or j -= 1, on each loop trip), it scans the table entries in a fixed\norder.  This would be bad, except that's not the only thing we do, and it's\nactually *good* in the common cases where hash keys are consecutive.  In an\nexample that's really too small to make this entirely clear, for a table of\nsize 2**3 the order of indices is:\n\n    0 -&gt; 1 -&gt; 6 -&gt; 7 -&gt; 4 -&gt; 5 -&gt; 2 -&gt; 3 -&gt; 0 [and here it's repeating]\n</code></pre>"},{"location":"07_%E5%93%88%E5%B8%8C%E8%A1%A8/hashtable/#_3","title":"\u54c8\u5e0c\u51fd\u6570","text":"<p>\u5230\u8fd9\u91cc\u4f60\u5e94\u8be5\u660e\u767d\u54c8\u5e0c\u8868\u63d2\u5165\u7684\u5de5\u4f5c\u539f\u7406\u4e86\uff0c\u4e0d\u8fc7\u6709\u4e2a\u91cd\u8981\u7684\u95ee\u9898\u4e4b\u524d\u6ca1\u63d0\u5230\uff0c\u5c31\u662f hash \u51fd\u6570\u600e\u4e48\u9009\uff1f \u5f53\u7136\u662f\u6563\u5217\u5f97\u5230\u7684\u51b2\u7a81\u8d8a\u6765\u8d8a\u5c0f\u5c31\u597d\u5566\uff0c\u4e5f\u5c31\u662f\u8bf4\u6bcf\u4e2a key \u90fd\u80fd\u5c3d\u91cf\u88ab\u7b49\u53ef\u80fd\u5730\u6563\u5217\u5230 m \u4e2a\u69fd\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\uff0c\u5e76\u4e14\u4e0e\u5176\u4ed6 key \u88ab\u6563\u5217\u5230\u54ea\u4e2a\u69fd\u4f4d\u65e0\u5173\u3002 \u5982\u679c\u4f60\u611f\u5174\u8da3\uff0c\u53ef\u4ee5\u9605\u8bfb\u540e\u8fb9\u63d0\u5230\u7684\u4e00\u4e9b\u53c2\u8003\u8d44\u6599\u3002\u89c6\u9891\u91cc\u6211\u4eec\u4f7f\u7528\u4e8c\u6b21\u63a2\u67e5\u51fd\u6570\uff0c\u5b83\u76f8\u6bd4\u7ebf\u6027\u63a2\u67e5\u5f97\u5230\u7684\u7ed3\u679c\u51b2\u7a81\u4f1a\u66f4\u5c11\u3002</p>"},{"location":"07_%E5%93%88%E5%B8%8C%E8%A1%A8/hashtable/#load-factor","title":"\u88c5\u8f7d\u56e0\u5b50(load factor)","text":"<p>\u5982\u679c\u7ee7\u7eed\u5f80\u6211\u4eec\u7684\u54c8\u5e0c\u8868\u91cc\u585e\u4e1c\u897f\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f\u7a7a\u95f4\u4e0d\u591f\u7528\u3002\u8fd9\u91cc\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u8d1f\u8f7d\u56e0\u5b50\u7684\u6982\u5ff5(load factor)\uff0c\u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u5df2\u7ecf\u4f7f\u7528\u7684\u69fd\u6570\u6bd4\u54c8\u5e0c\u8868\u5927\u5c0f\u3002 \u6bd4\u5982\u6211\u4eec\u4e0a\u8fb9\u7684\u4f8b\u5b50\u63d2\u5165\u4e86 8 \u4e2a\u5143\u7d20\uff0c\u54c8\u5e0c\u8868\u603b\u5927\u5c0f\u662f 13\uff0c \u5b83\u7684 load factor \u5c31\u662f \u3002\u5f53\u6211\u4eec\u7ee7\u7eed\u5f80\u54c8\u5e0c\u8868\u63d2\u5165\u6570\u636e\u7684\u65f6\u5019\uff0c\u5f88\u5feb\u5c31\u4e0d\u591f\u7528\u4e86\u3002 \u901a\u5e38\u5f53\u8d1f\u8f7d\u56e0\u5b50\u5f00\u59cb\u8d85\u8fc7 0.8 \u7684\u65f6\u5019\uff0c\u5c31\u8981\u65b0\u5f00\u8f9f\u7a7a\u95f4\u5e76\u4e14\u91cd\u65b0\u8fdb\u884c\u6563\u5217\u4e86\u3002</p>"},{"location":"07_%E5%93%88%E5%B8%8C%E8%A1%A8/hashtable/#rehashing","title":"\u91cd\u54c8\u5e0c(Rehashing)","text":"<p>\u5f53\u8d1f\u8f7d\u56e0\u5b50\u8d85\u8fc7 0.8 \u7684\u65f6\u5019\uff0c\u9700\u8981\u8fdb\u884c rehashing \u64cd\u4f5c\u4e86\u3002\u6b65\u9aa4\u5c31\u662f\u91cd\u65b0\u5f00\u8f9f\u4e00\u5757\u65b0\u7684\u7a7a\u95f4\uff0c\u5f00\u591a\u5927\u5462\uff1f\u611f\u5174\u8da3\u7684\u8bdd\u53ef\u4ee5\u770b\u4e0b cpython \u7684 dictobject.c \u6587\u4ef6\u7136\u540e\u641c\u7d22 GROWTH_RATE \u8fd9\u4e2a\u5173\u952e\u5b57\uff0c\u4f60\u4f1a\u53d1\u73b0\u4e0d\u540c\u7248\u672c\u7684 cpython \u4f7f\u7528\u4e86\u4e0d\u540c\u7684\u7b56\u7565\u3002python3.3 \u7684\u7b56\u7565\u662f\u6269\u5927\u4e3a\u5df2\u7ecf\u4f7f\u7528\u7684\u69fd\u6570\u76ee\u7684\u4e24\u500d\u3002\u5f00\u8f9f\u4e86\u65b0\u7a7a\u95f4\u4ee5\u540e\uff0c\u4f1a\u628a\u539f\u6765\u54c8\u5e0c\u8868\u91cc \u4e0d\u4e3a\u7a7a\u69fd\u7684\u6570\u636e\u91cd\u65b0\u63d2\u5165\u5230\u65b0\u7684\u54c8\u5e0c\u8868\u91cc\uff0c\u63d2\u5165\u65b9\u5f0f\u548c\u4e4b\u524d\u4e00\u6837\u3002\u8fd9\u5c31\u662f rehashing \u64cd\u4f5c\u3002</p>"},{"location":"07_%E5%93%88%E5%B8%8C%E8%A1%A8/hashtable/#hashtable-adt","title":"HashTable ADT","text":"<p>\u5b9e\u8df5\u662f\u68c0\u9a8c\u771f\u7406\u7684\u552f\u4e00\u6807\u51c6\uff0c\u8fd9\u91cc\u6211\u4eec\u6765\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5316\u7248\u7684\u54c8\u5e0c\u8868 ADT\uff0c\u4e3b\u8981\u662f\u4e3a\u4e86\u8ba9\u4f60\u66f4\u597d\u5730\u4e86\u89e3\u5b83\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u6709\u4e86\u5b83\uff0c\u540e\u8fb9\u5b9e\u73b0\u8d77 dict \u548c set \u6765\u5c31\u5c0f\u83dc\u4e00\u789f\u4e86\u3002 \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u5230\u4e86\u5b9a\u957f\u6570\u7ec4\uff0c\u8fd8\u8bb0\u5f97\u6211\u4eec\u5728\u6570\u7ec4\u548c\u5217\u8868\u7ae0\u8282\u91cc\u5b9e\u73b0\u7684 Array \u5427\uff0c\u8fd9\u91cc\u8981\u7528\u4e0a\u4e86\u3002</p> <p>\u89e3\u51b3\u51b2\u7a81\u6211\u4eec\u4f7f\u7528\u4e8c\u6b21\u63a2\u67e5\u6cd5\uff0c\u6a21\u62df cpython \u4e8c\u6b21\u63a2\u67e5\u51fd\u6570\u7684\u5b9e\u73b0\u3002\u6211\u4eec\u6765\u5b9e\u73b0\u4e09\u4e2a\u54c8\u5e0c\u8868\u6700\u5e38\u7528\u7684\u57fa\u672c\u64cd\u4f5c\uff0c\u8fd9\u5b9e\u9645\u4e0a\u4e5f\u662f\u4f7f\u7528\u5b57\u5178\u7684\u65f6\u5019\u6700\u5e38\u7528\u7684\u64cd\u4f5c\u3002</p> <ul> <li>add(key, value)</li> <li>get(key, default)</li> <li>remove(key)</li> </ul> <pre><code>class Slot(object):\n    \"\"\"\u5b9a\u4e49\u4e00\u4e2a hash \u8868 \u6570\u7ec4\u7684\u69fd\n    \u6ce8\u610f\uff0c\u4e00\u4e2a\u69fd\u6709\u4e09\u79cd\u72b6\u6001\uff0c\u770b\u4f60\u80fd\u5426\u60f3\u660e\u767d\n    1.\u4ece\u672a\u4f7f\u7528 HashMap.UNUSED\u3002\u6b64\u69fd\u6ca1\u6709\u88ab\u4f7f\u7528\u548c\u51b2\u7a81\u8fc7\uff0c\u67e5\u627e\u65f6\u53ea\u8981\u627e\u5230 UNUSED \u5c31\u4e0d\u7528\u518d\u7ee7\u7eed\u63a2\u67e5\u4e86\n    2.\u4f7f\u7528\u8fc7\u4f46\u662f remove \u4e86\uff0c\u6b64\u65f6\u662f HashMap.EMPTY\uff0c\u8be5\u63a2\u67e5\u70b9\u540e\u8fb9\u7684\u5143\u7d20\u6254\u53ef\u80fd\u662f\u6709key\n    3.\u69fd\u6b63\u5728\u4f7f\u7528 Slot \u8282\u70b9\n    \"\"\"\n    def __init__(self, key, value):\n        self.key, self.value = key, value\n\nclass HashTable(object):\n    pass\n</code></pre> <p>\u5177\u4f53\u7684\u5b9e\u73b0\u548c\u4ee3\u7801\u7f16\u5199\u5728\u89c6\u9891\u91cc\u8bb2\u89e3\u3002\u8fd9\u4e2a\u4ee3\u7801\u53ef\u4e0d\u592a\u597d\u5b9e\u73b0\uff0c\u7a0d\u4e0d\u7559\u795e\u5c31\u4f1a\u6709\u9519\uff0c\u6211\u4eec\u8fd8\u662f\u901a\u8fc7\u7f16\u5199\u5355\u5143\u6d4b\u8bd5\u9a8c\u8bc1\u4ee3\u7801\u7684\u6b63\u786e\u6027\u3002</p>"},{"location":"07_%E5%93%88%E5%B8%8C%E8%A1%A8/hashtable/#_4","title":"\u601d\u8003\u9898","text":"<ul> <li>\u8bf7\u4f60\u5206\u6790\u4e0b\u54c8\u5e0c\u8868\u63d2\u5165\u548c\u5220\u9664\u5143\u7d20\u7684\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u591a\u5c11\uff1f\u6211\u4eec\u90fd\u5b9e\u73b0\u4ee3\u7801\u4e86\uff0c\u76f8\u4fe1\u8fd9\u4e2a\u95ee\u9898\u4f60\u53ef\u4ee5\u56de\u7b54\u4e0a\u6765</li> <li>Slot \u5728\u4e8c\u6b21\u63a2\u67e5\u6cd5\u91cc\u4e3a\u4ec0\u4e48\u4e0d\u80fd\u76f4\u63a5\u5220\u9664\uff1f\u4e3a\u4ec0\u4e48\u6211\u4eec\u8981\u7ed9\u5b83\u5b9a\u4e49\u51e0\u4e2a\u72b6\u6001\uff1f</li> </ul>"},{"location":"07_%E5%93%88%E5%B8%8C%E8%A1%A8/hashtable/#_5","title":"\u5ef6\u4f38\u9605\u8bfb","text":"<ul> <li>\u300aData Structures and Algorithms in Python\u300b11 \u7ae0 Hash Tables</li> <li>\u300a\u7b97\u6cd5\u5bfc\u8bba\u300b\u7b2c\u4e09\u7248 11 \u7ae0\u6563\u5217\u8868\uff0c\u4e86\u89e3\u51e0\u79cd\u54c8\u5e0c\u51b2\u7a81\u7684\u89e3\u51b3\u65b9\u5f0f\uff0c\u4ee5\u53ca\u4e3a\u4ec0\u4e48\u6211\u4eec\u9009\u62e9\u4e8c\u6b21\u63a2\u67e5\u800c\u4e0d\u662f\u7ebf\u6027\u63a2\u67e5\u6cd5\uff1f</li> <li>\u4ecb\u7ecd c \u89e3\u91ca\u5668\u5982\u4f55\u5b9e\u73b0\u7684 python dict\u5bf9\u8c61\uff1aPython dictionary implementation</li> <li>Python hash function implement</li> </ul>"},{"location":"08_%E5%AD%97%E5%85%B8/dict/","title":"\u5b57\u5178 dict","text":"<p>\u4e0a\u4e00\u7ae0\u6211\u4eec\u4ecb\u7ecd\u4e86\u54c8\u5e0c\u8868\uff0c\u5176\u5b9e python \u5185\u7f6e\u7684 dict \u5c31\u662f\u7528\u54c8\u5e0c\u8868\u5b9e\u73b0\u7684\uff0c\u6240\u4ee5\u8fd9\u4e00\u7ae0\u5b9e\u73b0 dict \u5c31\u975e\u5e38\u7b80\u5355\u4e86\u3002 \u5f53\u7136 cpython \u4f7f\u7528\u7684\u662f c \u8bed\u8a00\u5b9e\u73b0\u7684\uff0c\u8fdc\u6bd4\u6211\u4eec\u5199\u7684\u590d\u6742\u5f97\u591a (cpython/Objects/dictobject.c)\u3002 \u4e0a\u4e00\u7ae0\u6211\u4eec\u7528 python \u81ea\u5df1\u5199\u7684\u4e00\u4e2a Array \u6765\u4ee3\u8868\u5b9a\u957f\u6570\u7ec4\uff0c\u7136\u540e\u7528\u5b83\u5b9e\u73b0\u7684 HashTable\uff0c\u5b83\u652f\u6301\u4e09\u4e2a\u6700\u57fa\u672c\u7684\u65b9\u6cd5</p> <ul> <li>add(key ,value): \u6709 key \u5219\u66f4\u65b0\uff0c\u5426\u5219\u63d2\u5165</li> <li>get(key, default=None): \u6216\u8005 key \u7684\u503c\uff0c\u4e0d\u5b58\u5728\u8fd4\u56de\u9ed8\u8ba4\u503c None</li> <li>remove(key): \u5220\u9664\u4e00\u4e2a key\uff0c\u8fd9\u91cc\u5176\u5b9e\u4e0d\u662f\u771f\u5220\u9664\uff0c\u800c\u662f\u6807\u8bb0\u4e3a Empty</li> </ul> <p>\u5b57\u5178\u6700\u5e38\u4f7f\u7528\u7684\u573a\u666f\u5c31\u662f k,v \u5b58\u50a8\uff0c\u7ecf\u5e38\u7528\u4f5c\u7f13\u5b58\uff0c\u5b83\u7684 key \u503c\u662f\u552f\u4e00\u7684\u3002 \u5185\u7f6e\u5e93 collections.OrderedDict \u8fd8\u4fdd\u6301\u4e86 key \u7684\u6dfb\u52a0\u987a\u5e8f\uff0c\u5176\u5b9e\u7528\u6211\u4eec\u4e4b\u524d\u5b9e\u73b0\u7684\u94fe\u8868\u4e5f\u80fd\u81ea\u5df1\u5b9e\u73b0\u4e00\u4e2a OrderedDict\u3002</p>"},{"location":"08_%E5%AD%97%E5%85%B8/dict/#dict-adt","title":"\u5b9e\u73b0 dict ADT","text":"<p>\u5176\u5b9e\u4e0a\u8fb9 HashTable \u5b9e\u73b0\u7684\u4e09\u4e2a\u57fa\u672c\u65b9\u6cd5\u5c31\u662f\u6211\u4eec\u4f7f\u7528\u5b57\u5178\u6700\u5e38\u7528\u7684\u4e09\u4e2a\u57fa\u672c\u65b9\u6cd5\uff0c \u8fd9\u91cc\u6211\u4eec\u7ee7\u627f\u4e00\u4e0b\u8fd9\u4e2a\u7c7b\uff0c \u7136\u540e\u5b9e\u73b0\u66f4\u591a dict \u652f\u6301\u7684\u65b9\u6cd5\uff0citems(), keys(), values()\u3002\u4e0d\u8fc7\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728 python2 \u548c python3 \u91cc\u8fd9\u4e9b\u65b9\u6cd5 \u7684\u8fd4\u56de\u662f\u4e0d\u540c\u7684\uff0cpython3 \u91cc\u4e00\u5927\u6539\u8fdb\u5c31\u662f\u4e0d\u518d\u8fd4\u56de\u6d6a\u8d39\u5185\u5b58\u7684 \u5217\u8868\uff0c\u800c\u662f\u8fd4\u56de\u8fed\u4ee3\u5668\uff0c\u4f60\u8981\u83b7\u5f97\u5217\u8868\u5fc5\u987b\u7528 list() \u8f6c\u6362\u6210\u5217\u8868\u3002 \u8fd9\u91cc\u6211\u4eec\u5b9e\u73b0 python3 \u7684\u65b9\u5f0f\u8fd4\u56de\u8fed\u4ee3\u5668\u3002</p> <pre><code>class DictADT(HashTable):\n    pass\n</code></pre> <p>\u89c6\u9891\u91cc\u6211\u4eec\u5c06\u6f14\u793a\u5982\u4f55\u5b9e\u73b0\u8fd9\u4e9b\u65b9\u6cd5\uff0c\u5e76\u4e14\u5199\u5355\u6d4b\u9a8c\u8bc1\u6b63\u786e\u6027\u3002</p>"},{"location":"08_%E5%AD%97%E5%85%B8/dict/#hashable","title":"Hashable","text":"<p>\u4f5c\u4e3a dict \u7684 key \u5fc5\u987b\u662f\u53ef\u54c8\u5e0c\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e0d\u80fd\u662f list \u7b49\u53ef\u53d8\u5bf9\u8c61\u3002\u4e0d\u4fe1\u4f60\u5728 ipython \u91cc\u8fd0\u884c\u5982\u4e0b\u4ee3\u7801\uff1a</p> <pre><code>d = dict()\nd[[1]] = 1\n# TypeError: unhashable type: 'list'\n</code></pre> <p>\u6211\u5f15\u7528 python \u6587\u6863\u91cc\u7684\u8bf4\u6cd5\uff0c\u5927\u5bb6\u53ef\u4ee5\u81ea\u5df1\u7406\u89e3\u4e0b\uff1a</p> <pre><code>An object is hashable if it has a hash value which never changes during its lifetime (it needs a __hash__() method), and can be compared to other objects (it needs an __eq__() or __cmp__() method). Hashable objects which compare equal must have the same hash value.\n\nHashability makes an object usable as a dictionary key and a set member, because these data structures use the hash value internally.\n\nAll of Python\u2019s immutable built-in objects are hashable, while no mutable containers (such as lists or dictionaries) are. Objects which are instances of user-defined classes are hashable by default; they all compare unequal (except with themselves), and their hash value is derived from their id().\n</code></pre>"},{"location":"08_%E5%AD%97%E5%85%B8/dict/#_1","title":"\u601d\u8003\u9898\uff1a","text":"<ul> <li>\u4f60\u80fd\u5728\u54c8\u5e0c\u8868\u7684\u57fa\u7840\u4e0a\u5b9e\u73b0 dict \u7684\u5176\u4ed6\u64cd\u4f5c\u5417\uff1f</li> <li>\u5bf9\u4e8e python \u6765\u8bf4\uff0c\u54ea\u4e9b\u5185\u7f6e\u6570\u636e\u7c7b\u578b\u662f\u53ef\u54c8\u5e0c\u7684\u5462\uff1flist, dict, tuple, set \u7b49\u7c7b\u578b\u54ea\u4e9b\u53ef\u4ee5\u4f5c\u4e3a\u5b57\u5178\u7684 key \u5462?</li> <li>\u4f60\u4e86\u89e3\u53ef\u53d8\u5bf9\u8c61\u548c\u4e0d\u53ef\u53d8\u5bf9\u8c61\u7684\u533a\u522b\u5417\uff1f</li> <li>\u4f60\u4e86\u89e3 python \u7684 hash \u51fd\u6570\u5417\uff1f\u4f60\u4e86\u89e3 python \u7684<code>__hash__</code>  \u548c <code>__eq__</code> \u9b54\u672f\u65b9\u6cd5\u5417\uff1f\u5b83\u4eec\u4f55\u65f6\u88ab\u8c03\u7528</li> </ul>"},{"location":"08_%E5%AD%97%E5%85%B8/dict/#_2","title":"\u5ef6\u4f38\u9605\u8bfb","text":"<p>\u9605\u8bfb python \u6587\u6863\u5173\u4e8e dict \u7684\u76f8\u5173\u5185\u5bb9</p>"},{"location":"09_%E9%9B%86%E5%90%88/set/","title":"\u96c6\u5408 set","text":"<p>\u96c6\u5408\u662f\u4e00\u79cd\u4e0d\u5305\u542b\u91cd\u590d\u5143\u7d20\u7684\u6570\u636e\u7ed3\u6784\uff0c\u7ecf\u5e38\u7528\u6765\u5224\u65ad\u662f\u5426\u91cd\u590d\u8fd9\u79cd\u64cd\u4f5c\uff0c\u6216\u8005\u96c6\u5408\u4e2d\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u5143\u7d20\u3002 \u8fd9\u4e00\u7ae0\u8bb2\u96c6\u5408\uff0c\u5b9e\u9645\u4e0a\u5b83\u7684\u5e95\u5c42\u4e5f\u662f\u54c8\u5e0c\u8868\u5b9e\u73b0\u7684\uff0c\u6240\u4ee5\u50cf\u5b9e\u73b0 DictADT \u4e00\u6837\uff0c\u501f\u52a9 HashTable \u5b9e\u73b0\u5b83\u4e5f\u6bd4\u8f83\u7b80\u5355\u3002</p>"},{"location":"09_%E9%9B%86%E5%90%88/set/#_1","title":"\u96c6\u5408\u64cd\u4f5c","text":"<p>\u96c6\u5408\u53ef\u80fd\u6700\u5e38\u7528\u7684\u5c31\u662f\u53bb\u91cd\uff0c\u5224\u65ad\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u5143\u7d20\u7b49\uff0c\u4f46\u662f set \u76f8\u6bd4 dict \u6709\u66f4\u4e30\u5bcc\u7684\u64cd\u4f5c\uff0c\u4e3b\u8981\u662f\u6570\u5b66\u6982\u5ff5\u4e0a\u7684\u3002 \u5982\u679c\u4f60\u5b66\u8fc7\u300a\u79bb\u6563\u6570\u5b66\u300b\u4e2d\u96c6\u5408\u76f8\u5173\u7684\u6982\u5ff5\uff0c\u57fa\u672c\u4e0a\u662f\u4e00\u81f4\u7684\u3002 python \u7684 set \u63d0\u4f9b\u4e86\u5982\u4e0b\u57fa\u672c\u7684\u96c6\u5408\u64cd\u4f5c\uff0c \u5047\u8bbe\u6709\u4e24\u4e2a\u96c6\u5408 A\uff0cB\uff0c\u6709\u4ee5\u4e0b\u64cd\u4f5c\uff1a</p> <ul> <li>\u4ea4\u96c6: A &amp; B\uff0c\u8868\u793a\u540c\u65f6\u5728 A \u548c B \u4e2d\u7684\u5143\u7d20\u3002 python \u4e2d\u91cd\u8f7d  <code>__and__</code> \u5b9e\u73b0</li> <li>\u5e76\u96c6: A | B\uff0c\u8868\u793a\u5728 A \u6216\u8005 B \u4e2d\u7684\u5143\u7d20\uff0c\u4e24\u4e2a\u96c6\u5408\u76f8\u52a0\u3002python \u4e2d\u91cd\u8f7d <code>__or__</code> \u5b9e\u73b0</li> <li>\u5dee\u96c6:  A - B\uff0c\u8868\u793a\u5728 A \u4e2d\u4f46\u662f\u4e0d\u5728 B \u4e2d\u7684\u5143\u7d20\u3002 python \u4e2d\u91cd\u8f7d <code>__sub__</code> \u5b9e\u73b0</li> <li>\u5bf9\u79f0\u5dee: A ^ B\uff0c\u8fd4\u56de\u5728 A \u6216 B \u4f46\u662f\u4e0d\u5728 A\u3001B \u4e2d\u90fd\u51fa\u73b0\u7684\u5143\u7d20\u3002\u5176\u5b9e\u5c31\u662f (A|B) - (A&amp;B)\uff0c python \u4e2d\u91cd\u8f7d <code>__xor__</code> \u5b9e\u73b0</li> </ul> <p>\u8fd9\u91cc\u4f7f\u7528\u7684  &amp;, |, -, ^ \u5728 python \u5185\u7f6e\u7684 set \u5b9e\u73b0\u4e2d\u90fd\u662f\u91cd\u8f7d\u4e86\u5185\u7f6e\u7684\u8fd0\u7b97\u7b26\u3002\u8fd9\u91cc\u6211\u4eec\u4e5f\u7528\u8fd9\u79cd\u65b9\u5f0f\u5b9e\u73b0\uff0c \u5177\u4f53\u5b9e\u73b0\u6211\u4f1a\u5728\u89c6\u9891\u91cc\u6f14\u793a\u3002python \u540c\u6837\u5b9e\u73b0\u4e86  intersection, union, difference, symmetric_difference \u8fd9\u56db\u4e2a\u65b9\u6cd5\uff0c \u548c\u4f7f\u7528\u8fd0\u7b97\u7b26\u7684\u529f\u80fd\u662f\u4e00\u6837\u7684\u3002</p> <p></p>"},{"location":"09_%E9%9B%86%E5%90%88/set/#python-frozenset","title":"python frozenset","text":"<p>\u5728 python \u91cc\u8fd8\u6709\u4e00\u4e2a frozenset\uff0c\u770b\u5b83\u7684\u540d\u5b57\u5c31\u77e5\u9053\u8fd9\u79cd\u4e5f\u662f\u96c6\u5408\uff0c\u4f46\u662f\u5b83\u7684\u5185\u5bb9\u662f\u65e0\u6cd5\u53d8\u52a8\u7684\u3002\u4e00\u822c\u6211\u4eec\u4f7f\u7528 \u5b83\u7684\u5e38\u89c1\u5c31\u662f\u7528\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\u521d\u59cb\u5316\u5b83\uff0c\u7136\u540e\u53ea\u7528\u6765\u5224\u91cd\u7b49\u64cd\u4f5c\u3002</p>"},{"location":"09_%E9%9B%86%E5%90%88/set/#set-adt","title":"\u5b9e\u73b0\u4e00\u4e2a set ADT","text":"<p>\u5982\u4f55\u5b9e\u73b0\u4e00\u4e2a\u96c6\u5408\u7684 ADT \u5462\uff0c\u5176\u5b9e\u8fd8\u662f\u4e2a\u54c8\u5e0c\u8868\uff0c\u54c8\u5e0c\u8868\u4e0d\u662f\u6709 key \u548c value \u561b\uff0c\u54b1\u628a value \u7f6e\u4e3a 1 \u4e0d\u5c31\u884c\u4e86\u3002</p> <pre><code>class SetADT(HashTable):\n\n    def add(self, key):\n        # \u96c6\u5408\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a dict\uff0c\u53ea\u4e0d\u8fc7\u6211\u4eec\u628a\u5b83\u7684 value \u8bbe\u7f6e\u6210 1\n        return super(SetADT, self).add(key, True)\n</code></pre> <p>\u5f53\u7136\u5176\u5b83\u6570\u5b66\u4e0a\u7684\u64cd\u4f5c\u5c31\u9ebb\u70e6\u70b9\u4e86\uff0c\u4e0d\u8fc7\u4e5f\u5f88\u5bb9\u6613\u5b9e\u73b0\u3002</p>"},{"location":"09_%E9%9B%86%E5%90%88/set/#_2","title":"\u601d\u8003\u9898","text":"<ul> <li>\u96c6\u5408\u5224\u65ad\u4e00\u4e2a\u5143\u7d20\u662f\u5426\u5b58\u5728\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u591a\u5c11\uff1f</li> <li>\u96c6\u5408\u7684\u5143\u7d20 key \u9700\u8981\u6ee1\u8db3\u4ec0\u4e48\u6982\u5ff5\uff1f\u53ef\u53d8\u5bf9\u8c61\u53ef\u4ee5\u5417\uff1f</li> <li>\u8bf7\u4f60\u5728 SetADT \u57fa\u7840\u4e0a\u5b9e\u73b0\u96c6\u5408\u7684 remove \u64cd\u4f5c\u548c pop \u64cd\u4f5c</li> <li>\u4f60\u80fd\u5c1d\u8bd5\u5b9e\u73b0\u5bf9\u79f0\u5dee\u64cd\u4f5c\u5417\uff1f\u8fd9\u91cc\u6211\u6ca1\u6709\u5b9e\u73b0\uff0c\u7559\u7ed9\u4f60\u4f5c\u4e3a\u7ec3\u4e60</li> <li>\u4f60\u77e5\u9053\u5982\u4f55\u91cd\u8f7d python \u7684\u5185\u7f6e\u8fd0\u7b97\u7b26\u5417\uff1f\u8fd9\u91cc\u6211\u4eec\u5b9e\u73b0 set \u7684\u96c6\u5408\u64cd\u4f5c\u5c31\u662f\u7528\u5230\u4e86\u91cd\u8f7d\uff0c\u8bf7\u9605\u8bfb\u76f8\u5173 python \u6587\u6863\u3002</li> <li>\u5f53\u5143\u7d20\u4e2a\u6570\u4e0d\u591a\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u7528 set \u6765\u5224\u91cd\uff0c\u4f46\u662f\u5982\u679c\u662f\u5927\u91cf\u5143\u7d20\u4f1a\u975e\u5e38\u8017\u8d39\u5185\u5b58\u3002\u8bf7\u4f60\u4e86\u89e3\u4e0b Bloom Filter</li> </ul>"},{"location":"09_%E9%9B%86%E5%90%88/set/#_3","title":"\u5ef6\u4f38\u9605\u8bfb","text":"<p>\u9605\u8bfb python \u6587\u6863\u5173\u4e8e set \u7684\u76f8\u5173\u7ae0\u8282\uff0c\u4e86\u89e3 set \u8fd8\u6709\u54ea\u4e9b\u64cd\u4f5c\uff1f\u6bd4\u5982\u6bd4\u8f83\u8fd0\u7b97\u7b26\u7684\u6982\u5ff5\uff0c\u6bd4\u8f83\u4e24\u4e2a\u96c6\u5408\u610f\u5473\u7740\u4ec0\u4e48\u3002</p>"},{"location":"10_%E9%80%92%E5%BD%92/recursion/","title":"\u9012\u5f52","text":"<p>Recursion is a process for solving problems by subdividing a larger    problem into smaller cases of the problem itself and then solving    the smaller, more trivial parts.</p> <p>\u9012\u5f52\u662f\u8ba1\u7b97\u673a\u79d1\u5b66\u91cc\u51fa\u73b0\u975e\u5e38\u591a\u7684\u4e00\u4e2a\u6982\u5ff5\uff0c\u6709\u65f6\u5019\u7528\u9012\u5f52\u89e3\u51b3\u95ee\u9898\u770b\u8d77\u6765\u975e\u5e38\u7b80\u5355\u4f18\u96c5\u3002 \u4e4b\u524d\u8bb2\u8fc7\u7684\u6570\u636e\u7ed3\u6784\u4e2d\u6211\u4eec\u5e76\u6ca1\u6709\u4f7f\u7528\u9012\u5f52\uff0c\u56e0\u4e3a\u9012\u5f52\u6d89\u53ca\u5230\u8c03\u7528\u6808\uff0c\u53ef\u80fd\u4f1a\u8ba9\u521d\u5b66\u8005\u641e\u6655\u3002\u8fd9\u4e00\u7ae0\u6211\u4eec\u5f00\u59cb\u4ecb\u7ecd\u9012\u5f52\uff0c \u540e\u8fb9\u8bb2\u5230\u6811\u548c\u4e00\u4e9b\u6392\u5e8f\u7b97\u6cd5\u7684\u65f6\u5019\u6211\u4eec\u8fd8\u4f1a\u78b0\u5230\u5b83\u3002\u6211\u975e\u5e38\u63a8\u8350\u4f60\u5148\u770b\u770b\u300a\u7b97\u6cd5\u56fe\u89e3\u300b\u7b2c\u4e09\u7ae0 \u9012\u5f52\uff0c \u4e3e\u7684\u4f8b\u5b50\u6bd4\u8f83\u6d45\u663e\u6613\u61c2\u3002</p>"},{"location":"10_%E9%80%92%E5%BD%92/recursion/#_2","title":"\u4ec0\u4e48\u662f\u9012\u5f52\uff1f","text":"<p>\u9012\u5f52\u7528\u4e00\u79cd\u901a\u4fd7\u7684\u8bdd\u6765\u8bf4\u5c31\u662f\u81ea\u5df1\u8c03\u7528\u81ea\u5df1\uff0c\u4f46\u662f\u9700\u8981\u5206\u89e3\u5b83\u7684\u53c2\u6570\uff0c\u8ba9\u5b83\u89e3\u51b3\u4e00\u4e2a\u66f4\u5c0f\u4e00\u70b9\u7684\u95ee\u9898\uff0c\u5f53\u95ee\u9898\u5c0f\u5230\u4e00\u5b9a\u89c4\u6a21\u7684\u65f6\u5019\uff0c\u9700\u8981\u4e00\u4e2a\u9012\u5f52\u51fa\u53e3\u8fd4\u56de\u3002 \u8fd9\u91cc\u4e3e\u4e00\u4e2a\u548c\u5176\u4ed6\u5f88\u591a\u8001\u5957\u7684\u6559\u79d1\u4e66\u4e00\u6837\u559c\u6b22\u4e3e\u7684\u4f8b\u5b50\uff0c\u9636\u4e58\u51fd\u6570\uff0c\u6211\u89c9\u5f97\u7528\u6765\u5b83\u6f14\u793a\u518d\u76f4\u89c2\u4e0d\u8fc7\u3002\u5b83\u7684\u5b9a\u4e49\u662f\u8fd9\u6837\u7684\uff1a</p> <p></p> <p>\u6211\u4eec\u5f88\u5bb9\u6613\u6839\u636e\u5b83\u7684\u5b9a\u4e49\u5199\u51fa\u8fd9\u6837\u4e00\u4e2a\u9012\u5f52\u51fd\u6570\uff0c\u56e0\u4e3a\u5b83\u672c\u8eab\u5c31\u662f\u9012\u5f52\u5b9a\u4e49\u7684\u3002</p> <p><pre><code>def fact(n):\n    if n == 0:\n        return 1\n    else:\n        return n * fact(n-1)\n</code></pre> \u770b\u5427\uff0c\u51e0\u4e4e\u5b8c\u5168\u662f\u6309\u7167\u5b9a\u4e49\u6765\u5199\u7684\u3002\u6211\u4eec\u6765\u770b\u4e0b\u9012\u5f52\u51fd\u6570\u7684\u51e0\u4e2a\u7279\u70b9:</p> <ul> <li>\u9012\u5f52\u5fc5\u987b\u5305\u542b\u4e00\u4e2a\u57fa\u672c\u7684\u51fa\u53e3(base case)\uff0c\u5426\u5219\u5c31\u4f1a\u65e0\u9650\u9012\u5f52\uff0c\u6700\u7ec8\u5bfc\u81f4\u6808\u6ea2\u51fa\u3002\u6bd4\u5982\u8fd9\u91cc\u5c31\u662f n == 0 \u8fd4\u56de 1</li> <li>\u9012\u5f52\u5fc5\u987b\u5305\u542b\u4e00\u4e2a\u53ef\u4ee5\u5206\u89e3\u7684\u95ee\u9898(recursive case)\u3002 \u8981\u60f3\u6c42\u5f97 fact(n)\uff0c\u5c31\u9700\u8981\u7528 n * fact(n-1)</li> <li>\u9012\u5f52\u5fc5\u987b\u5fc5\u987b\u8981\u5411\u7740\u9012\u5f52\u51fa\u53e3\u9760\u8fd1(toward the base case)\u3002 \u8fd9\u91cc\u6bcf\u6b21\u9012\u5f52\u8c03\u7528\u90fd\u4f1a n-1\uff0c\u5411\u7740\u9012\u5f52\u51fa\u53e3 n == 0 \u9760\u8fd1</li> </ul>"},{"location":"10_%E9%80%92%E5%BD%92/recursion/#_3","title":"\u8c03\u7528\u6808","text":"<p>\u770b\u4e86\u4e0a\u4e00\u4e2a\u4f8b\u5b50\u4f60\u53ef\u80fd\u89c9\u5f97\u9012\u5f52\u597d\u7b80\u5355\uff0c\u5148\u522b\u7740\u6025\uff0c\u6211\u4eec\u518d\u4e3e\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u4e0a\u8fb9\u6211\u4eec\u5e76\u6ca1\u6709\u8bb2\u9012\u5f52\u5982\u4f55\u5de5\u4f5c\u7684\u3002 \u5047\u5982\u8ba9\u4f60\u8f93\u51fa\u4ece 1 \u5230 10 \u8fd9\u5341\u4e2a\u6570\u5b57\uff0c\u5982\u679c\u4f60\u662f\u4e2a\u6b63\u5e38\u4eba\u7684\u8bdd\uff0c\u6211\u60f3\u4f60\u7684\u7b2c\u4e00\u53cd\u5e94\u90fd\u662f\u8fd9\u4e48\u5199\uff1a</p> <pre><code>def print_num(n):\n    for i in range(1, n + 1):    # \u6ce8\u610f\u5f88\u591a\u7f16\u7a0b\u8bed\u8a00\u4f7f\u7528\u7684\u90fd\u662f \u4ece 0 \u5f00\u59cb\u7684\u5de6\u95ed\u53f3\u5f00\u533a\u95f4, python \u4e5f\u4e0d\u4f8b\u5916\n        print(i)\n\n\nif __name__ == '__main__':\n    print_num(10)\n</code></pre> <p>\u6211\u4eec\u5c1d\u8bd5\u5199\u4e00\u4e2a\u9012\u5f52\u7248\u672c\uff0c\u4e0d\u5c31\u662f\u81ea\u5df1\u8c03\u7528\u81ea\u5df1\u561b\uff1a</p> <pre><code>def print_num_recursive(n):\n    if n &gt; 0:\n        print_num_recursive(n-1)\n        print(n)\n</code></pre> <p>\u4f60\u731c\u4e0b\u5b83\u7684\u8f93\u51fa\uff1f\u7136\u540e\u6211\u4eec\u8c03\u6362\u4e0b print \u987a\u5e8f\uff0c\u4f60\u518d\u731c\u4e0b\u5b83\u7684\u8f93\u51fa</p> <p><pre><code>def print_num_recursive_revserve(n):\n    if n &gt; 0:\n        print(n)\n        print_num_recursive_revserve(n-1)\n</code></pre> \u4f60\u80fd\u660e\u767d\u662f\u4e3a\u4ec0\u4e48\u5417\uff1f\u6211\u5efa\u8bae\u4f60\u8fd0\u884c\u4e0b\u8fd9\u51e0\u4e2a\u5c0f\u4f8b\u5b50\uff0c\u5b83\u4eec\u5f88\u7b80\u5355\u4f46\u662f\u5374\u80fd\u8bf4\u660e\u95ee\u9898\u3002 \u8ba1\u7b97\u673a\u5185\u90e8\u4f7f\u7528\u8c03\u7528\u6808\u6765\u5b9e\u73b0\u9012\u5f52\uff0c\u8fd9\u91cc\u7684\u6808\u4e00\u65b9\u9762\u6307\u7684\u662f\u5185\u5b58\u4e2d\u7684\u6808\u533a\uff0c\u4e00\u65b9\u9762\u6808\u53c8\u662f\u4e4b\u524d\u8bb2\u5230\u7684\u540e\u8fdb\u5148\u51fa\u8fd9\u79cd\u6570\u636e\u7ed3\u6784\u3002 \u6bcf\u5f53\u8fdb\u5165\u9012\u5f52\u51fd\u6570\u7684\u65f6\u5019\uff0c\u7cfb\u7edf\u90fd\u4f1a\u4e3a\u5f53\u524d\u51fd\u6570\u5f00\u8f9f\u5185\u5b58\u4fdd\u5b58\u5f53\u524d\u53d8\u91cf\u503c\u7b49\u4fe1\u606f\uff0c\u6bcf\u4e2a\u8c03\u7528\u6808\u4e4b\u95f4\u7684\u6570\u636e\u4e92\u4e0d\u5f71\u54cd\uff0c\u65b0\u8c03\u7528\u7684\u51fd\u6570 \u5165\u6808\u7684\u65f6\u5019\u4f1a\u653e\u5728\u6808\u9876\u3002\u89c6\u9891\u91cc\u6211\u4eec\u4f1a\u753b\u56fe\u6765\u6f14\u793a\u8fd9\u4e2a\u8fc7\u7a0b\u3002</p> <p>\u9012\u5f52\u53ea\u7528\u5927\u8111\u4e0d\u7528\u7eb8\u7b14\u6a21\u62df\u7684\u8bdd\u5f88\u5bb9\u6613\u6655\uff0c\u56e0\u4e3a\u660e\u660e\u662f\u540c\u4e00\u4e2a\u53d8\u91cf\u540d\u5b57\uff0c\u4f46\u662f\u5728\u4e0d\u540c\u7684\u8c03\u7528\u6808\u91cc\u5b83\u662f\u4e0d\u540c\u7684\u503c\uff0c\u6240\u4ee5\u6211\u5efa\u8bae \u4f60\u6700\u597d\u624b\u52a8\u753b\u753b\u8fd9\u4e2a\u8fc7\u7a0b\u3002</p> <p></p>"},{"location":"10_%E9%80%92%E5%BD%92/recursion/#_4","title":"\u7528\u6808\u6a21\u62df\u9012\u5f52","text":"<p>\u521a\u624d\u8bf4\u5230\u4e86\u8c03\u7528\u6808\uff0c\u6211\u4eec\u5c31\u7528\u6808\u6765\u6a21\u62df\u4e00\u628a\u3002\u4e4b\u524d\u6808\u8fd9\u4e00\u7ae0\u6211\u4eec\u8bb2\u4e86\u5982\u4f55\u81ea\u5df1\u5b9e\u73b0\u6808\uff0c\u4e0d\u8fc7\u8fd9\u91cc\u4e3a\u4e86\u4e0d\u62f7\u8d1d\u592a\u591a\u4ee3\u7801\uff0c\u6211\u4eec\u76f4\u63a5\u7528 collections.deque \u5c31\u53ef\u4ee5 \u5feb\u901f\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u7684\u6808\u3002</p> <p><pre><code>from collections import deque\n\n\nclass Stack(object):\n    def __init__(self):\n        self._deque = deque()\n\n    def push(self, value):\n        return self._deque.append(value)\n\n    def pop(self):\n        return self._deque.pop()\n\n    def is_empty(self):\n        return len(self._deque) == 0\n\n\ndef print_num_use_stack(n):\n    s = Stack()\n    while n &gt; 0:    # \u4e0d\u65ad\u5c06\u53c2\u6570\u5165\u6808\n        s.push(n)\n        n -= 1\n\n    while not s.is_empty():    # \u53c2\u6570\u5f39\u51fa\n        print(s.pop())\n</code></pre> \u8fd9\u91cc\u7ed3\u679c\u4e5f\u662f\u8f93\u51fa 1 \u5230 10\uff0c\u53ea\u4e0d\u8fc7\u6211\u4eec\u662f\u624b\u52a8\u6a21\u62df\u4e86\u5165\u6808\u548c\u51fa\u6808\u7684\u8fc7\u7a0b\uff0c\u5e2e\u52a9\u4f60\u7406\u89e3\u8ba1\u7b97\u673a\u662f\u5982\u4f55\u5b9e\u73b0\u9012\u5f52\u7684\uff0c\u662f\u4e0d\u662f\u633a\u7b80\u5355\uff01\u73b0\u5728\u4f60\u80fd\u660e\u767d\u4e3a\u4ec0\u4e48\u4e0a\u8fb9 print_num_recursive print_num_recursive_revserve \u4e24\u4e2a\u51fd\u6570\u8f93\u51fa\u7684\u533a\u522b\u4e86\u5417\uff1f</p>"},{"location":"10_%E9%80%92%E5%BD%92/recursion/#_5","title":"\u5c3e\u9012\u5f52","text":"<p>\u4e0a\u8fb9\u7684\u4ee3\u7801\u793a\u4f8b(\u9ebb\u96c0\u867d\u5c0f\u4e94\u810f\u4ff1\u5168)\u4e2d\u5b9e\u9645\u4e0a\u5305\u542b\u4e86\u4e24\u79cd\u5f62\u5f0f\u7684\u9012\u5f52\uff0c\u4e00\u79cd\u662f\u666e\u901a\u7684\u9012\u5f52\uff0c\u8fd8\u6709\u4e00\u79cd\u53eb\u505a\u5c3e\u9012\u5f52\uff1a</p> <pre><code>def print_num_recursive(n):\n    if n &gt; 0:\n        print_num_recursive(n-1)\n        print(n)\n\n\ndef print_num_recursive_revserve(n):\n    if n &gt; 0:\n        print(n)\n        print_num_recursive_revserve(n-1)    # \u5c3e\u9012\u5f52\n</code></pre> <p>\u6982\u5ff5\u4e0a\u5b83\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u9012\u5f52\u8c03\u7528\u653e\u5728\u4e86\u51fd\u6570\u7684\u6700\u540e\u3002\u6709\u4ec0\u4e48\u7528\u5462\uff1f \u666e\u901a\u7684\u9012\u5f52, \u6bcf\u4e00\u7ea7\u9012\u5f52\u90fd\u4ea7\u751f\u4e86\u65b0\u7684\u5c40\u90e8\u53d8\u91cf, \u5fc5\u987b\u521b\u5efa\u65b0\u7684\u8c03\u7528\u6808, \u968f\u7740\u9012\u5f52\u6df1\u5ea6\u7684\u589e\u52a0, \u521b\u5efa\u7684\u6808\u8d8a\u6765\u8d8a\u591a, \u9020\u6210\u7206\u6808\u3002\u867d\u7136\u5c3e\u9012\u5f52\u8c03\u7528\u4e5f\u4f1a\u521b\u5efa\u65b0\u7684\u6808, \u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u4f18\u5316\u4f7f\u5f97\u5c3e\u9012\u5f52\u7684\u6bcf\u4e00\u7ea7\u8c03\u7528\u5171\u7528\u4e00\u4e2a\u6808!, \u5982\u6b64\u4fbf\u53ef\u89e3\u51b3\u7206\u6808\u548c\u9012\u5f52\u6df1\u5ea6\u9650\u5236\u7684\u95ee\u9898! \u4e0d\u5e78\u7684\u662f python \u9ed8\u8ba4\u4e0d\u652f\u6301\u5c3e\u9012\u5f52\u4f18\u5316\uff08\u89c1\u5ef6\u4f38\u9605\u8bfb\uff09\uff0c\u4e0d\u8fc7\u4e00\u822c\u5c3e\u9012\u5f52\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a\u8fed\u4ee3\u6765\u4f18\u5316\u5b83\u3002</p>"},{"location":"10_%E9%80%92%E5%BD%92/recursion/#_6","title":"\u6c49\u8bfa\u5854\u95ee\u9898","text":"<p>\u6709\u4e09\u6839\u6746\u5b50A\uff0cB\uff0cC\u3002A\u6746\u4e0a\u6709N\u4e2a(N&gt;1)\u7a7f\u5b54\u5706\u76d8\uff0c\u76d8\u7684\u5c3a\u5bf8\u7531\u4e0b\u5230\u4e0a\u4f9d\u6b21\u53d8\u5c0f\u3002\u8981\u6c42\u6309\u4e0b\u5217\u89c4\u5219\u5c06\u6240\u6709\u5706\u76d8\u79fb\u81f3C\u6746\uff1a \u4f46\u662f\u6709\u4e24\u4e2a\u6761\u4ef6\uff1a</p> <ul> <li>\u6bcf\u6b21\u53ea\u80fd\u79fb\u52a8\u4e00\u4e2a\u5706\u76d8\uff1b</li> <li>\u5927\u76d8\u4e0d\u80fd\u53e0\u5728\u5c0f\u76d8\u4e0a\u9762\u3002</li> </ul> <p>\u6700\u65e9\u53d1\u660e\u8fd9\u4e2a\u95ee\u9898\u7684\u4eba\u662f\u6cd5\u56fd\u6570\u5b66\u5bb6\u7231\u5fb7\u534e\u00b7\u5362\u5361\u65af\u3002 \u4f20\u8bf4\u8d8a\u5357\u6cb3\u5185\u67d0\u95f4\u5bfa\u9662\u6709\u4e09\u6839\u94f6\u68d2\uff0c\u4e0a\u4e3264\u4e2a\u91d1\u76d8\u3002\u5bfa\u9662\u91cc\u7684\u50e7\u4fa3\u4f9d\u7167\u4e00\u4e2a\u53e4\u8001\u7684\u9884\u8a00\uff0c\u4ee5\u4e0a\u8ff0\u89c4\u5219\u79fb\u52a8\u8fd9\u4e9b\u76d8\u5b50\uff1b\u9884\u8a00\u8bf4\u5f53\u8fd9\u4e9b\u76d8\u5b50\u79fb\u52a8\u5b8c\u6bd5\uff0c\u4e16\u754c\u5c31\u4f1a\u706d\u4ea1\u3002 \u8fd9\u4e2a\u4f20\u8bf4\u53eb\u505a\u68b5\u5929\u5bfa\u4e4b\u5854\u95ee\u9898\uff08Tower of Brahma puzzle\uff09\u3002\u4f46\u4e0d\u77e5\u9053\u662f\u5362\u5361\u65af\u81ea\u521b\u7684\u8fd9\u4e2a\u4f20\u8bf4\uff0c\u8fd8\u662f\u4ed6\u53d7\u4ed6\u4eba\u542f\u53d1\u3002</p> <p></p> <p>\u7406\u89e3\u8fd9\u4e2a\u95ee\u9898\u9700\u8981\u6211\u4eec\u4e00\u4e9b\u601d\u7ef4\u4e0a\u7684\u8f6c\u6362\uff0c\u56e0\u4e3a\u6211\u4eec\u6b63\u5e38\u7684\u601d\u7ef4\u53ef\u80fd\u90fd\u662f\u4ece\u4e0a\u8fb9\u6700\u5c0f\u7684\u76d8\u5b50\u5f00\u59cb\u79fb\u52a8\uff0c\u4f46\u662f\u8fd9\u91cc\u6211\u4eec\u4ece\u79fb\u52a8\u6700\u5e95\u4e0b\u7684\u76d8\u5b50\u5f00\u59cb\u601d\u8003\u3002 \u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u5982\u4f55\u79fb\u52a8\u4e0a\u8fb9\u7684\u56db\u4e2a\u76d8\u5b50\u5230 B(pole2)\uff0c\u73b0\u5728\u628a\u6700\u5927\u7684\u76d8\u5b50\u4ece A -&gt; C \u5c31\u5f88\u7b80\u5355\u4e86\u3002\u5f53\u628a\u6700\u5927\u7684\u76d8\u5b50\u79fb\u52a8\u5230 C \u4e4b\u540e\uff0c\u53ea\u9700\u8981\u628a B \u4e0a\u7684 4 \u4e2a\u76d8\u5b50\u4ece B -&gt; C \u5c31\u884c\u3002\uff08\u8fd9\u91cc\u7684 pole1, 2, 3 \u5206\u522b\u5c31\u662f A, B, C \u6746\uff09</p> <p></p> <p>\u95ee\u9898\u662f\u4ecd\u8981\u60f3\u529e\u6cd5\u5982\u4f55\u79fb\u52a8\u4e0a\u8fb9\u7684 4 \u4e2a\u76d8\u5b50\uff0c\u6211\u4eec\u53ef\u4ee5\u540c\u6837\u7684\u65b9\u5f0f\u6765\u79fb\u52a8\u4e0a\u8fb9\u7684 4 \u4e2a\u76d8\u5b50\uff0c\u8fd9\u5c31\u662f\u4e00\u79cd\u9012\u5f52\u7684\u89e3\u6cd5\u3002 \u7ed9\u5b9a n \u4e2a\u76d8\u5b50\u548c\u4e09\u4e2a\u6746\u5206\u522b\u662f \u6e90\u6746(Source), \u76ee\u6807\u6746(Destination)\uff0c\u548c\u4e2d\u4ecb\u6746(Intermediate)\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u5982\u4e0b\u9012\u5f52\u64cd\u4f5c\uff1a</p> <ul> <li>\u628a\u4e0a\u8fb9\u7684 n-1 \u4e2a\u76d8\u5b50\u4ece S \u79fb\u52a8\u5230 I\uff0c\u501f\u52a9 D \u6746</li> <li>\u628a\u6700\u5e95\u4e0b\u7684\u76d8\u5b50\u4ece S \u79fb\u52a8\u5230 D</li> <li>\u628a n-1 \u4e2a\u76d8\u5b50\u4ece I \u79fb\u52a8\u5230 D\uff0c\u501f\u52a9 S</li> </ul> <p>\u6211\u4eec\u628a\u5b83\u8f6c\u6362\u6210\u4ee3\u7801\uff1a</p> <pre><code>def hanoi_move(n, source, dest, intermediate):\n    if n &gt;= 1:  # \u9012\u5f52\u51fa\u53e3\uff0c\u53ea\u5269\u4e00\u4e2a\u76d8\u5b50\n        hanoi_move(n-1, source, intermediate, dest)\n        print(\"Move %s -&gt; %s\" % (source, dest))\n        hanoi_move(n-1, intermediate, dest, source)\nhanoi_move(3, 'A', 'C', 'B')\n\n# \u8f93\u51fa\uff0c\u5efa\u8bae\u4f60\u624b\u52a8\u6a21\u62df\u4e0b\u3002\u4e09\u4e2a\u76d8\u5b50 A(Source), B(intermediate), C(Destination)\n\"\"\"\nMove A -&gt; C\nMove A -&gt; B\nMove C -&gt; B\nMove A -&gt; C\nMove B -&gt; A\nMove B -&gt; C\nMove A -&gt; C\n\"\"\"\n</code></pre>  ![\u4e09\u4e2a\u76d8\u5b50\u7684\u6c49\u8bfa\u5854\u89e3\u6cd5](./hanoi.gif)  <p>\u662f\u4e0d\u662f\u5f88\u795e\u5947\uff0c\u4f46\u662f\u8001\u5b9e\u8bf4\u8fd9\u4e2a\u8fc7\u7a0b\u4ec5\u51ed\u5927\u8111\u7a7a\u60f3\u662f\u6bd4\u8f83\u96be\u4ee5\u60f3\u8c61\u51fa\u6765\u7684\u3002\u4eba\u7684\u5927\u8111\u300e\u6808\u300f\u6df1\u5ea6\u5f88\u6709\u9650\uff0c\u56e0\u4e3a\u4f60\u751a\u81f3\u90fd\u6ca1\u6cd5\u540c\u65f6\u8bb0\u4f4f\u8d85\u8fc7 8 \u4e2a\u4ee5\u4e0a\u7684 \u65e0\u610f\u4e49\u6570\u5b57\uff0c\u6240\u4ee5\u7528\u5927\u8111\u6a21\u62df\u4e0d\u5982\u7528\u7eb8\u7b14\u6765\u6a21\u62df\u4e0b\u3002\uff08\u4e0d\u6392\u9664\u6709\u4e9b\u806a\u660e\u7684\u540c\u5b66\u80fd\u8fc5\u901f\u5728\u8111\u74dc\u91cc\u5b8c\u6210\u8fd9\u4e2a\u8fc7\u7a0b\uff09</p>"},{"location":"10_%E9%80%92%E5%BD%92/recursion/#_7","title":"\u5ef6\u4f38\u9605\u8bfb","text":"<p>\u9012\u5f52\u662f\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u6982\u5ff5\uff0c\u6211\u4eec\u540e\u8fb9\u7684\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u4e2d\u8fd8\u4f1a\u591a\u6b21\u78b0\u5230\u5b83\uff0c\u6211\u5efa\u8bae\u4f60\u591a\u9605\u8bfb\u4e00\u4e9b\u8d44\u6599\u52a0\u6df1\u7406\u89e3\uff1a</p> <ul> <li>\u300a\u7b97\u6cd5\u56fe\u89e3\u300b\u7b2c\u4e09\u7ae0 \u9012\u5f52</li> <li>\u300aData Structures and Algorithms in Python\u300b \u7b2c 10 \u7ae0 Recursion</li> <li>\u300aPython\u5f00\u542f\u5c3e\u9012\u5f52\u4f18\u5316!\u300b</li> <li>\u5c3e\u8c03\u7528\u4f18\u5316</li> <li>\u6c49\u8bfa\u5854</li> </ul>"},{"location":"10_%E9%80%92%E5%BD%92/recursion/#_8","title":"\u601d\u8003\u9898","text":"<ul> <li>\u4f60\u80fd\u4e3e\u51fa\u5176\u4ed6\u4e00\u4e9b\u4f7f\u7528\u5230\u9012\u5f52\u7684\u4f8b\u5b50\u5417\uff1f</li> <li>\u5b9e\u73b0\u4e00\u4e2a flatten \u51fd\u6570\uff0c\u628a\u5d4c\u5957\u7684\u5217\u8868\u6241\u5e73\u5316\uff0c\u4f60\u9700\u8981\u7528\u9012\u5f52\u51fd\u6570\u6765\u5b9e\u73b0\u3002\u6bd4\u5982 [[1,2], [1,2,3] -&gt; [1,2,1,2,3]</li> <li>\u4f7f\u7528\u9012\u5f52\u548c\u5faa\u73af\u5404\u6709\u4ec0\u4e48\u4f18\u7f3a\u70b9\uff0c\u4f60\u80fd\u60f3\u5230\u5417\uff1f\u600e\u4e48\u628a\u4e00\u4e2a\u5c3e\u9012\u5f52\u7528\u8fed\u4ee3\u66ff\u6362\uff1f</li> <li>\u9012\u5f52\u6709\u65f6\u5019\u867d\u7136\u5f88\u4f18\u96c5\u76f4\u89c2\uff0c\u4f46\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u5374\u4e0d\u7406\u60f3\uff0c\u6bd4\u5982\u6590\u6ce2\u90a3\u5951\u6570\u5217\uff0c\u5b83\u7684\u8868\u8fbe\u5f0f\u662f F(n) = F(n-1) + F(n-2)\uff0c\u4f60\u80fd\u8ba1\u7b97\u5b83\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5417\uff1f\u8bf7\u4f60\u753b\u4e2a\u6811\u6765\u8868\u793a\u5b83\u7684\u8ba1\u7b97\u8fc7\u7a0b\uff0c\u4e3a\u4ec0\u4e48\u8fd9\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u5f88\u4e0d\u7406\u60f3\uff1f\u6211\u4eec\u600e\u6837\u53bb\u4f18\u5316\u5b83\u3002</li> <li>python \u5185\u7f6e\u7684 dict \u53ea\u80fd\u7528 dict['key'] \u7684\u5f62\u5f0f\u8bbf\u95ee\u6bd4\u8f83\u9ebb\u70e6\uff0c\u6211\u4eec\u60f3\u7528 dict.key \u7684\u5f62\u5f0f\u8bbf\u95ee\u3002tornado web \u6846\u67b6\u4e2d\u63d0\u4f9b\u4e86\u4e00\u4e2a ObjectDict\uff0c\u8bf7\u4f60\u5b9e\u73b0\u4e00\u4e2a\u9012\u5f52\u51fd\u6570\u63a5\u6536\u4e00\u4e2a\u5b57\u5178\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u53ef\u4ee5\u5d4c\u5957\u8bbf\u95ee\u7684 ObjectDict</li> </ul>"},{"location":"11_%E7%BA%BF%E6%80%A7%E6%9F%A5%E6%89%BE%E4%B8%8E%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/search/","title":"\u67e5\u627e","text":"<p>\u67e5\u627e\u53ef\u4ee5\u8bf4\u662f\u6211\u4eec\u4e1a\u52a1\u4ee3\u7801\u91cc\u7528\u5f97\u6700\u591a\u7684\u64cd\u4f5c\uff0c\u6bd4\u5982\u6211\u4eec\u7ecf\u5e38\u9700\u8981\u5728\u4e00\u4e2a\u5217\u8868\u91cc\u627e\u5230\u6211\u4eec\u9700\u8981\u7684\u4e00\u4e2a\u5143\u7d20\uff0c\u7136\u540e\u8fd4\u56de\u5b83\u7684\u4f4d\u7f6e\u3002 \u5176\u5b9e\u4e4b\u524d\u6211\u4eec\u4ecb\u7ecd\u7684\u54c8\u5e0c\u8868\u5c31\u662f\u975e\u5e38\u9ad8\u6548\u7387\u7684\u67e5\u627e\u6570\u636e\u7ed3\u6784\uff0c\u5f88\u660e\u663e\u5730\u5b83\u662f\u7528\u7a7a\u95f4\u6362\u65f6\u95f4\u3002\u8fd9\u4e00\u8282\u4ecb\u7ecd\u4e24\u4e2a\u57fa\u672c\u7684\u57fa\u4e8e\u7ebf\u6027\u7ed3\u6784\u7684\u67e5\u627e\u3002</p>"},{"location":"11_%E7%BA%BF%E6%80%A7%E6%9F%A5%E6%89%BE%E4%B8%8E%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/search/#_2","title":"\u7ebf\u6027\u67e5\u627e","text":"<p>\u7ebf\u6027\u67e5\u627e\u5c31\u662f\u4ece\u5934\u627e\u5230\u5c3e\uff0c\u76f4\u5230\u7b26\u5408\u6761\u4ef6\u4e86\u5c31\u8fd4\u56de\u3002\u6bd4\u5982\u5728\u4e00\u4e2a list \u4e2d\u627e\u5230\u4e00\u4e2a\u7b49\u4e8e 5 \u7684\u5143\u7d20\u5e76\u8fd4\u56de\u4e0b\u6807\uff1a</p> <p><pre><code>number_list = [0, 1, 2, 3, 4, 5, 6, 7]\n\n\ndef linear_search(value, iterable):\n    for index, val in enumerate(iterable):\n        if val == value:\n            return index\n    return -1\n\n\nassert linear_search(5, number_list) == 5\n</code></pre> \u662f\u4e0d\u662f so easy\u3002\u5f53\u7136\u6211\u4eec\u9700\u8981\u6765\u4e00\u70b9\u82b1\u6837\uff0c\u6bd4\u5982\u4f20\u4e00\u4e2a\u8c13\u8bcd\u8fdb\u53bb\uff0c\u4f60\u8981\u77e5\u9053\uff0c\u5728 python \u91cc\u4e00\u5207\u7686\u5bf9\u8c61\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u51fd\u6570\u5f53\u6210\u4e00\u4e2a\u53c2\u6570\u4f20\u7ed9\u53e6\u4e00\u4e2a\u51fd\u6570\u3002</p> <pre><code>def linear_search_v2(predicate, iterable):\n    for index, val in enumerate(iterable):\n        if predicate(val):\n            return index\n    return -1\n\n\nassert linear_search_v2(lambda x: x == 5, number_list) == 5\n</code></pre> <p>\u6548\u679c\u662f\u4e00\u6837\u7684\uff0c\u4f46\u662f\u4f20\u5165\u4e00\u4e2a\u8c13\u8bcd\u51fd\u6570\u8fdb\u53bb\u66f4\u7075\u6d3b\u4e00\u4e9b\uff0c\u6bd4\u5982\u6211\u4eec\u53ef\u4ee5\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u6216\u8005\u5c0f\u4e8e 5 \u7684\uff0c\u4ece\u800c\u63a7\u5236\u51fd\u6570\u7684\u884c\u4e3a\u3002 \u8fd8\u80fd\u73a9\u51fa\u4ec0\u4e48\u82b1\u6837\u5462\uff1f\u524d\u9762\u6211\u4eec\u521a\u5b66\u4e60\u4e86\u9012\u5f52\uff0c\u80fd\u4e0d\u80fd\u53d1\u6325\u81ea\u8650\u7cbe\u795e\u6ca1\u4e8b\u627e\u4e8b\u7528\u9012\u5f52\u6765\u5b9e\u73b0\u5462\uff1f</p> <p><pre><code>def linear_search_recusive(array, value):\n    if len(array) == 0:\n        return -1\n    index = len(array)-1\n    if array[index] == value:\n        return index\n    return linear_search_recusive(array[0:index], value)\n\n\nassert linear_search_recusive(number_list, 5) == 5\nassert linear_search_recusive(number_list, 8) == -1\nassert linear_search_recusive(number_list, 7) == 7\nassert linear_search_recusive(number_list, 0) == 0\n</code></pre> \u8fd9\u91cc\u7684 assert \u6211\u591a\u5199\u4e86\u51e0\u4e2a\uff0c\u5305\u62ec\u6b63\u5e38\u60c5\u51b5\u3001\u5f02\u5e38\u60c5\u51b5\u548c\u8fb9\u754c\u503c\u7b49\uff0c\u56e0\u4e3a\u9012\u5f52\u6bd4\u8f83\u5bb9\u6613\u51fa\u9519\u3002\u6ce8\u610f\u8fd9\u91cc\u7684\u4e24\u4e2a\u9012\u5f52\u51fa\u53e3\u3002 \u5f53\u7136\u4e1a\u52a1\u4ee3\u7801\u91cc\u5982\u679c\u78b0\u5230\u8fd9\u79cd\u95ee\u9898\u6211\u4eec\u80af\u5b9a\u662f\u9009\u4e0a\u8fb9\u6700\u76f4\u767d\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0\uff0c\u8981\u4e0d\u4f60\u7684\u540c\u4e8b\u80af\u5b9a\u60f3\u6253\u4f60\u3002</p>"},{"location":"11_%E7%BA%BF%E6%80%A7%E6%9F%A5%E6%89%BE%E4%B8%8E%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/search/#_3","title":"\u4e8c\u5206\u67e5\u627e","text":"<p>\u4e0a\u4e00\u5c0f\u8282\u8bf4\u7684\u7ebf\u6027\u67e5\u627e\u9488\u5bf9\u7684\u662f\u65e0\u5e8f\u5e8f\u5217\uff0c\u5047\u5982\u4e00\u4e2a\u5e8f\u5217\u5df2\u7ecf\u6709\u5e8f\u4e86\u5462\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u4ece\u5934\u627e\u5230\u5c3e\u5417\uff1f\u5f53\u7136\u4e0d\u7528\uff0c\u6298\u534a(\u4e8c\u5206)\u662f\u4e00\u79cd\u7ecf\u5178\u601d\u60f3\u3002\u65e5\u5e38\u751f\u6d3b\u4e2d\u8fd8\u6709\u54ea\u4e9b\u7ecf\u5178\u7684\u4e8c\u5206\u601d\u60f3\u5462\uff1f</p> <ul> <li>\u731c\u6570\u5b57\u6e38\u620f</li> <li>\u4e00\u5c3a\u4e4b\u68f0,\u65e5\u53d6\u5176\u534a,\u4e07\u4e16\u4e0d\u7aed</li> <li>\u6709\u4e9b\u6c11\u95f4\u80a1\u795e\uff0c\u544a\u8bc9\u4e00\u5806\u4eba\u67d0\u4e2a\u80a1\u7968\u4f1a\u6da8\uff0c\u544a\u8bc9\u53e6\u4e00\u534a\u4eba\u4f1a\u8dcc\u3002\u540e\u6765\u771f\u6da8\u4e86\uff0c\u6162\u6162\u53c8\u544a\u8bc9\u4fe1\u4e86\u4ed6\u7684\u4e00\u534a\u4eba\u53e6\u4e00\u4e2a\u80a1\u7968\u4f1a\u6da8\uff0c\u53e6\u4e00\u534a\u8bf4\u4f1a\u8dcc\u3002\u5c31\u8fd9\u6837\u97ed\u83dc\u591a\u4e86\u603b\u6709\u4e00\u4e9b\u4eba\u4fe1\u5949\u4ed6\u4e3a\u80a1\u795e\u3002\u3002\u3002</li> </ul> <p>\u5176\u5b9e\u4e4b\u524d\u5199\u8fc7\u535a\u5ba2\u300a\u62b1\u6b49\uff0c\u6211\u662f\u5f00\u53d1\uff0c\u4f60\u5c45\u7136\u8ba9\u6211\u5199\u5355\u6d4b[\u89c6\u9891]\u300b\u8bb2\u8fc7\u4e8c\u5206\u67e5\u627e\uff0c\u5f53\u65f6\u4e3b\u8981\u662f\u4e3a\u4e86\u5f15\u5165\u5355\u5143\u6d4b\u8bd5\u8fd9\u4e2a\u6982\u5ff5\u7684\uff0c\u56e0\u4e3a\u5f88\u591a\u4e0d\u6b63\u89c4\u7684\u9879\u76ee\u4ee3\u7801\u5f88\u7cd9\uff0c\u66f4\u522b\u8bf4\u5199\u5355\u6d4b\u4e86\u3002\u8fd9\u91cc\u6211\u5c31\u76f4\u63a5\u8d34\u4ee3\u7801\u5566</p> <pre><code>def binary_search(sorted_array, val):\n    if not sorted_array:\n        return -1\n\n    beg = 0\n    end = len(sorted_array) - 1\n\n    while beg &lt;= end:\n        mid = int((beg + end) / 2)  # beg + (end-beg)/2\uff0c \u4e3a\u4e86\u5c4f\u853d python 2/3 \u5dee\u5f02\u6211\u7528\u4e86\u5f3a\u8f6c\n        if sorted_array[mid] == val:\n            return mid\n        elif sorted_array[mid] &gt; val:\n            end = mid - 1\n        else:\n            beg = mid + 1\n    return -1\n\n\ndef test_binary_search():\n    a = list(range(10))\n\n    # \u6b63\u5e38\u503c\n    assert binary_search(a, 1) == 1\n    assert binary_search(a, -1) == -1\n\n    # \u5f02\u5e38\u503c\n    assert binary_search(None, 1) == -1\n\n    # \u8fb9\u754c\u503c\n    assert binary_search(a, 0) == 0\n</code></pre>"},{"location":"11_%E7%BA%BF%E6%80%A7%E6%9F%A5%E6%89%BE%E4%B8%8E%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/search/#_4","title":"\u601d\u8003\u9898","text":"<ul> <li>\u7ed9\u4f60\u4e2a\u6311\u6218\uff0c\u7528\u9012\u5f52\u6765\u5b9e\u73b0\u672c\u7ae0\u7684\u4e8c\u5206\u67e5\u627e\u3002\u4f60\u8981\u5341\u5206\u6ce8\u610f\u8fb9\u754c\u6761\u4ef6\uff0c\u6ce8\u610f\u7528\u5355\u6d4b\u6d4b\u8bd5\u5466\uff0c\u5728\u4f60\u5199\u4ee3\u7801\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u4f1a\u78b0\u5230\u8fb9\u754c\u95ee\u9898\u6216\u8005\u65e0\u7a77\u9012\u5f52\u7b49\u3002 \u5982\u679c\u4f60\u60f3\u4e0d\u8d77\u6765\uff0c\u53ef\u4ee5\u770b\u770b\u672c\u7ae0\u7684\u4ee3\u7801\u793a\u4f8b</li> <li>\u4e8c\u5206\u67e5\u627e\u6709\u4e00\u4e2a\u53d8\u5f62\uff0c\u6bd4\u5982\u6211\u4eec\u60f3\u5728\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4\u4e2d\u63d2\u5165\u4e00\u4e2a\u503c\u4e4b\u540e\uff0c\u6570\u7ec4\u4ecd\u4fdd\u6301\u6709\u5e8f\uff0c\u8bf7\u4f60\u627e\u51fa\u8fd9\u4e2a\u4f4d\u7f6e\u3002(bisect \u6a21\u5757)</li> </ul>"},{"location":"11_%E7%BA%BF%E6%80%A7%E6%9F%A5%E6%89%BE%E4%B8%8E%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/search/#_5","title":"\u5ef6\u4f38\u9605\u8bfb","text":"<p>\u8fd9\u91cc\u6ca1\u7ed9\u94fe\u63a5\uff0c\u8bf7\u5584\u7528 google \u7b49\u641c\u7d22\u5f15\u64ce\u548c Dash(mac) \u7b49\u6587\u6863\u67e5\u8be2\u5de5\u5177\uff0c\u5728\u4f60\u5b66\u4e60\u4ee3\u7801\u7684\u8fc7\u7a0b\u4e2d\u4f60\u4f1a\u975e\u5e38\u9891\u7e41\u5730\u4f7f\u7528\u5b83\u4eec\u3002 \u6216\u8005\u5982\u679c\u4f60\u6709\u65f6\u95f4\u4e5f\u53ef\u4ee5\u8df3\u8f6c\u5230\u8fd9\u4e9b\u6a21\u5757\u7684\u6e90\u7801\uff0c\u770b\u770b\u5b83\u4eec\u7684\u5b9e\u73b0\u65b9\u5f0f\u3002\u6807\u51c6\u5e93\u90fd\u662f\u4e9b\u9ad8\u624b\u5199\u7684\uff0c\u80af\u5b9a\u80fd\u5b66\u5230\u4e00\u4e9b\u59ff\u52bf\u3002</p> <ul> <li>\u9605\u8bfb python \u6587\u6863\u5173\u4e8e\u4e8c\u5206\u7684 bisect \u6a21\u5757\u3002</li> <li>\u9605\u8bfb python \u6587\u6863 itertools \u76f8\u5173\u6a21\u5757\u548c\u5e38\u89c1\u7684\u51e0\u4e2a\u51fd\u6570 takewhile, dropwhile, from_iterable, count, tee \u7b49\u7528\u6cd5</li> <li>\u6bcf\u4e2a\u7a0b\u5e8f\u5458\u90fd\u5e94\u8be5\u4f1a\u70b9\u5f62\u5f0f\u5316\u8bc1\u660e</li> </ul>"},{"location":"11_%E7%BA%BF%E6%80%A7%E6%9F%A5%E6%89%BE%E4%B8%8E%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/search/#leetcode","title":"Leetcode","text":"<p>\u627e\u65cb\u8f6c\u8fc7\u7684\u6392\u5e8f\u6570\u7ec4\u4e2d\u6700\u5c0f\u7684\u6570 find-minimum-in-rotated-sorted-array</p> <p>\u5df2\u6392\u5e8f\u7684\u6570\u7ec4\u4e2d\u627e\u5230\u7b2c\u4e00\u548c\u6700\u540e\u4e00\u4e2a\u5143\u7d20 find-first-and-last-position-of-element-in-sorted-array/</p>"},{"location":"12_%E5%9F%BA%E6%9C%AC%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/basic_sort/","title":"\u57fa\u672c\u6392\u5e8f\u7b97\u6cd5","text":"<p>\u4ece\u672c\u7ae0\u5f00\u59cb\u8bb2\u5e38\u89c1\u7684\u57fa\u4e8e\u6bd4\u8f83\u7684\u6392\u5e8f\u7b97\u6cd5\uff0c\u5148\u8bb2\u4e09\u4e2a\u7b80\u5355\u7684\u4f46\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u5374\u4e0d\u592a\u7406\u60f3\u7684\u6392\u5e8f\u7b97\u6cd5\uff0c\u5305\u62ec\u5192\u6ce1\u6392\u5e8f\u3001\u9009\u62e9\u6392\u5e8f\u548c\u63d2\u5165\u6392\u5e8f\u3002</p>"},{"location":"12_%E5%9F%BA%E6%9C%AC%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/basic_sort/#_2","title":"\u5192\u6ce1\u6392\u5e8f","text":"<p>bubble sort \u53ef\u4ee5\u8bf4\u662f\u6700\u7b80\u5355\u7684\u4e00\u79cd\u6392\u5e8f\u7b97\u6cd5\u4e86\uff0c\u5b83\u7684\u601d\u60f3\u5982\u4e0b\u3002\u5bf9\u4e00\u4e2a\u6570\u7ec4\u8fdb\u884c n-1 \u8f6e\u8fed\u4ee3\uff0c\u6bcf\u6b21\u6bd4\u8f83\u76f8\u90bb\u4e24\u4e2a\u5143\u7d20\uff0c \u5982\u679c\u76f8\u90bb\u7684\u5143\u7d20\u524d\u8005\u5927\u4e8e\u540e\u8005\uff0c\u5c31\u4ea4\u6362\u5b83\u4eec\u3002\u56e0\u4e3a\u76f4\u63a5\u5728\u5143\u7d20\u4e0a\u64cd\u4f5c\u800c\u4e0d\u662f\u8fd4\u56de\u65b0\u7684\u6570\u7ec4\uff0c\u6240\u4ee5\u662f\u4e00\u4e2a inplace \u7684\u64cd\u4f5c\u3002 \u8fd9\u91cc\u5192\u6ce1\u7684\u610f\u601d\u5176\u5b9e\u5c31\u662f\u6bcf\u4e00\u8f6e\u5192\u6ce1\u4e00\u4e2a\u6700\u5927\u7684\u5143\u7d20\u5c31\u4f1a\u901a\u8fc7\u4e0d\u65ad\u6bd4\u8f83\u548c\u4ea4\u6362\u76f8\u90bb\u5143\u7d20\u4f7f\u5b83\u8f6c\u79fb\u5230\u6700\u53f3\u8fb9\u3002</p> <p>\u4f60\u53ef\u4ee5\u60f3\u8c61\u5047\u5982\u6709 10 \u4e2a\u5c0f\u76c6\u53cb\u4ece\u5de6\u5230\u53f3\u7ad9\u6210\u4e00\u6392\uff0c\u4e2a\u5934\u4e0d\u7b49\u3002\u8001\u5e08\u60f3\u8ba9\u4ed6\u4eec\u6309\u7167\u4e2a\u5934\u4ece\u4f4e\u5230\u9ad8\u7ad9\u597d\uff0c\u4e8e\u662f\u4ed6\u5f00\u59cb\u558a\u53e3\u53f7\u3002 \u6bcf\u558a\u4e00\u6b21\uff0c\u4ece\u7b2c\u4e00\u4e2a\u5c0f\u76c6\u53cb\u5f00\u59cb\uff0c\u76f8\u90bb\u7684\u5c0f\u670b\u53cb\u5982\u679c\u8eab\u9ad8\u4e0d\u662f\u6b63\u5e8f\u5c31\u4f1a\u4e24\u4e24\u8c03\u6362\uff0c\u5c31\u8fd9\u6837\u7b2c\u4e00\u8f6e\u4e2a\u5934\u6700\u9ad8\u7684\u6392\u5230\u4e86\u6700\u53f3\u8fb9\u3002(\u5192\u6ce1\u5230\u6700\u53f3\u8fb9) \u7b2c\u4e8c\u8f6e\u4f9d\u6b21\u8fd9\u4e48\u6765\uff0c\u4ece\u7b2c\u4e00\u4e2a\u5c0f\u670b\u53cb\u5f00\u59cb\u4e24\u4e24\u4ea4\u6362\uff0c\u8fd9\u6837\u6b21\u9ad8\u7684\u5c0f\u76c6\u53cb\u53c8\u6392\u5230\u4e86\u5012\u6570\u7b2c\u4e8c\u4e2a\u4f4d\u7f6e\u3002\u4f9d\u6b21\u7c7b\u63a8\u3002</p> <p>\u6211\u4eec\u5728\u89c6\u9891\u91cc\u624b\u52a8\u6a21\u62df\u4e0b\u5b83\u7684\u8fc7\u7a0b\u3002</p> <pre><code>import random\n\n\ndef bubble_sort(seq):  # O(n^2), n(n-1)/2 = 1/2(n^2 + n)\n    n = len(seq)\n    for i in range(n-1):\n        print(seq)    # \u6211\u6253\u5370\u51fa\u6765\u8ba9\u4f60\u770b\u6e05\u695a\u6bcf\u4e00\u8f6e\u6700\u9ad8\u3001\u6b21\u9ad8\u3001\u6b21\u6b21\u9ad8...\u7684\u5c0f\u670b\u53cb\u4f1a\u5192\u6ce1\u5230\u53f3\u8fb9\n        for j in range(n-1-i):  # \u8fd9\u91cc\u4e4b\u6240\u4ee5 n-1 \u8fd8\u9700\u8981 \u51cf\u53bb i \u662f\u56e0\u4e3a\u6bcf\u4e00\u8f6e\u5192\u6ce1\u6700\u5927\u7684\u5143\u7d20\u90fd\u4f1a\u5192\u6ce1\u5230\u6700\u540e\uff0c\u65e0\u9700\u518d\u6bd4\u8f83\n            if seq[j] &gt; seq[j+1]:\n                seq[j], seq[j+1] = seq[j+1], seq[j]\n    print(seq)\n\n\ndef test_bubble_sort():\n    seq = list(range(10))  # \u6ce8\u610f python3 \u8fd4\u56de\u8fed\u4ee3\u5668\uff0c\u6240\u4ee5\u6211\u90fd\u7528 list \u5f3a\u8f6c\u4e86\uff0cpython2 range \u8fd4\u56de\u7684\u5c31\u662f list\n    random.shuffle(seq)   # shuffle inplace \u64cd\u4f5c\uff0c\u6253\u4e71\u6570\u7ec4\n    bubble_sort(seq)\n    assert seq == sorted(seq)  # \u6ce8\u610f\u5466\uff0c\u5185\u7f6e\u7684 sorted \u5c31\u4e0d\u662f inplace \u7684\uff0c\u5b83\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u6570\u7ec4\uff0c\u4e0d\u5f71\u54cd\u4f20\u5165\u7684\u53c2\u6570\n\n\"\"\" \u6211\u6253\u5370\u51fa\u6765\u8ba9\u4f60\u770b\u5230\u6bcf\u6b21\u4ece\u6700\u9ad8\u5230\u6b21\u9ad8\u7684\u5c0f\u76c6\u53cb\u5c31\u8fd9\u4e48\u6392\u597d\u5e8f\u4e86\uff0c\u56e0\u4e3a\u662f\u968f\u673a\u6570\uff0c\u4f60\u7b2c\u4e00\u4e2a\u6ca1\u6709\u6392\u5e8f\u7684\u6570\u7ec4\u5e94\u8be5\u548c\u6211\u7684\u4e0d\u4e00\u6837\n[3, 4, 5, 0, 9, 1, 7, 8, 6, 2]\n[3, 4, 0, 5, 1, 7, 8, 6, 2, 9]\n[3, 0, 4, 1, 5, 7, 6, 2, 8, 9]\n[0, 3, 1, 4, 5, 6, 2, 7, 8, 9]\n[0, 1, 3, 4, 5, 2, 6, 7, 8, 9]\n[0, 1, 3, 4, 2, 5, 6, 7, 8, 9]\n[0, 1, 3, 2, 4, 5, 6, 7, 8, 9]\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\"\"\"\n</code></pre>"},{"location":"12_%E5%9F%BA%E6%9C%AC%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/basic_sort/#_3","title":"\u9009\u62e9\u6392\u5e8f","text":"<p>\u521a\u624d\u770b\u5230\u5192\u6ce1\u662f\u6bcf\u8f6e\u8fed\u4ee3\u4e2d\uff0c\u5982\u679c\u76f8\u90bb\u7684\u4e24\u4e2a\u5143\u7d20\u524d\u8005\u5927\u4e8e\u540e\u8005\u4e86\u5c31\u4ea4\u6362\u4e24\u4e2a\u76f8\u90bb\u5143\u7d20(\u5047\u8bbe\u6b63\u5e8f\u6392\u5e8f)\u3002\u5176\u5b9e\u8fd8\u6709\u4e00\u79cd\u601d\u8def\u5c31\u662f\uff0c \u6bcf\u6b21\u6211\u4eec\u627e\u5230\u6700\u5c0f\u7684\u5143\u7d20\u63d2\u5165\u8fed\u4ee3\u7684\u8d77\u59cb\u4f4d\u7f6e\uff0c\u8fd9\u6837\u6bcf\u4e2a\u4f4d\u7f6e\u4ece\u5b83\u81ea\u5df1\u7684\u4f4d\u7f6e\u5f00\u59cb\u5b83\u5c31\u662f\u6700\u5c0f\u7684\u4e86\uff0c\u4e00\u5708\u4e0b\u6765\u6570\u7ec4\u5c31\u6709\u5e8f\u4e86\u3002 \u9009\u62e9\u53ef\u4ee5\u7406\u89e3\u4e3a \u4e00\u4e2a 0 \u5230 n-1 \u7684\u8fed\u4ee3\uff0c\u6bcf\u6b21\u5411\u540e\u67e5\u627e\u9009\u62e9\u4e00\u4e2a\u6700\u5c0f\u7684\u5143\u7d20\u3002</p> <p>\u540c\u6837\u5c0f\u76c6\u53cb\u53c8\u6765\u5566\uff0c\u8fd9\u6b21\u6211\u4eec\u4ece\u7b2c\u4e00\u4e2a\u5f00\u59cb\uff0c\u4ece\u5934\u5230\u5c3e\u627e\u4e00\u4e2a\u4e2a\u5934\u6700\u5c0f\u7684\u5c0f\u76c6\u53cb\uff0c\u7136\u540e\u628a\u5b83\u548c\u7b2c\u4e00\u4e2a\u5c0f\u76c6\u53cb\u4ea4\u6362\u3002 \u7136\u540e\u4ece\u7b2c\u4e8c\u4e2a\u5c0f\u76c6\u53cb\u5f00\u59cb\u91c7\u53d6\u540c\u6837\u7684\u7b56\u7565\uff0c\u8fd9\u6837\u4e00\u5708\u4e0b\u6765\u5c0f\u76c6\u53cb\u5c31\u6709\u5e8f\u4e86\u3002</p> <pre><code>def select_sort(seq):\n    n = len(seq)\n    for i in range(n-1):\n        min_idx = i    # \u6211\u4eec\u5047\u8bbe\u5f53\u524d\u4e0b\u6807\u7684\u5143\u7d20\u662f\u6700\u5c0f\u7684\n        for j in range(i+1, n):    # \u4ece i \u7684\u540e\u8fb9\u5f00\u59cb\u627e\u5230\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u5f97\u5230\u5b83\u7684\u4e0b\u6807\n            if seq[j] &lt; seq[min_idx]:\n                min_idx = j    # \u4e00\u4e2a j \u5faa\u73af\u4e0b\u6765\u4e4b\u540e\u5c31\u627e\u5230\u4e86\u6700\u5c0f\u7684\u5143\u7d20\u5b83\u7684\u4e0b\u6807\n        if min_idx != i:    # swap\n            seq[i], seq[min_idx] = seq[min_idx], seq[i]\n\n\ndef test_select_sort():\n    seq = list(range(10))\n    random.shuffle(seq)\n    select_sort(seq)\n    assert seq == sorted(seq)\n\n\"\"\"\n[4, 7, 5, 3, 6, 0, 2, 9, 8, 1]\n[0, 7, 5, 3, 6, 4, 2, 9, 8, 1]\n[0, 1, 5, 3, 6, 4, 2, 9, 8, 7]\n[0, 1, 2, 3, 6, 4, 5, 9, 8, 7]\n[0, 1, 2, 3, 6, 4, 5, 9, 8, 7]\n[0, 1, 2, 3, 4, 6, 5, 9, 8, 7]\n[0, 1, 2, 3, 4, 5, 6, 9, 8, 7]\n[0, 1, 2, 3, 4, 5, 6, 9, 8, 7]\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\"\"\"\n</code></pre>"},{"location":"12_%E5%9F%BA%E6%9C%AC%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/basic_sort/#_4","title":"\u63d2\u5165\u6392\u5e8f","text":"<p>\u63d2\u5165\u6392\u5e8f\u5f88\u591a\u6559\u79d1\u4e66\u90fd\u662f\u7528\u6251\u514b\u724c\u7684\u4f8b\u5b50\u8bb2\u7684\uff0c\u60f3\u8c61\u4f60\u624b\u91cc\u6709\u4e00\u4e9b\u6251\u514b\u724c\uff0c\u5b83\u4eec\u987a\u5e8f\u662f\u6563\u4e71\u7684\uff0c\u73b0\u5728\u9700\u8981\u4f60\u628a\u5b83\u4eec\u6574\u7406\u6210\u6709\u5e8f\u7684\uff0c\u4f60\u4f1a\u600e\u4e48\u505a\u5462\uff1f \u9996\u5148\u62ff\u6700\u9876\u4e0a\u7684\u4e00\u5f20\uff0c\u7136\u540e\u62ff\u7b2c\u4e8c\u5f20\uff0c\u7b2c\u4e8c\u5f20\u70b9\u6570\u5927\uff0c\u4f60\u5c31\u628a\u7b2c\u4e8c\u5f20\u653e\u5728\u7b2c\u4e00\u5f20\u7684\u4e0b\u8fb9\uff0c\u5426\u5219\u653e\u5728\u7b2c\u4e00\u5f20\u4e0a\u8fb9\u3002 \u5f53\u4f60\u62ff\u7b2c\u4e09\u5f20\u7684\u65f6\u5019\uff0c\u4f60\u540c\u6837\u4f1a\u627e\u5230\u9002\u5408\u5b83\u5927\u5c0f\u7684\u4f4d\u7f6e\u63d2\u5165\u8fdb\u53bb\u3002</p> <p>\u6362\u6210\u5c0f\u670b\u53cb\u4e00\u6837\uff0c\u7b2c\u4e00\u4e2a\u5c0f\u76c6\u53cb\u53ea\u6709\u4e00\u4e2a\u4eba\u6211\u4eec\u5047\u8bbe\u662f\u6709\u5e8f\u7684\uff0c\u7136\u540e\u7b2c\u4e8c\u4e2a\u5c0f\u76c6\u53cb\u4f1a\u8ddf\u7b2c\u4e00\u4e2a\u6bd4\uff0c\u5982\u679c\u7b2c\u4e00\u4e2a\u9ad8\u5c31\u4ea4\u6362\u4f4d\u7f6e\u3002 \u63a5\u4e0b\u6765\u7b2c\u4e09\u4e2a\u5c0f\u76c6\u53cb\u4ece\u7b2c\u4e8c\u4e2a\u4f4d\u7f6e\u5f00\u59cb\u6bd4\u8f83\uff0c\u5982\u679c\u6ca1\u7b2c\u4e8c\u4e2a\u9ad8\u5c31\u4ea4\u6362\u4f4d\u7f6e\uff0c\u7136\u540e\u6ca1\u7b2c\u4e00\u4e2a\u9ad8\u4e5f\u4ea4\u6362\u4f4d\u7f6e\uff0c\u4fdd\u6301\u524d\u8fb9\u4e09\u4e2a\u5c0f\u76c6\u53cb\u8eab\u9ad8\u6709\u5e8f\u5c31\u597d\u3002 \u4f9d\u6b21\u7c7b\u63a8\uff0c\u7b49\u5230\u6700\u540e\u4e00\u4e2a\u5c0f\u76c6\u53cb\u4e5f\u8f6c\u79fb\u5230\u5408\u9002\u7684\u4f4d\u7f6e\uff0c\u6574\u4e2a\u961f\u5217\u5c31\u662f\u6709\u5e8f\u7684\u4e86\u3002</p> <p>\u63d2\u5165\u6392\u5e8f\u5c31\u662f\u8fd9\u4e2a\u9053\u7406, \u6bcf\u6b21\u6311\u9009\u4e0b\u4e00\u4e2a\u5143\u7d20\u63d2\u5165\u5df2\u7ecf\u6392\u5e8f\u7684\u6570\u7ec4\u4e2d,\u521d\u59cb\u65f6\u5df2\u6392\u5e8f\u6570\u7ec4\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u3002\u6211\u4eec\u5c31\u76f4\u63a5\u4e0a\u4ee3\u7801\u5427\u3002</p> <pre><code>def insertion_sort(seq):\n    \"\"\" \u6bcf\u6b21\u6311\u9009\u4e0b\u4e00\u4e2a\u5143\u7d20\u63d2\u5165\u5df2\u7ecf\u6392\u5e8f\u7684\u6570\u7ec4\u4e2d,\u521d\u59cb\u65f6\u5df2\u6392\u5e8f\u6570\u7ec4\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\"\"\"\n    n = len(seq)\n    print(seq)\n    for i in range(1, n):\n        value = seq[i]    # \u4fdd\u5b58\u5f53\u524d\u4f4d\u7f6e\u7684\u503c\uff0c\u56e0\u4e3a\u8f6c\u79fb\u7684\u8fc7\u7a0b\u4e2d\u5b83\u7684\u4f4d\u7f6e\u53ef\u80fd\u88ab\u8986\u76d6\n        # \u627e\u5230\u8fd9\u4e2a\u503c\u7684\u5408\u9002\u4f4d\u7f6e\uff0c\u4f7f\u5f97\u524d\u8fb9\u7684\u6570\u7ec4\u6709\u5e8f [0,i] \u6709\u5e8f\n        pos = i\n        while pos &gt; 0 and value &lt; seq[pos-1]:\n            seq[pos] = seq[pos-1]  # \u5982\u679c\u524d\u8fb9\u7684\u5143\u7d20\u6bd4\u5b83\u5927\uff0c\u5c31\u8ba9\u5b83\u4e00\u76f4\u524d\u79fb\n            pos -= 1\n        seq[pos] = value    # \u627e\u5230\u4e86\u5408\u9002\u7684\u4f4d\u7f6e\u8d4b\u503c\u5c31\u597d\n        print(seq)\n\n\n\"\"\" \u4e0d\u65ad\u628a\u65b0\u5143\u7d20\u653e\u5230\u5df2\u7ecf\u6709\u5e8f\u7684\u6570\u7ec4\u4e2d\n[1, 7, 3, 0, 9, 4, 8, 2, 6, 5]\n[1, 7, 3, 0, 9, 4, 8, 2, 6, 5]\n[1, 3, 7, 0, 9, 4, 8, 2, 6, 5]\n[0, 1, 3, 7, 9, 4, 8, 2, 6, 5]\n[0, 1, 3, 7, 9, 4, 8, 2, 6, 5]\n[0, 1, 3, 4, 7, 9, 8, 2, 6, 5]\n[0, 1, 3, 4, 7, 8, 9, 2, 6, 5]\n[0, 1, 2, 3, 4, 7, 8, 9, 6, 5]\n[0, 1, 2, 3, 4, 6, 7, 8, 9, 5]\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\"\"\"\n</code></pre>"},{"location":"12_%E5%9F%BA%E6%9C%AC%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/basic_sort/#_5","title":"\u601d\u8003\u9898","text":"<ul> <li>\u672c\u7ae0\u4ecb\u7ecd\u7684\u51e0\u4e2a\u6392\u5e8f\u7b97\u6cd5\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u591a\u5c11\uff1f</li> <li>\u8bf7\u4f60\u8865\u5145\u63d2\u5165\u6392\u5e8f\u7684\u5355\u5143\u6d4b\u8bd5\u4ee3\u7801</li> </ul>"},{"location":"12_%E5%9F%BA%E6%9C%AC%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/basic_sort/#_6","title":"\u5ef6\u4f38\u9605\u8bfb","text":"<ul> <li>\u300aData Structures and Algorithms in Python\u300b\u7b2c5\u7ae0</li> </ul>"},{"location":"13_%E9%AB%98%E7%BA%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/advanced_sorting/","title":"\u9ad8\u7ea7\u6392\u5e8f\u7b97\u6cd5","text":"<p>\u672c\u7ae0\u5f00\u59cb\u8bb2\u51e0\u4e2a\u9ad8\u7ea7\u4e00\u4e9b\u7684\u6392\u5e8f\u7b97\u6cd5\uff0c\u56e0\u4e3a\u6d89\u53ca\u5230\u5206\u6cbb\u3001\u9012\u5f52\u548c\u4e00\u4e9b\u9ad8\u7ea7\u6570\u636e\u7ed3\u6784\u7b49\uff0c\u6240\u4ee5\u6bd4\u524d\u4e00\u7ae0\u8282\u7684\u57fa\u672c\u6392\u5e8f\u8981\u7a0d\u5fae\u96be\u7406\u89e3\u4e00\u4e9b\u3002\u5305\u62ec\uff1a</p> <ul> <li>\u5206\u6cbb\u6cd5\u4e0e\u5f52\u5e76\u6392\u5e8f</li> <li>\u5feb\u901f\u6392\u5e8f</li> </ul> <p>\u5728\u8bb2\u5b8c\u4e8c\u53c9\u6811\u4e4b\u540e\uff0c\u6211\u4eec\u4f1a\u770b\u4e0b\u5b83\u7684\u5e94\u7528\uff1a</p> <ul> <li>\u5806\u548c\u5806\u6392\u5e8f</li> </ul>"},{"location":"13_%E9%AB%98%E7%BA%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/merge_sort/","title":"\u5206\u6cbb\u6cd5 (Divide and Conquer)","text":"<p>\u5f88\u591a\u6709\u7528\u7684\u7b97\u6cd5\u7ed3\u6784\u4e0a\u662f\u9012\u5f52\u7684\uff0c\u4e3a\u4e86\u89e3\u51b3\u4e00\u4e2a\u7279\u5b9a\u95ee\u9898\uff0c\u7b97\u6cd5\u4e00\u6b21\u6216\u8005\u591a\u6b21\u9012\u5f52\u8c03\u7528\u5176\u81ea\u8eab\u4ee5\u89e3\u51b3\u82e5\u5e72\u5b50\u95ee\u9898\u3002 \u8fd9\u4e9b\u7b97\u6cd5\u5178\u578b\u5730\u9075\u5faa\u5206\u6cbb\u6cd5\u7684\u601d\u60f3\uff1a\u5c06\u539f\u95ee\u9898\u5206\u89e3\u4e3a\u51e0\u4e2a\u89c4\u6a21\u8f83\u5c0f\u4f46\u662f\u7c7b\u4f3c\u4e8e\u539f\u95ee\u9898\u7684\u5b50\u95ee\u9898\uff0c\u9012\u5f52\u6c42\u89e3\u8fd9\u4e9b\u5b50\u95ee\u9898\uff0c \u7136\u540e\u518d\u5408\u5e76\u8fd9\u4e9b\u95ee\u9898\u7684\u89e3\u6765\u5efa\u7acb\u539f\u95ee\u9898\u7684\u89e3\u3002</p> <p>\u5206\u6cbb\u6cd5\u5728\u6bcf\u5c42\u9012\u5f52\u65f6\u6709\u4e09\u4e2a\u6b65\u9aa4\uff1a</p> <ul> <li>\u5206\u89e3\u539f\u95ee\u9898\u4e3a\u82e5\u5e72\u5b50\u95ee\u9898\uff0c\u8fd9\u4e9b\u5b50\u95ee\u9898\u662f\u539f\u95ee\u9898\u7684\u89c4\u6a21\u6700\u5c0f\u7684\u5b9e\u4f8b</li> <li>\u89e3\u51b3\u8fd9\u4e9b\u5b50\u95ee\u9898\uff0c\u9012\u5f52\u5730\u6c42\u89e3\u8fd9\u4e9b\u5b50\u95ee\u9898\u3002\u5f53\u5b50\u95ee\u9898\u7684\u89c4\u6a21\u8db3\u591f\u5c0f\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u6c42\u89e3</li> <li>\u5408\u5e76\u8fd9\u4e9b\u5b50\u95ee\u9898\u7684\u89e3\u6210\u539f\u95ee\u9898\u7684\u89e3</li> </ul>"},{"location":"13_%E9%AB%98%E7%BA%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/merge_sort/#_1","title":"\u5f52\u5e76\u6392\u5e8f","text":"<p>\u73b0\u5728\u6211\u4eec\u5c31\u6765\u770b\u4e0b\u5f52\u5e76\u6392\u5e8f\u662f\u662f\u5982\u4f55\u5229\u7528\u5206\u6cbb\u6cd5\u89e3\u51b3\u95ee\u9898\u7684\u3002</p> <ul> <li>\u5206\u89e3\uff1a\u5c06\u5f85\u6392\u5e8f\u7684 n \u4e2a\u5143\u7d20\u5206\u6210\u5404\u5305\u542b n/2 \u4e2a\u5143\u7d20\u7684\u5b50\u5e8f\u5217</li> <li>\u89e3\u51b3\uff1a\u4f7f\u7528\u5f52\u5e76\u6392\u5e8f\u9012\u5f52\u6392\u5e8f\u4e24\u4e2a\u5b50\u5e8f\u5217</li> <li>\u5408\u5e76\uff1a\u5408\u5e76\u4e24\u4e2a\u5df2\u7ecf\u6392\u5e8f\u7684\u5b50\u5e8f\u5217\u4ee5\u4ea7\u751f\u5df2\u6392\u5e8f\u7684\u7b54\u6848</li> </ul> <p>\u8003\u8651\u6211\u4eec\u6392\u5e8f\u8fd9\u4e2a\u6570\u7ec4\uff1a[10,23,51,18,4,31,13,5] \uff0c\u6211\u4eec\u9012\u5f52\u5730\u5c06\u6570\u7ec4\u8fdb\u884c\u5206\u89e3</p> <p></p> <p>\u5f53\u6570\u7ec4\u88ab\u5b8c\u5168\u5206\u9694\u6210\u53ea\u6709\u5355\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\u65f6\uff0c\u6211\u4eec\u9700\u8981\u628a\u5b83\u4eec\u5408\u5e76\u56de\u53bb\uff0c\u6bcf\u6b21\u4e24\u4e24\u5408\u5e76\u6210\u4e00\u4e2a\u6709\u5e8f\u7684\u5e8f\u5217\u3002</p> <p></p> <p>\u7528\u9012\u5f52\u4ee3\u7801\u6765\u63cf\u8ff0\u8fd9\u4e2a\u95ee\u9898\uff1a</p> <pre><code>def merge_sort(seq):\n    if len(seq) &lt;= 1:   # \u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u662f\u9012\u5f52\u51fa\u53e3\n        return seq\n    else:\n        mid = int(len(seq)/2)\n        left_half = merge_sort(seq[:mid])\n        right_half = merge_sort(seq[mid:])\n\n        # \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u7684\u6570\u7ec4\n        new_seq = merge_sorted_list(left_half, right_half)\n        return new_seq\n</code></pre> <p>\u6ce8\u610f\u6211\u4eec\u8fd9\u91cc\u6709\u4e00\u4e2a\u51fd\u6570\u6ca1\u5b9e\u73b0\uff0c\u5c31\u662f\u5982\u4f55\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4 merge_sorted_list\u3002\u5176\u5b9e\u4f60\u5728\u7eb8\u4e0a\u753b\u4e00\u753b\uff0c \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u5e76\u4e0d\u96be\u5b9e\u73b0\u3002</p> <p></p> <p></p> <pre><code>def merge_sorted_list(sorted_a, sorted_b):\n    \"\"\" \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u5e8f\u5217\uff0c\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u6709\u5e8f\u5e8f\u5217\n\n    :param sorted_a:\n    :param sorted_b:\n    \"\"\"\n    length_a, length_b = len(sorted_a), len(sorted_b)\n    a = b = 0\n    new_sorted_seq = list()\n\n    while a &lt; length_a and b &lt; length_b:\n        if sorted_a[a] &lt; sorted_b[b]:\n            new_sorted_seq.append(sorted_a[a])\n            a += 1\n        else:\n            new_sorted_seq.append(sorted_b[b])\n            b += 1\n\n    # \u6700\u540e\u522b\u5fd8\u8bb0\u628a\u591a\u4f59\u7684\u90fd\u653e\u5230\u6709\u5e8f\u6570\u7ec4\u91cc\n    if a &lt; length_a:\n        new_sorted_seq.extend(sorted_a[a:])\n    else:\n        new_sorted_seq.extend(sorted_b[b:])\n\n    return new_sorted_seq\n</code></pre> <p>\u8fd9\u6837\u5c31\u5b9e\u73b0\u4e86\u5f52\u5e76\u6392\u5e8f\uff0c\u5e76\u4e14\u4f60\u4f1a\u53d1\u73b0\u5b83\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u6570\u7ec4\u800c\u4e0d\u662f\u4fee\u6539\u539f\u6709\u6570\u7ec4\u3002</p>"},{"location":"13_%E9%AB%98%E7%BA%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/merge_sort/#_2","title":"\u65f6\u95f4\u590d\u6742\u5ea6","text":"<p>\u6211\u4eec\u6765\u7b80\u5355\u770b\u4e0b\u5b83\u5f52\u5e76\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u5047\u8bbe\u6392\u5e8f n \u4e2a\u6570\u5b57\u65f6\u95f4\u590d\u6742\u5ea6\u662f T(n)\uff0c\u8fd9\u91cc\u4e3a\u4e86\u65b9\u4fbf\u5047\u8bbe n \u662f 2 \u7684\u5e42</p> <p>  = 1} \\ 2T(n/2)+cn, &amp; \\text{if  &gt; 1} \\end{cases} \\end{align} </p> <p></p> <p>\u603b\u7684\u4ee3\u4ef7\u662f  \uff0c\u5ffd\u7565\u5e38\u6570\u9879\u53ef\u4ee5\u8ba4\u4e3a\u662f  O(nlg(n))\u3002\u5982\u679c\u8fd9\u4e2a\u56fe\u770b\u4e0d\u61c2\uff0c\u6211\u4eec\u81ea\u5df1\u6c42\u89e3\u4e0b\u4e5f\u4e0d\u96be\uff0c\u9996\u5148\u6211\u4eec\u7b80\u5316\u4e00\u4e0b\uff0c \u628a\u5e38\u6570\u7cfb\u6570\u5f53\u6210 1\uff0c\u5f97\u5230\u4ee5\u4e0b\u9012\u5f52\u5f0f\uff1a</p> <p>  = 1} \\ 2T(n/2)+n, &amp; \\text{if  &gt; 1} \\end{cases} \\end{align} </p> <p></p>"},{"location":"13_%E9%AB%98%E7%BA%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/merge_sort/#_3","title":"\u601d\u8003\u9898","text":"<ul> <li>\u8bf7\u4f60\u5b8c\u6210\u5f52\u5e76\u6392\u5e8f\u7684\u5355\u5143\u6d4b\u8bd5</li> <li>\u8fd9\u91cc\u5b9e\u73b0\u7684\u5f52\u5e76\u6392\u5e8f\u662f inplace \u7684\u5417\uff1f</li> <li>\u5f52\u5e76\u6392\u5e8f\u662f\u7a33\u5b9a\u7684\u5417\uff1f\u7a33\u5b9a\u6307\u7684\u662f\u6392\u5e8f\u524d\u540e\u76f8\u540c\u5927\u5c0f\u7684\u6570\u5b57\u4f9d\u7136\u4fdd\u6301\u76f8\u5bf9\u987a\u5e8f\u3002</li> </ul>"},{"location":"13_%E9%AB%98%E7%BA%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/merge_sort/#_4","title":"\u5ef6\u4f38\u9605\u8bfb","text":"<ul> <li>\u300a\u7b97\u6cd5\u5bfc\u8bba\u300b\u7b2c 2 \u7ae0\u548c\u7b2c 4 \u7ae0\uff0c\u4f60\u9700\u8981\u4e86\u89e3\u4e0b\u300e\u4e3b\u5b9a\u7406\u300f\uff0c\u4ee5\u53ca\u5982\u4f55\u6c42\u89e3\u5f62\u5982  \u7684\u9012\u5f52\u5f0f\u590d\u6742\u5ea6</li> <li>\u4e86\u89e3\u7b97\u6cd5\u5bfc\u8bba\u4e0a\u9012\u5f52\u5f0f\u7684\u4e09\u79cd\u6c42\u89e3\u65b9\u6cd5\uff1a\u4ee3\u5165\u6cd5\uff0c\u9012\u5f52\u6811\u6cd5\uff0c\u4e3b\u65b9\u6cd5</li> </ul>"},{"location":"13_%E9%AB%98%E7%BA%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/quick_sort/","title":"\u5feb\u901f\u6392\u5e8f","text":"<p>\u5feb\u901f\u6392\u5e8f\u540d\u5b57\u53ef\u4e0d\u662f\u76d6\u7684\uff0c\u5f88\u591a\u7a0b\u5e8f\u8bed\u8a00\u6807\u51c6\u5e93\u5b9e\u73b0\u7684\u5185\u7f6e\u6392\u5e8f\u90fd\u6709\u5b83\u7684\u8eab\u5f71\uff0c\u6211\u4eec\u5c31\u76f4\u5954\u4e3b\u9898\u5427\u3002 \u548c\u5f52\u5e76\u6392\u5e8f\u4e00\u6837\uff0c\u5feb\u6392\u4e5f\u662f\u4e00\u79cd\u5206\u800c\u6cbb\u4e4b(divide and conquer)\u7684\u7b56\u7565\u3002\u5f52\u5e76\u6392\u5e8f\u628a\u6570\u7ec4\u9012\u5f52\u6210\u53ea\u6709\u5355\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\uff0c\u4e4b\u540e\u518d\u4e0d\u65ad\u4e24\u4e24 \u5408\u5e76\uff0c\u6700\u540e\u5f97\u5230\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4\u3002\u8fd9\u91cc\u7684\u9012\u5f52\u57fa\u672c\u6761\u4ef6\u5c31\u662f\u53ea\u5305\u542b\u4e00\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\uff0c\u5f53\u6570\u7ec4\u53ea\u5305\u542b\u4e00\u4e2a\u5143\u7d20\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\u5b83\u672c\u6765\u5c31\u662f\u6709\u5e8f\u7684\uff08\u5f53\u7136\u7a7a\u6570\u7ec4\u4e5f\u4e0d\u7528\u6392\u5e8f\uff09\u3002</p> <p>\u5feb\u6392\u7684\u5de5\u4f5c\u8fc7\u7a0b\u5176\u5b9e\u6bd4\u8f83\u7b80\u5355\uff0c\u4e09\u6b65\u8d70\uff1a</p> <ul> <li> <p>\u9009\u62e9\u57fa\u51c6\u503c pivot \u5c06\u6570\u7ec4\u5206\u6210\u4e24\u4e2a\u5b50\u6570\u7ec4\uff1a\u5c0f\u4e8e\u57fa\u51c6\u503c\u7684\u5143\u7d20\u548c\u5927\u4e8e\u57fa\u51c6\u503c\u7684\u5143\u7d20\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4e4b\u4e3a partition</p> </li> <li> <p>\u5bf9\u8fd9\u4e24\u4e2a\u5b50\u6570\u7ec4\u8fdb\u884c\u5feb\u901f\u6392\u5e8f\u3002</p> </li> <li> <p>\u5408\u5e76\u7ed3\u679c</p> </li> </ul> <p></p> <p>\u6839\u636e\u8fd9\u4e2a\u60f3\u6cd5\u6211\u4eec\u53ef\u4ee5\u5feb\u901f\u5199\u51fa\u5feb\u6392\u7684\u4ee3\u7801\uff0c\u7b80\u76f4\u5c31\u662f\u5728\u7ffb\u8bd1\u4e0a\u8fb9\u7684\u63cf\u8ff0\uff1a</p> <p><pre><code>def quicksort(array):\n    size = len(array)\n    if not array or size &lt; 2:  # NOTE: \u9012\u5f52\u51fa\u53e3\uff0c\u7a7a\u6570\u7ec4\u6216\u8005\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\u90fd\u662f\u6709\u5e8f\u7684\n        return array\n    pivot_idx = 0\n    pivot = array[pivot_idx]\n    less_part = [array[i] for i in range(size) if array[i] &lt;= pivot and pivot_idx != i]\n    great_part = [array[i] for i in range(size) if array[i] &gt; pivot and pivot_idx != i]\n    return quicksort(less_part) + [pivot] + quicksort(great_part)\n\ndef test_quicksort():\n    import random\n    seq = list(range(10))\n    random.shuffle(seq)\n    assert quicksort(seq) == sorted(seq)\n</code></pre> \u662f\u4e0d\u662f\u5f88\u7b80\u5355\uff0c\u4e0b\u6b21\u9762\u8bd5\u5b98\u8ba9\u4f60\u624b\u5199\u5feb\u6392\u4f60\u518d\u5199\u4e0d\u51fa\u6765\u5c31\u6709\u70b9\u4e0d\u592a\u5408\u9002\u5566\u3002 \u5f53\u7136\u8fd9\u4e2a\u5b9e\u73b0\u6709\u4e24\u4e2a\u4e0d\u597d\u7684\u5730\u65b9:</p> <ul> <li>\u7b2c\u4e00\u662f\u5b83\u9700\u8981\u989d\u5916\u7684\u5b58\u50a8\u7a7a\u95f4\uff0c\u6211\u4eec\u60f3\u5b9e\u73b0 inplace \u539f\u5730\u6392\u5e8f\u3002</li> <li>\u7b2c\u4e8c\u662f\u5b83\u7684 partition \u64cd\u4f5c\u6bcf\u6b21\u90fd\u8981\u4e24\u6b21\u904d\u5386\u6574\u4e2a\u6570\u7ec4\uff0c\u6211\u4eec\u60f3\u6539\u5584\u4e00\u4e0b\u3002</li> </ul> <p>\u8fd9\u91cc\u6211\u4eec\u5c31\u6765\u4f18\u5316\u4e00\u4e0b\u5b83\uff0c\u5b9e\u73b0 inplace \u6392\u5e8f\u5e76\u4e14\u6539\u5584\u4e0b partition \u64cd\u4f5c\u3002\u65b0\u7684\u4ee3\u7801\u5927\u6982\u5982\u4e0b\uff1a</p> <pre><code>def quicksort_inplace(array, beg, end):    # \u6ce8\u610f\u8fd9\u91cc\u6211\u4eec\u90fd\u7528\u5de6\u95ed\u53f3\u5f00\u533a\u95f4\uff0cend \u4f20\u5165 len(array)\n    if beg &lt; end:    # beg == end \u7684\u65f6\u5019\u9012\u5f52\u51fa\u53e3\n        pivot = partition(array, beg, end)\n        quicksort_inplace(array, beg, pivot)\n        quicksort_inplace(array, pivot+1, end)\n</code></pre> <p>\u80fd\u5426\u5b9e\u73b0\u53ea\u904d\u5386\u4e00\u6b21\u6570\u7ec4\u5c31\u53ef\u4ee5\u5b8c\u6210 partition \u64cd\u4f5c\u5462\uff1f\u5b9e\u9645\u4e0a\u662f\u53ef\u4ee5\u7684\u3002\u6211\u4eec\u8bbe\u7f6e\u9996\u4f4d\u4fe9\u4e2a\u6307\u9488 left, right\uff0c\u4e24\u4e2a\u6307\u9488\u4e0d\u65ad\u5411\u4e2d\u95f4\u6536\u62e2\u3002\u5982\u679c\u9047\u5230 left \u4f4d\u7f6e\u7684\u5143\u7d20\u5927\u4e8e pivot \u5e76\u4e14 right \u6307\u5411\u7684\u5143\u7d20\u5c0f\u4e8e pivot\uff0c\u6211\u4eec\u5c31\u4ea4\u6362\u8fd9\u4fe9\u5143\u7d20\uff0c\u5f53 left &gt; right \u7684\u65f6\u5019\u9000\u51fa\u5c31\u884c\u4e86\uff0c\u8fd9\u6837\u5b9e\u73b0\u4e86\u4e00\u6b21\u904d\u5386\u5c31\u5b8c\u6210\u4e86 partition\u3002\u5982\u679c\u4f60\u611f\u89c9\u61f5\u903c\uff0c\u7eb8\u4e0a\u753b\u753b\u5c31\u7acb\u9a6c\u660e\u767d\u4e86\u3002\u6211\u4eec\u6765\u64b8\u4ee3\u7801\u5b9e\u73b0\uff1a</p> <p></p> <pre><code>def partition(array, beg, end):\n    pivot_index = beg\n    pivot = array[pivot_index]\n    left = pivot_index + 1\n    right = end - 1    # \u5f00\u533a\u95f4\uff0c\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4f4d\u7f6e\u662f end-1     [0, end-1] or [0: end)\uff0c\u62ec\u53f7\u8868\u793a\u5f00\u533a\u95f4\n\n    while True:\n        # \u4ece\u5de6\u8fb9\u627e\u5230\u6bd4 pivot \u5927\u7684\n        while left &lt;= right and array[left] &lt; pivot:\n            left += 1\n\n        while right &gt;= left and array[right] &gt;= pivot:\n            right -= 1\n\n        if left &gt; right:\n            break\n        else:\n            array[left], array[right] = array[right], array[left]\n\n    array[pivot_index], array[right] = array[right], array[pivot_index]\n    return right   # \u65b0\u7684 pivot \u4f4d\u7f6e\n\n\ndef test_partition():\n    l = [4, 1, 2, 8]\n    assert partition(l, 0, len(l)) == 2\n    l = [1, 2, 3, 4]\n    assert partition(l, 0, len(l)) == 0\n    l = [4, 3, 2, 1]\n    assert partition(l, 0, len(l))\n</code></pre> <p>\u5927\u529f\u544a\u6210\uff0c\u65b0\u7684\u5feb\u6392\u5c31\u5b9e\u73b0\u597d\u4e86\u3002</p>"},{"location":"13_%E9%AB%98%E7%BA%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/quick_sort/#_2","title":"\u65f6\u95f4\u590d\u6742\u5ea6","text":"<p>\u5728\u6bd4\u8f83\u7406\u60f3\u7684\u60c5\u51b5\u4e0b\uff0c\u6bd4\u5982\u6570\u7ec4\u6bcf\u6b21\u90fd\u88ab pivot \u5747\u5206\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u9012\u5f52\u5f0f\uff1a</p> <p>T(n) = 2T(n/2) + n</p> <p>\u4e0a\u4e00\u8282\u6211\u4eec\u8bb2\u8fc7\u901a\u8fc7\u9012\u5f52\u6811\u5f97\u5230\u5b83\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(nlog(n))\u3002\u5373\u4fbf\u662f\u5f88\u574f\u7684\u60c5\u51b5\uff0c\u6bd4\u5982 pivot \u6bcf\u6b21\u90fd\u628a\u6570\u7ec4\u6309\u7167 1:9 \u5212\u5206\uff0c\u4f9d\u7136\u662f O(nlog(n))\uff0c\u611f\u5174\u8da3\u8bf7\u9605\u8bfb\u7b97\u6cd5\u5bfc\u8bba\u76f8\u5173\u7ae0\u8282\u3002</p> <p></p>"},{"location":"13_%E9%AB%98%E7%BA%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/quick_sort/#_3","title":"\u601d\u8003\u9898","text":"<ul> <li>\u8bf7\u4f60\u8865\u5145 quicksort_inplace \u7684\u5355\u5143\u6d4b\u8bd5</li> <li>\u6700\u574f\u7684\u60c5\u51b5\u4e0b\u5feb\u6392\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u591a\u5c11\uff1f\u4ec0\u4e48\u65f6\u5019\u4f1a\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\uff1f</li> <li>\u6211\u4eec\u5b9e\u73b0\u7684\u5feb\u6392\u662f\u7a33\u5b9a\u7684\u5575\uff1f</li> <li>\u9009\u62e9\u57fa\u51c6\u503c\u5982\u679c\u9009\u4e0d\u597d\u5c31\u53ef\u80fd\u5bfc\u81f4\u590d\u6742\u5ea6\u5347\u9ad8\uff0c\u7b97\u5bfc\u4e2d\u63d0\u5230\u4e86\u4e00\u79cd\u300emedian of 3\u300f\u7b56\u7565\uff0c\u5c31\u662f\u8bf4\u9009\u62e9 pivot \u7684\u65f6\u5019 \u4ece\u5b50\u6570\u7ec4\u4e2d\u968f\u673a\u9009\u4e09\u4e2a\u5143\u7d20\uff0c\u518d\u53d6\u5b83\u7684\u4e2d\u4f4d\u6570\uff0c\u4f60\u80fd\u5b9e\u73b0\u8fd9\u4e2a\u60f3\u6cd5\u5417\uff1f\u8fd9\u91cc\u6211\u4eec\u7684\u4ee3\u7801\u5f88\u7b80\u5355\u5730\u53d6\u4e86\u7b2c\u4e00\u4e2a\u5143\u7d20\u4f5c\u4e3a pivot</li> <li>\u5229\u7528\u5feb\u6392\u4e2d\u7684 partition \u64cd\u4f5c\uff0c\u6211\u4eec\u8fd8\u80fd\u5b9e\u73b0\u53e6\u4e00\u4e2a\u7b97\u6cd5\uff0cnth_element\uff0c\u5feb\u901f\u67e5\u627e\u4e00\u4e2a\u65e0\u5e8f\u6570\u7ec4\u4e2d\u7684\u7b2c n \u5927\u5143\u7d20\uff0c\u8bf7\u4f60\u5c1d\u8bd5\u5b9e\u73b0\u5b83\u5e76\u7f16\u5199\u5355\u6d4b\u3002\u5176\u5b9e\u8fd9\u4e2a\u51fd\u6570\u662f C++ STL \u4e2d\u7684\u4e00\u4e2a\u51fd\u6570\u3002</li> <li>\u4f60\u77e5\u9053 Python \u5185\u7f6e\u7684 sorted \u5982\u4f55\u5b9e\u73b0\u7684\u5417\uff1f\u8bf7\u4f60 Google \u76f8\u5173\u8d44\u6599\u4e86\u89e3\u4e0b\u3002\u5f88\u591a\u5185\u7f6e\u7684\u6392\u5e8f\u90fd\u4f7f\u7528\u4e86\u5feb\u6392\u7684\u6539\u826f\u7248\u3002</li> </ul>"},{"location":"13_%E9%AB%98%E7%BA%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/quick_sort/#_4","title":"\u5ef6\u4f38\u9605\u8bfb","text":"<ul> <li>\u300a\u7b97\u6cd5\u5bfc\u8bba\u300b\u7b2c 7 \u7ae0</li> <li>\u300a\u9762\u8bd5\u5fc5\u5907 | \u6392\u5e8f\u7b97\u6cd5\u7684Python\u5b9e\u73b0\u300b</li> </ul>"},{"location":"13_%E9%AB%98%E7%BA%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/quick_sort/#_5","title":"\u603b\u7ed3","text":"<p>\u9762\u8bd5\u7ecf\u5e38\u95ee\u7684\u5c31\u662f\u5e38\u7528\u6392\u5e8f\u7b97\u6cd5\u7684\u65f6\u95f4\u7a7a\u95f4\u590d\u6742\uff0c\u8fd9\u91cc\u5217\u4e00\u4e2a\u8868\u683c\u65b9\u4fbf\u8bb0\u5fc6\uff1a</p> \u6392\u5e8f\u7b97\u6cd5 \u6700\u5dee\u65f6\u95f4\u5206\u6790 \u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6 \u7a33\u5b9a\u5ea6 \u7a7a\u95f4\u590d\u6742\u5ea6 \u5192\u6ce1\u6392\u5e8f O(n^2) O(n^2) \u7a33\u5b9a O(1) \u9009\u62e9\u6392\u5e8f O(n^2) O(n^2) \u4e0d\u7a33\u5b9a O(1) \u63d2\u5165\u6392\u5e8f O(n^2) O(n^2) \u7a33\u5b9a O(1) \u4e8c\u53c9\u6811\u6392\u5e8f O(n^2) O(n*log2n) \u4e0d\u4e00\u9876 O(n) \u5feb\u901f\u6392\u5e8f O(n^2) O(n*log2n) \u4e0d\u7a33\u5b9a O(log2n)\\~O(n) \u5806\u6392\u5e8f O(n*log2n) O(n*log2n) \u4e0d\u7a33\u5b9a O(1) <p>\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5-\u6392\u5e8f\u7bc7-Python\u63cf\u8ff0</p>"},{"location":"13_%E9%AB%98%E7%BA%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/quick_sort/#leetcode","title":"Leetcode","text":"<p>\u65e0\u5e8f\u6570\u7ec4\u5bfb\u627e\u7b2c k \u5927\u7684\u6570\u5b57\uff0c\u4e0d\u6b62\u4e00\u79cd\u65b9\u6cd5\u3002 https://leetcode.com/problems/kth-largest-element-in-an-array/description/</p>"},{"location":"14_%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/tree/","title":"\u6811\u548c\u4e8c\u53c9\u6811","text":"<p>\u524d\u9762\u6211\u4eec\u8bb2\u4e86\u4e24\u79cd\u4f7f\u7528\u5206\u6cbb\u548c\u9012\u5f52\u89e3\u51b3\u6392\u5e8f\u95ee\u9898\u7684\u5f52\u5e76\u6392\u5e8f\u548c\u5feb\u901f\u6392\u5e8f\uff0c\u5806\u6392\u5e8f\u5148\u5c31\u6b64\u6253\u4f4f\uff0c\u56e0\u4e3a\u6d89\u53ca\u5230\u6811\u7684\u6982\u5ff5\uff0c\u6240\u4ee5\u6211\u4eec\u5148\u6765\u8bb2\u8bb2\u6811\u3002 \u8bb2\u5b8c\u4e86\u6811\u4e4b\u540e\u540e\u9762\u6211\u4eec\u5f00\u59cb\u4ecb\u7ecd\u4e00\u79cd\u6709\u7528\u7684\u6570\u636e\u7ed3\u6784\u5806(heap)\uff0c \u4ee5\u53ca\u501f\u52a9\u5806\u6765\u5b9e\u73b0\u7684\u5806\u6392\u5e8f\uff0c\u76f8\u6bd4\u524d\u4e24\u79cd\u6392\u5e8f\u7b97\u6cd5\u8981\u7a0d\u96be\u7406\u89e3\u548c\u5b9e\u73b0\u4e00\u4e9b\u3002</p>"},{"location":"14_%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/tree/#_2","title":"\u6811","text":"<p>\u8fd9\u91cc\u5148\u7b80\u5355\u8bb2\u8bb2\u6811\u7684\u6982\u5ff5\u3002\u6811\u7ed3\u6784\u662f\u4e00\u79cd\u5305\u62ec\u8282\u70b9(nodes)\u548c\u8fb9(edges)\u7684\u62e5\u6709\u5c42\u7ea7\u5173\u7cfb\u7684\u4e00\u79cd\u7ed3\u6784\uff0c \u5b83\u7684\u5f62\u5f0f\u548c\u5bb6\u8c31\u6811\u975e\u5e38\u7c7b\u4f3c:</p> <p></p> <p>\u5982\u679c\u4f60\u4e86\u89e3 linux \u6587\u4ef6\u7ed3\u6784\uff08tree \u547d\u4ee4\uff09\uff0c\u5b83\u7684\u7ed3\u6784\u4e5f\u662f\u4e00\u68f5\u6811\u3002\u6211\u4eec\u5feb\u901f\u770b\u4e0b\u6811\u6d89\u53ca\u5230\u7684\u4e00\u4e9b\u6982\u5ff5\uff1a</p> <p></p> <ul> <li>\u6839\u8282\u70b9(root): \u6811\u7684\u6700\u4e0a\u5c42\u7684\u8282\u70b9\uff0c\u4efb\u4f55\u975e\u7a7a\u7684\u6811\u90fd\u6709\u4e00\u4e2a\u8282\u70b9</li> <li>\u8def\u5f84(path): \u4ece\u8d77\u59cb\u8282\u70b9\u5230\u7ec8\u6b62\u8282\u70b9\u7ecf\u5386\u8fc7\u7684\u8fb9</li> <li>\u7236\u4eb2(parent)\uff1a\u9664\u4e86\u6839\u8282\u70b9\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u4e0a\u4e00\u5c42\u8fb9\u8fde\u63a5\u7684\u8282\u70b9\u5c31\u662f\u5b83\u7684\u7236\u4eb2(\u8282\u70b9)</li> <li>\u5b69\u5b50(children): \u6bcf\u4e2a\u8282\u70b9\u7531\u8fb9\u6307\u5411\u7684\u4e0b\u4e00\u5c42\u8282\u70b9</li> <li>\u5144\u5f1f(siblings): \u540c\u4e00\u4e2a\u7236\u4eb2\u5e76\u4e14\u5904\u5728\u540c\u4e00\u5c42\u7684\u8282\u70b9</li> <li>\u5b50\u6811(subtree): \u6bcf\u4e2a\u8282\u70b9\u5305\u542b\u5b83\u6240\u6709\u7684\u540e\u4ee3\u7ec4\u6210\u7684\u5b50\u6811</li> <li>\u53f6\u5b50\u8282\u70b9(leaf node): \u6ca1\u6709\u5b69\u5b50\u7684\u8282\u70b9\u6210\u4e3a\u53f6\u5b50\u8282\u70b9</li> </ul>"},{"location":"14_%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/tree/#_3","title":"\u4e8c\u53c9\u6811","text":"<p>\u4e86\u89e3\u5b8c\u6811\u7684\u7ed3\u6784\u4ee5\u540e\uff0c\u6211\u4eec\u6765\u770b\u6811\u7ed3\u6784\u91cc\u4e00\u79cd\u7b80\u5355\u4f46\u662f\u5374\u6bd4\u8f83\u5e38\u7528\u7684\u6811-\u4e8c\u53c9\u6811\u3002 \u4e8c\u53c9\u6811\u662f\u4e00\u79cd\u7b80\u5355\u7684\u6811\uff0c\u5b83\u7684\u6bcf\u4e2a\u8282\u70b9\u6700\u591a\u53ea\u80fd\u5305\u542b\u4e24\u4e2a\u5b69\u5b50\uff0c\u4ee5\u4e0b\u90fd\u662f\u4e00\u4e9b\u5408\u6cd5\u7684\u4e8c\u53c9\u6811:</p> <p> </p> <p>\u901a\u8fc7\u4e0a\u8fb9\u8fd9\u5e45\u56fe\u518d\u6765\u770b\u51e0\u4e2a\u4e8c\u53c9\u6811\u76f8\u5173\u7684\u6982\u5ff5:</p> <ul> <li>\u8282\u70b9\u6df1\u5ea6(depth): \u8282\u70b9\u5bf9\u5e94\u7684 level \u6570\u5b57</li> <li>\u6811\u7684\u9ad8\u5ea6(height): \u4e8c\u53c9\u6811\u7684\u9ad8\u5ea6\u5c31\u662f level \u6570 + 1\uff0c\u56e0\u4e3a level \u4ece 0\u5f00\u59cb\u8ba1\u7b97\u7684</li> <li>\u6811\u7684\u5bbd\u5ea6(width): \u4e8c\u53c9\u6811\u7684\u5bbd\u5ea6\u6307\u7684\u662f\u5305\u542b\u6700\u591a\u8282\u70b9\u7684\u5c42\u7ea7\u7684\u8282\u70b9\u6570</li> <li>\u6811\u7684 size\uff1a\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u603b\u4e2a\u6570\u3002</li> </ul> <p>\u4e00\u68f5 size \u4e3a n \u7684\u4e8c\u53c9\u6811\u9ad8\u5ea6\u6700\u591a\u53ef\u4ee5\u662f n\uff0c\u6700\u5c0f\u7684\u9ad8\u5ea6\u662f \uff0c\u8fd9\u91cc log \u4ee5 2 \u4e3a\u5e95\u7b80\u5199\u4e3a lgn\uff0c\u548c\u7b97\u6cd5\u5bfc\u8bba\u4fdd\u6301\u4e00\u81f4\u3002\u8fd9\u4e2a\u7ed3\u679c\u4f60\u53ea\u9700\u8981\u7528\u9ad8\u4e2d\u7684\u7d2f\u52a0\u516c\u5f0f\u5c31\u53ef\u4ee5\u5f97\u5230\u3002</p>"},{"location":"14_%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/tree/#_4","title":"\u4e00\u4e9b\u7279\u6b8a\u7684\u4e8c\u53c9\u6811","text":"<p>\u5728\u4e86\u89e3\u4e86\u4e8c\u53c9\u6811\u7684\u672f\u8bed\u548c\u6982\u5ff5\u4e4b\u540e\uff0c\u6211\u4eec\u6765\u770b\u770b\u4e00\u4e9b\u7279\u6b8a\u7684\u4e8c\u53c9\u6811\uff0c\u540e\u7eed\u7ae0\u8282\u6211\u4eec\u4f1a\u7528\u5230\uff1a</p>"},{"location":"14_%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/tree/#full-binary-tree","title":"\u6ee1\u4e8c\u53c9\u6811(full binary tree)","text":"<p>\u5982\u679c\u6bcf\u4e2a\u5185\u90e8\u8282\u70b9\uff08\u975e\u53f6\u8282\u70b9\uff09\u90fd\u5305\u542b\u4e24\u4e2a\u5b69\u5b50\uff0c\u5c31\u6210\u4e3a\u6ee1\u4e8c\u53c9\u6811\u3002\u4e0b\u8fb9\u662f\u4e00\u4e9b\u4f8b\u5b50\uff0c\u5b83\u53ef\u4ee5\u6709\u591a\u79cd\u5f62\u72b6\uff1a</p> <p></p>"},{"location":"14_%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/tree/#perfect-binary-tree","title":"\u5b8c\u7f8e\u4e8c\u53c9\u6811(perfect binary tree)","text":"<p>\u5f53\u6240\u6709\u7684\u53f6\u5b50\u8282\u70b9\u90fd\u5728\u540c\u4e00\u5c42\u5c31\u662f\u5b8c\u7f8e\u4e8c\u53c9\u6811\uff0c\u6beb\u65e0\u95f4\u9699\u586b\u5145\u4e86 h \u5c42\u3002</p> <p></p>"},{"location":"14_%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/tree/#complete-binary-tree","title":"\u5b8c\u5168\u4e8c\u53c9\u6811(complete binary tree)","text":"<p>\u5f53\u4e00\u4e2a\u9ad8\u5ea6\u4e3a h \u7684\u5b8c\u7f8e\u4e8c\u53c9\u6811\u51cf\u5c11\u5230 h-1\uff0c\u5e76\u4e14\u6700\u5e95\u5c42\u7684\u69fd\u88ab\u6beb\u65e0\u95f4\u9699\u5730\u4ece\u5de6\u5230\u53f3\u586b\u5145\uff0c\u6211\u4eec\u5c31\u53eb\u5b83\u5b8c\u5168\u4e8c\u53c9\u6811\u3002 \u4e0b\u56fe\u5c31\u662f\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u4f8b\u5b50\uff1a</p> <p></p>"},{"location":"14_%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/tree/#_5","title":"\u4e8c\u53c9\u6811\u7684\u8868\u793a","text":"<p>\u8bf4\u4e86\u90a3\u4e48\u591a\uff0c\u90a3\u4e48\u600e\u4e48\u8868\u793a\u4e00\u68f5\u4e8c\u53c9\u6811\u5462\uff1f\u5176\u5b9e\u4f60\u53d1\u73b0\u4f1a\u548c\u94fe\u8868\u6709\u4e00\u4e9b\u76f8\u4f3c\u4e4b\u5904\uff0c\u4e00\u4e2a\u8282\u70b9\uff0c\u7136\u540e\u8282\u70b9\u9700\u8981\u4fdd\u5b58\u5b69\u5b50\u7684\u6307\u9488\uff0c\u6211\u4ee5\u6784\u9020\u4e0b\u8fb9\u8fd9\u4e2a\u4e8c\u53c9\u6811\u4e3a\u4f8b\u5b50\uff1a \u6211\u4eec\u5148\u5b9a\u4e49\u4e00\u4e2a\u7c7b\u8868\u793a\u8282\u70b9\uff1a</p> <p></p> <pre><code>class BinTreeNode(object):\n    def __init__(self, data, left=None, right=None):\n        self.data, self.left, self.right = data, left, right\n</code></pre> <p>\u5f53\u7136\u548c\u94fe\u8868\u7c7b\u4f3c\uff0croot \u8282\u70b9\u662f\u6211\u4eec\u7684\u5165\u53e3\uff0c\u4e8e\u662f\u4e4e\u5b9a\u4e49\u4e00\u4e2a \u4e8c\u53c9\u6811\uff1a</p> <pre><code>class BinTree(object):\n    def __init__(self, root=None):\n        self.root = root\n</code></pre> <p>\u600e\u4e48\u6784\u9020\u4e0a\u56fe\u4e2d\u7684\u4e8c\u53c9\u6811\u5462\uff0c\u4f3c\u4e4e\u5176\u4ed6\u8bfe\u672c\u6ca1\u627e\u5230\u5565\u4f8b\u5b50(\u6709\u4e9b\u4f8b\u5b50\u662f\u5199\u4e86\u4e00\u5806\u5d4c\u5957\u8282\u70b9\u6765\u5b9a\u4e49\uff0c\u5f88\u96be\u641e\u6e05\u695a\u5c42\u6b21\u5173\u7cfb)\uff0c\u6211\u81ea\u5df1\u5b9a\u4e49\u4e86\u4e00\u79cd\u65b9\u6cd5\uff0c\u9996\u5148\u6211\u4eec\u8f93\u5165\u8282\u70b9\u4fe1\u606f\uff0c\u4ed4\u7ec6\u770b\u4e0b\u8fb9\u4ee3\u7801\uff0c\u53f6\u5b50\u8282\u70b9\u7684 left \u548c right \u90fd\u662f None\uff0c\u5e76\u4e14\u53ea\u6709\u4e00\u4e2a\u6839\u8282\u70b9 A:</p> <pre><code>node_list = [\n    {'data': 'A', 'left': 'B', 'right': 'C', 'is_root': True},\n    {'data': 'B', 'left': 'D', 'right': 'E', 'is_root': False},\n    {'data': 'D', 'left': None, 'right': None, 'is_root': False},\n    {'data': 'E', 'left': 'H', 'right': None, 'is_root': False},\n    {'data': 'H', 'left': None, 'right': None, 'is_root': False},\n    {'data': 'C', 'left': 'F', 'right': 'G', 'is_root': False},\n    {'data': 'F', 'left': None, 'right': None, 'is_root': False},\n    {'data': 'G', 'left': 'I', 'right': 'J', 'is_root': False},\n    {'data': 'I', 'left': None, 'right': None, 'is_root': False},\n    {'data': 'J', 'left': None, 'right': None, 'is_root': False},\n]\n</code></pre> <p>\u7136\u540e\u6211\u4eec\u7ed9 BinTreeNode \u5b9a\u4e49\u4e00\u4e2a build_from \u65b9\u6cd5\uff0c\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u5b9a\u4e49\u4e00\u79cd\u81ea\u5df1\u7684\u6784\u9020\u65b9\u6cd5\uff1a</p> <pre><code>class BinTree(object):\n    def __init__(self, root=None):\n        self.root = root\n\n    @classmethod\n    def build_from(cls, node_list):\n        \"\"\"\u901a\u8fc7\u8282\u70b9\u4fe1\u606f\u6784\u9020\u4e8c\u53c9\u6811\n        \u7b2c\u4e00\u6b21\u904d\u5386\u6211\u4eec\u6784\u9020 node \u8282\u70b9\n        \u7b2c\u4e8c\u6b21\u904d\u5386\u6211\u4eec\u7ed9 root \u548c \u5b69\u5b50\u8d4b\u503c\n        \u6700\u540e\u6211\u4eec\u7528 root \u521d\u59cb\u5316\u8fd9\u4e2a\u7c7b\u5e76\u8fd4\u56de\u4e00\u4e2a\u5bf9\u8c61\n\n        :param node_list: {'data': 'A', 'left': None, 'right': None, 'is_root': False}\n        \"\"\"\n        node_dict = {}\n        for node_data in node_list:\n            data = node_data['data']\n            node_dict[data] = BinTreeNode(data)\n        for node_data in node_list:\n            data = node_data['data']\n            node = node_dict[data]\n            if node_data['is_root']:\n                root = node\n            node.left = node_dict.get(node_data['left'])\n            node.right = node_dict.get(node_data['right'])\n        return cls(root)\nbtree = BinTree.build_from(node_list)\n</code></pre> <p>\u5927\u529f\u544a\u6210\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u6784\u9020\u4e86\u4e00\u68f5\u4e8c\u53c9\u6811\u5bf9\u8c61\u3002\u4e0b\u8fb9\u6211\u4eec\u770b\u770b\u5b83\u7684\u4e00\u4e9b\u5e38\u7528\u64cd\u4f5c\u3002</p>"},{"location":"14_%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/tree/#_6","title":"\u4e8c\u53c9\u6811\u7684\u904d\u5386","text":"<p>\u4e0d\u77e5\u9053\u4f60\u6709\u6ca1\u6709\u53d1\u73b0\uff0c\u4e8c\u53c9\u6811\u5176\u5b9e\u662f\u4e00\u79cd\u9012\u5f52\u7ed3\u6784\uff0c\u56e0\u4e3a\u5355\u72ec\u62ff\u51fa\u6765\u4e00\u4e2a subtree \u5b50\u6811\u51fa\u6765\uff0c\u5176\u5b9e\u5b83\u8fd8\u662f\u4e00\u68f5\u6811\u3002\u90a3\u904d\u5386\u5b83\u5c31\u5f88\u65b9\u4fbf\u5566\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u7528\u9012\u5f52\u7684\u65b9\u5f0f\u6765\u904d\u5386\u5b83\u3002\u4f46\u662f\u5f53\u5904\u7406\u987a\u5e8f\u4e0d\u540c\u7684\u65f6\u5019\uff0c\u6811\u53c8\u5206\u4e3a\u4e09\u79cd\u904d\u5386\u65b9\u5f0f:</p> <ul> <li>\u5148(\u6839)\u5e8f\u904d\u5386: \u5148\u5904\u7406\u6839\uff0c\u4e4b\u540e\u662f\u5de6\u5b50\u6811\uff0c\u7136\u540e\u662f\u53f3\u5b50\u6811</li> <li>\u4e2d(\u6839)\u5e8f\u904d\u5386: \u5148\u5904\u7406\u5de6\u5b50\u6811\uff0c\u4e4b\u540e\u662f\u6839\uff0c\u6700\u540e\u662f\u53f3\u5b50\u6811</li> <li>\u540e(\u6839)\u5e8f\u904d\u5386: \u5148\u5904\u7406\u5de6\u5b50\u6811\uff0c\u4e4b\u540e\u662f\u53f3\u5b50\u6811\uff0c\u6700\u540e\u662f\u6839</li> </ul> <p>\u6211\u4eec\u6765\u770b\u4e0b\u5b9e\u73b0\uff0c\u5176\u5b9e\u7b97\u662f\u6bd4\u8f83\u76f4\u767d\u7684\u9012\u5f52\u51fd\u6570:</p> <p><pre><code>class BinTreeNode(object):\n    def __init__(self, data, left=None, right=None):\n        self.data, self.left, self.right = data, left, right\n\n\nclass BinTree(object):\n    def __init__(self, root=None):\n        self.root = root\n\n    @classmethod\n    def build_from(cls, node_list):\n        \"\"\"\u901a\u8fc7\u8282\u70b9\u4fe1\u606f\u6784\u9020\u4e8c\u53c9\u6811\n        \u7b2c\u4e00\u6b21\u904d\u5386\u6211\u4eec\u6784\u9020 node \u8282\u70b9\n        \u7b2c\u4e8c\u6b21\u904d\u5386\u6211\u4eec\u7ed9 root \u548c \u5b69\u5b50\u8d4b\u503c\n\n        :param node_list: {'data': 'A', 'left': None, 'right': None, 'is_root': False}\n        \"\"\"\n        node_dict = {}\n        for node_data in node_list:\n            data = node_data['data']\n            node_dict[data] = BinTreeNode(data)\n        for node_data in node_list:\n            data = node_data['data']\n            node = node_dict[data]\n            if node_data['is_root']:\n                root = node\n            node.left = node_dict.get(node_data['left'])\n            node.right = node_dict.get(node_data['right'])\n        return cls(root)\n\n    def preorder_trav(self, subtree):\n        \"\"\" \u5148(\u6839)\u5e8f\u904d\u5386\n\n        :param subtree:\n        \"\"\"\n        if subtree is not None:\n            print(subtree.data)    # \u9012\u5f52\u51fd\u6570\u91cc\u5148\u5904\u7406\u6839\n            self.preorder_trav(subtree.left)   # \u9012\u5f52\u5904\u7406\u5de6\u5b50\u6811\n            self.preorder_trav(subtree.right)    # \u9012\u5f52\u5904\u7406\u53f3\u5b50\u6811\n\n\nnode_list = [\n    {'data': 'A', 'left': 'B', 'right': 'C', 'is_root': True},\n    {'data': 'B', 'left': 'D', 'right': 'E', 'is_root': False},\n    {'data': 'D', 'left': None, 'right': None, 'is_root': False},\n    {'data': 'E', 'left': 'H', 'right': None, 'is_root': False},\n    {'data': 'H', 'left': None, 'right': None, 'is_root': False},\n    {'data': 'C', 'left': 'F', 'right': 'G', 'is_root': False},\n    {'data': 'F', 'left': None, 'right': None, 'is_root': False},\n    {'data': 'G', 'left': 'I', 'right': 'J', 'is_root': False},\n    {'data': 'I', 'left': None, 'right': None, 'is_root': False},\n    {'data': 'J', 'left': None, 'right': None, 'is_root': False},\n]\nbtree = BinTree.build_from(node_list)\nbtree.preorder_trav(btree.root)    # \u8f93\u51fa A, B, D, E, H, C, F, G, I, J\n</code></pre> \u600e\u4e48\u6837\u662f\u4e0d\u662f\u633a\u7b80\u5355\u7684\uff0c\u6bd4\u8f83\u76f4\u767d\u7684\u9012\u5f52\u51fd\u6570\u3002\u5982\u679c\u4f60\u4e0d\u660e\u767d\uff0c\u89c6\u9891\u91cc\u6211\u4eec\u4f1a\u753b\u4e2a\u56fe\u6765\u8bf4\u660e\u3002</p>"},{"location":"14_%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/tree/#_7","title":"\u4e8c\u53c9\u6811\u5c42\u5e8f\u904d\u5386","text":"<p>\u9664\u4e86\u9012\u5f52\u7684\u65b9\u5f0f\u904d\u5386\u4e4b\u5916\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528\u5c42\u5e8f\u904d\u5386\u7684\u65b9\u5f0f\u3002\u5c42\u5e8f\u904d\u5386\u6bd4\u8f83\u76f4\u767d\uff0c\u5c31\u662f\u4ece\u6839\u8282\u70b9\u5f00\u59cb\u6309\u7167\u4e00\u5c42\u4e00\u5c42\u7684\u65b9\u5f0f\u904d\u5386\u8282\u70b9\u3002 \u6211\u4eec\u53ef\u4ee5\u4ece\u6839\u8282\u70b9\u5f00\u59cb\uff0c\u4e4b\u540e\u628a\u6240\u6709\u5f53\u524d\u5c42\u7684\u5b69\u5b50\u90fd\u6309\u7167\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u653e\u5230\u4e00\u4e2a\u5217\u8868\u91cc\uff0c\u4e0b\u4e00\u6b21\u904d\u5386\u6240\u6709\u8fd9\u4e9b\u5b69\u5b50\u5c31\u53ef\u4ee5\u4e86\u3002</p> <pre><code>    def layer_trav(self, subtree):\n        cur_nodes = [subtree]  # current layer nodes\n        next_nodes = []\n        while cur_nodes or next_nodes:\n            for node in cur_nodes:\n                print(node.data)\n                if node.left:\n                    next_nodes.append(node.left)\n                if node.right:\n                    next_nodes.append(node.right)\n            cur_nodes = next_nodes  # \u7ee7\u7eed\u904d\u5386\u4e0b\u4e00\u5c42\n            next_nodes = []\n</code></pre> <p>\u8fd8\u6709\u4e00\u79cd\u65b9\u5f0f\u5c31\u662f\u4f7f\u7528\u4e00\u4e2a\u961f\u5217\uff0c\u4e4b\u524d\u6211\u4eec\u77e5\u9053\u961f\u5217\u662f\u4e00\u4e2a\u5148\u8fdb\u5148\u51fa\u7ed3\u6784\uff0c\u5982\u679c\u6211\u4eec\u6309\u7167\u4e00\u5c42\u4e00\u5c42\u7684\u987a\u5e8f\u4ece\u5de6\u5f80\u53f3\u628a\u8282\u70b9\u653e\u5230\u4e00\u4e2a\u961f\u5217\u91cc\uff0c \u4e5f\u53ef\u4ee5\u5b9e\u73b0\u5c42\u5e8f\u904d\u5386\uff1a</p> <pre><code>    def layer_trav_use_queue(self, subtree):\n        q = Queue()\n        q.append(subtree)\n        while not q.empty():\n            cur_node = q.pop()\n            print(cur_node.data)\n            if cur_node.left:\n                q.append(cur_node.left)\n            if cur_node.right:\n                q.append(cur_node.right)\n\n\nfrom collections import deque\nclass Queue(object):  # \u501f\u52a9\u5185\u7f6e\u7684 deque \u6211\u4eec\u53ef\u4ee5\u8fc5\u901f\u5b9e\u73b0\u4e00\u4e2a Queue\n    def __init__(self):\n        self._items = deque()\n\n    def append(self, value):\n        return self._items.append(value)\n\n    def pop(self):\n        return self._items.popleft()\n\n    def empty(self):\n        return len(self._items) == 0\n</code></pre>"},{"location":"14_%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/tree/#_8","title":"\u53cd\u8f6c\u4e8c\u53c9\u6811","text":"<p>\u4e4b\u6240\u4ee5\u5355\u62ce\u51fa\u6765\u8bf4\u8fd9\u4e2a\u662f\u56e0\u4e3a mac \u4e0b\u8457\u540d\u7684 brew \u5de5\u5177\u4f5c\u8005\u636e\u8bf4\u662f\u56e0\u4e3a\u9762\u8bd5 google \u767d\u677f\u7f16\u7a0b\u6ca1\u5199\u51fa\u6765\u53cd\u8f6c\u4e8c\u53c9\u6811\u8dea\u4e86\u3002\u7136\u540e\u4eba\u5bb6\u5c31\u53bb\u4e86\u82f9\u679c \ud83d\ude02\u3002\u5176\u5b9e\u5427\u548c\u904d\u5386\u64cd\u4f5c\u76f8\u6bd4\u4e5f\u6ca1\u5565\u592a\u5927\u533a\u522b\uff0c\u9012\u5f52\u4ea4\u6362\u5c31\u662f\u4e86\uff1a</p> <pre><code>    def reverse(self, subtree):\n        if subtree is not None:\n            subtree.left, subtree.right = subtree.right, subtree.left\n            self.reverse(subtree.left)\n            self.reverse(subtree.right)\n</code></pre>"},{"location":"14_%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/tree/#_9","title":"\u7ec3\u4e60\u9898","text":"<ul> <li>\u8bf7\u4f60\u5b8c\u6210\u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u548c\u540e\u5e8f\u904d\u5386\u4ee5\u53ca\u5355\u5143\u6d4b\u8bd5</li> <li>\u6811\u7684\u904d\u5386\u6211\u4eec\u7528\u4e86 print\uff0c\u8bf7\u4f60\u5c1d\u8bd5\u6362\u6210\u4e00\u4e2a callback\uff0c\u8fd9\u6837\u5c31\u80fd\u81ea\u5b9a\u4e49\u5904\u7406\u6811\u8282\u70b9\u7684\u65b9\u5f0f\u4e86\u3002</li> <li>\u8bf7\u95ee\u6811\u7684\u904d\u5386\u64cd\u4f5c\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u591a\u5c11\uff1f\u5047\u8bbe\u5b83\u7684 size \u662f n</li> <li>\u4f60\u80fd\u7528\u975e\u9012\u5f52\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0\u6811\u7684\u904d\u5386\u5417\uff1f\u6211\u4eec\u77e5\u9053\u8ba1\u7b97\u673a\u5185\u90e8\u4f7f\u7528\u4e86 stack\uff0c\u5982\u679c\u6211\u4eec\u81ea\u5df1\u6a21\u62df\u5982\u4f55\u5b9e\u73b0\uff1f\u8bf7\u4f60\u5c1d\u8bd5\u5b8c\u6210</li> <li>\u53ea\u6839\u636e\u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u548c\u540e\u5e8f\u904d\u5386\u80fd\u5426\u786e\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811\uff1f\u4f60\u53ef\u4ee5\u4e3e\u4e00\u4e2a\u53cd\u4f8b\u5417\uff1f</li> </ul>"},{"location":"14_%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/tree/#_10","title":"\u5ef6\u4f38\u9605\u8bfb","text":"<ul> <li>\u300aData Structures and Algorithms in Python\u300b 13 \u7ae0 Binary Trees</li> <li>https://www.geeksforgeeks.org/iterative-preorder-traversal/</li> </ul>"},{"location":"14_%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/tree/#leetcode","title":"Leetcode \u7ec3\u4e60","text":"<ul> <li> <p>leetcode binary-tree-preorder-traversal \u4e8c\u53c9\u6811\u7684\u5148\u5e8f\u904d\u5386</p> </li> <li> <p>leetcode binary-tree-inorder-traversal/ \u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386</p> </li> <li> <p>leetcode binary-tree-postorder-traversal \u4e8c\u53c9\u6811\u7684\u540e\u5e8f\u904d\u5386</p> </li> <li> <p>leetcode binary-tree-right-side-view \u4f7f\u7528\u6811\u7684\u5c42\u5e8f\u904d\u5386\u6211\u4eec\u80fd\u5b9e\u73b0\u4e00\u4e2a\u6811\u7684\u5de6\u53f3\u89c6\u56fe\uff0c\u6bd4\u5982\u4ece\u4e00\u4e2a\u4e8c\u53c9\u6811\u7684\u5de6\u8fb9\u80fd\u770b\u5230\u54ea\u4e9b\u8282\u70b9\u3002 \u8bf7\u4f60\u5c1d\u8bd5\u505a\u8fd9\u4e2a\u7ec3\u4e60\u9898</p> </li> <li> <p>leetcode construct-binary-tree-from-preorder-and-postorder-traversal \u6839\u636e\u4e8c\u53c9\u6811\u7684 \u524d\u5e8f\u548c\u540e\u5e8f\u904d\u5386\uff0c\u8fd4\u56de\u4e00\u9897\u5b8c\u6574\u7684\u4e8c\u53c9\u6811\u3002</p> </li> </ul>"},{"location":"15_%E5%A0%86%E4%B8%8E%E5%A0%86%E6%8E%92%E5%BA%8F/heap_and_heapsort/","title":"\u5806(heap)","text":"<p>\u524d\u9762\u6211\u4eec\u8bb2\u4e86\u4e24\u79cd\u4f7f\u7528\u5206\u6cbb\u548c\u9012\u5f52\u89e3\u51b3\u6392\u5e8f\u95ee\u9898\u7684\u5f52\u5e76\u6392\u5e8f\u548c\u5feb\u901f\u6392\u5e8f\uff0c\u4e2d\u95f4\u53c8\u7a7f\u63d2\u4e86\u4e00\u628a\u6811\u548c\u4e8c\u53c9\u6811\uff0c \u672c\u7ae0\u6211\u4eec\u5f00\u59cb\u4ecb\u7ecd\u53e6\u4e00\u79cd\u6709\u7528\u7684\u6570\u636e\u7ed3\u6784\u5806(heap)\uff0c \u4ee5\u53ca\u501f\u52a9\u5806\u6765\u5b9e\u73b0\u7684\u5806\u6392\u5e8f\uff0c\u76f8\u6bd4\u524d\u4e24\u79cd\u6392\u5e8f\u7b97\u6cd5\u8981\u7a0d\u96be\u5b9e\u73b0\u4e00\u4e9b\u3002 \u6700\u540e\u6211\u4eec\u7b80\u5355\u63d0\u4e00\u4e0b python \u6807\u51c6\u5e93\u5185\u7f6e\u7684 heapq \u6a21\u5757\u3002</p>"},{"location":"15_%E5%A0%86%E4%B8%8E%E5%A0%86%E6%8E%92%E5%BA%8F/heap_and_heapsort/#_1","title":"\u4ec0\u4e48\u662f\u5806\uff1f","text":"<p>\u5806\u662f\u4e00\u79cd\u5b8c\u5168\u4e8c\u53c9\u6811\uff08\u8bf7\u4f60\u56de\u987e\u4e0b\u4e0a\u4e00\u7ae0\u7684\u6982\u5ff5\uff09\uff0c\u6709\u6700\u5927\u5806\u548c\u6700\u5c0f\u5806\u4e24\u79cd\u3002</p> <ul> <li>\u6700\u5927\u5806: \u5bf9\u4e8e\u6bcf\u4e2a\u975e\u53f6\u5b50\u8282\u70b9 V\uff0cV \u7684\u503c\u90fd\u6bd4\u5b83\u7684\u4e24\u4e2a\u5b69\u5b50\u5927\uff0c\u79f0\u4e3a \u6700\u5927\u5806\u7279\u6027(heap order property) \u6700\u5927\u5806\u91cc\u7684\u6839\u603b\u662f\u5b58\u50a8\u6700\u5927\u503c\uff0c\u6700\u5c0f\u7684\u503c\u5b58\u50a8\u5728\u53f6\u8282\u70b9\u3002</li> <li>\u6700\u5c0f\u5806\uff1a\u548c\u6700\u5927\u5806\u76f8\u53cd\uff0c\u6bcf\u4e2a\u975e\u53f6\u5b50\u8282\u70b9 V\uff0cV \u7684\u4e24\u4e2a\u5b69\u5b50\u7684\u503c\u90fd\u6bd4\u5b83\u5927\u3002</li> </ul> <p></p>"},{"location":"15_%E5%A0%86%E4%B8%8E%E5%A0%86%E6%8E%92%E5%BA%8F/heap_and_heapsort/#_2","title":"\u5806\u7684\u64cd\u4f5c","text":"<p>\u5806\u63d0\u4f9b\u4e86\u5f88\u6709\u9650\u7684\u51e0\u4e2a\u64cd\u4f5c\uff1a</p> <ul> <li>\u63d2\u5165\u65b0\u7684\u503c\u3002\u63d2\u5165\u6bd4\u8f83\u9ebb\u70e6\u7684\u5c31\u662f\u9700\u8981\u7ef4\u6301\u5806\u7684\u7279\u6027\u3002\u9700\u8981 sift-up \u64cd\u4f5c\uff0c\u5177\u4f53\u4f1a\u5728\u89c6\u9891\u548c\u4ee3\u7801\u91cc\u89e3\u91ca\uff0c\u6587\u5b57\u63cf\u8ff0\u8d77\u6765\u6bd4\u8f83\u9ebb\u70e6\u3002</li> <li>\u83b7\u53d6\u5e76\u79fb\u9664\u6839\u8282\u70b9\u7684\u503c\u3002\u6bcf\u6b21\u6211\u4eec\u90fd\u53ef\u4ee5\u83b7\u53d6\u6700\u5927\u503c\u6216\u8005\u6700\u5c0f\u503c\u3002\u8fd9\u4e2a\u65f6\u5019\u9700\u8981\u628a\u5e95\u5c42\u6700\u53f3\u8fb9\u7684\u8282\u70b9\u503c\u66ff\u6362\u5230 root \u8282\u70b9\u4e4b\u540e \u6267\u884c sift-down \u64cd\u4f5c\u3002</li> </ul> <p> </p>"},{"location":"15_%E5%A0%86%E4%B8%8E%E5%A0%86%E6%8E%92%E5%BA%8F/heap_and_heapsort/#_3","title":"\u5806\u7684\u8868\u793a","text":"<p>\u4e0a\u4e00\u7ae0\u6211\u4eec\u7528\u4e00\u4e2a\u8282\u70b9\u7c7b\u548c\u4e8c\u53c9\u6811\u7c7b\u8868\u793a\u6811\uff0c\u8fd9\u91cc\u5176\u5b9e\u7528\u6570\u7ec4\u5c31\u80fd\u5b9e\u73b0\u5806\u3002</p> <p></p> <p>\u4ed4\u7ec6\u89c2\u5bdf\u4e0b\uff0c\u56e0\u4e3a\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u7279\u6027\uff0c\u6811\u4e0d\u4f1a\u6709\u95f4\u9699\u3002\u5bf9\u4e8e\u6570\u7ec4\u91cc\u7684\u4e00\u4e2a\u4e0b\u6807 i\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u5b83\u7684\u7236\u4eb2\u548c\u5b69\u5b50\u7684\u8282\u70b9\u5bf9\u5e94\u7684\u4e0b\u6807\uff1a</p> <p><pre><code>parent = int((i-1) / 2)    # \u53d6\u6574\nleft = 2 * i + 1\nright = 2 * i + 2\n</code></pre> \u8d85\u51fa\u4e0b\u6807\u8868\u793a\u6ca1\u6709\u5bf9\u5e94\u7684\u5b69\u5b50\u8282\u70b9\u3002</p>"},{"location":"15_%E5%A0%86%E4%B8%8E%E5%A0%86%E6%8E%92%E5%BA%8F/heap_and_heapsort/#_4","title":"\u5b9e\u73b0\u4e00\u4e2a\u6700\u5927\u5806","text":"<p>\u6211\u4eec\u5c06\u5728\u89c6\u9891\u91cc\u8be6\u7ec6\u63cf\u8ff0\u548c\u7f16\u5199\u5404\u4e2a\u64cd\u4f5c</p> <pre><code>class MaxHeap(object):\n    def __init__(self, maxsize=None):\n        self.maxsize = maxsize\n        self._elements = Array(maxsize)\n        self._count = 0\n\n    def __len__(self):\n        return self._count\n\n    def add(self, value):\n        if self._count &gt;= self.maxsize:\n            raise Exception('full')\n        self._elements[self._count] = value\n        self._count += 1\n        self._siftup(self._count-1)  # \u7ef4\u6301\u5806\u7684\u7279\u6027\n\n    def _siftup(self, ndx):\n        if ndx &gt; 0:\n            parent = int((ndx-1)/2)\n            if self._elements[ndx] &gt; self._elements[parent]:    # \u5982\u679c\u63d2\u5165\u7684\u503c\u5927\u4e8e parent\uff0c\u4e00\u76f4\u4ea4\u6362\n                self._elements[ndx], self._elements[parent] = self._elements[parent], self._elements[ndx]\n                self._siftup(parent)    # \u9012\u5f52\n\n    def extract(self):\n        if self._count &lt;= 0:\n            raise Exception('empty')\n        value = self._elements[0]    # \u4fdd\u5b58 root \u503c\n        self._count -= 1\n        self._elements[0] = self._elements[self._count]    # \u6700\u53f3\u4e0b\u7684\u8282\u70b9\u653e\u5230root\u540esiftDown\n        self._siftdown(0)    # \u7ef4\u6301\u5806\u7279\u6027\n        return value\n\n    def _siftdown(self, ndx):\n        left = 2 * ndx + 1\n        right = 2 * ndx + 2\n        # determine which node contains the larger value\n        largest = ndx\n        if (left &lt; self._count and     # \u6709\u5de6\u5b69\u5b50\n                self._elements[left] &gt;= self._elements[largest] and\n                self._elements[left] &gt;= self._elements[right]):  # \u539f\u4e66\u8fd9\u4e2a\u5730\u65b9\u6ca1\u5199\u5b9e\u9645\u4e0a\u627e\u7684\u672a\u5fc5\u662flargest\n            largest = left\n        elif right &lt; self._count and self._elements[right] &gt;= self._elements[largest]:\n            largest = right\n        if largest != ndx:\n            self._elements[ndx], self._elements[largest] = self._elements[largest], self._elements[ndx]\n            self._siftdown(largest)\n\n\ndef test_maxheap():\n    import random\n    n = 5\n    h = MaxHeap(n)\n    for i in range(n):\n        h.add(i)\n    for i in reversed(range(n)):\n        assert i == h.extract()\n</code></pre>"},{"location":"15_%E5%A0%86%E4%B8%8E%E5%A0%86%E6%8E%92%E5%BA%8F/heap_and_heapsort/#_5","title":"\u5b9e\u73b0\u5806\u6392\u5e8f","text":"<p>\u4e0a\u8fb9\u6211\u4eec\u5b9e\u73b0\u4e86\u6700\u5927\u5806\uff0c\u6bcf\u6b21\u6211\u4eec\u90fd\u80fd extract \u4e00\u4e2a\u6700\u5927\u7684\u5143\u7d20\u4e86\uff0c\u4e8e\u662f\u4e00\u4e2a\u5012\u5e8f\u6392\u5e8f\u51fd\u6570\u5c31\u80fd\u5f88\u5bb9\u6613\u5199\u51fa\u6765\u4e86\uff1a</p> <pre><code>def heapsort_reverse(array):\n    length = len(array)\n    maxheap = MaxHeap(length)\n    for i in array:\n        maxheap.add(i)\n    res = []\n    for i in range(length):\n        res.append(maxheap.extract())\n    return res\n\n\ndef test_heapsort_reverse():\n    import random\n    l = list(range(10))\n    random.shuffle(l)\n    assert heapsort_reverse(l) == sorted(l, reverse=True)\n</code></pre>"},{"location":"15_%E5%A0%86%E4%B8%8E%E5%A0%86%E6%8E%92%E5%BA%8F/heap_and_heapsort/#python-heapq","title":"Python \u91cc\u7684 heapq \u6a21\u5757","text":"<p>python \u5176\u5b9e\u81ea\u5e26\u4e86 heapq \u6a21\u5757\uff0c\u7528\u6765\u5b9e\u73b0\u5806\u7684\u76f8\u5173\u64cd\u4f5c\uff0c\u539f\u7406\u662f\u7c7b\u4f3c\u7684\u3002\u8bf7\u4f60\u9605\u8bfb\u76f8\u5173\u6587\u6863\u5e76\u4f7f\u7528\u5185\u7f6e\u7684 heapq \u6a21\u5757\u5b8c\u6210\u5806\u6392\u5e8f\u3002 \u4e00\u822c\u6211\u4eec\u5237\u9898\u6216\u8005\u5199\u4e1a\u52a1\u4ee3\u7801\u7684\u65f6\u5019\uff0c\u4f7f\u7528\u8fd9\u4e2a\u5185\u7f6e\u7684 heapq \u6a21\u5757\u5c31\u591f\u7528\u4e86\uff0c\u5185\u7f6e\u7684\u5b9e\u73b0\u4e86\u662f\u6700\u5c0f\u5806\u3002</p>"},{"location":"15_%E5%A0%86%E4%B8%8E%E5%A0%86%E6%8E%92%E5%BA%8F/heap_and_heapsort/#top-k","title":"Top K \u95ee\u9898","text":"<p>\u9762\u8bd5\u9898\u4e2d\u6709\u8fd9\u6837\u4e00\u7c7b\u95ee\u9898\uff0c\u8ba9\u6c42\u51fa\u5927\u91cf\u6570\u636e\u4e2d\u7684top k \u4e2a\u5143\u7d20\uff0c\u6bd4\u5982\u4e00\u4ebf\u4e2a\u6570\u5b57\u4e2d\u6700\u5927\u7684100\u4e2a\u6570\u5b57\u3002 \u5bf9\u4e8e\u8fd9\u79cd\u95ee\u9898\u6709\u5f88\u591a\u79cd\u89e3\u6cd5\uff0c\u6bd4\u5982\u76f4\u63a5\u6392\u5e8f\u3001mapreduce\u3001trie \u6811\u3001\u5206\u6cbb\u6cd5\u7b49\uff0c\u5f53\u7136\u5982\u679c\u5185\u5b58\u591f\u7528\u76f4\u63a5\u6392\u5e8f\u662f\u6700\u7b80\u5355\u7684\u3002 \u5982\u679c\u5185\u5b58\u4e0d\u591f\u7528\u5462\uff1f \u8fd9\u91cc\u6211\u4eec\u63d0\u4e00\u4e0b\u4f7f\u7528\u56fa\u5b9a\u5927\u5c0f\u7684\u5806\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u65b9\u5f0f\u3002</p> <p>\u4e00\u5f00\u59cb\u7684\u601d\u8def\u53ef\u80fd\u662f\uff0c\u65e2\u7136\u6c42\u6700\u5927\u7684 k \u4e2a\u6570\uff0c\u662f\u4e0d\u662f\u5e94\u8be5\u7ef4\u62a4\u4e00\u4e2a\u5305\u542b k \u4e2a\u5143\u7d20\u7684\u6700\u5927\u5806\u5462\uff1f \u7a0d\u5fae\u5c1d\u8bd5\u4e0b\u4f60\u4f1a\u53d1\u73b0\u8d70\u4e0d\u901a\u3002\u6211\u4eec\u5148\u7528\u6570\u7ec4\u7684\u524d\u9762 k \u4e2a\u5143\u7d20\u5efa\u7acb\u6700\u5927\u5806\uff0c\u7136\u540e\u5bf9\u5269\u4e0b\u7684\u5143\u7d20\u8fdb\u884c\u6bd4\u5bf9\uff0c\u4f46\u662f\u6700\u5927\u5806\u53ea\u80fd\u6bcf\u6b21\u83b7\u53d6\u5806\u9876 \u6700\u5927\u7684\u4e00\u4e2a\u5143\u7d20\uff0c\u5982\u679c\u6211\u4eec\u53d6\u4e0b\u4e00\u4e2a\u5927\u4e8e\u5806\u9876\u7684\u503c\u548c\u5806\u9876\u66ff\u6362\uff0c\u4f60\u4f1a\u53d1\u73b0\u5806\u5e95\u90e8\u7684\u5c0f\u6570\u4e00\u76f4\u4e0d\u4f1a\u88ab\u6362\u6389\u3002\u5982\u679c\u4e0b\u4e00\u4e2a\u5143\u7d20\u5c0f\u4e8e\u5806\u9876 \u5c31\u66ff\u6362\u4e5f\u4e0d\u5bf9\uff0c\u8fd9\u6837\u53ef\u80fd\u6700\u5927\u7684\u5143\u7d20\u5c31\u88ab\u6211\u4eec\u4e22\u6389\u4e86\u3002</p> <p>\u76f8\u53cd\u6211\u4eec\u7528\u6700\u5c0f\u5806\u5462\uff1f \u5148\u8fed\u4ee3\u524d k \u4e2a\u5143\u7d20\u5efa\u7acb\u4e00\u4e2a\u6700\u5c0f\u5806\uff0c\u4e4b\u540e\u7684\u5143\u7d20\u5982\u679c\u5c0f\u4e8e\u5806\u9876\u6700\u5c0f\u503c\uff0c\u8df3\u8fc7\uff0c\u5426\u5219\u66ff\u6362\u5806\u9876\u5143\u7d20\u5e76\u91cd\u65b0\u8c03\u6574\u5806\u3002\u4f60\u4f1a\u53d1\u73b0\u6700\u5c0f\u5806\u91cc \u6162\u6162\u5c31\u88ab\u66ff\u6362\u6210\u4e86\u6700\u5927\u7684\u90a3\u4e9b\u503c\uff0c\u5e76\u4e14\u6700\u540e\u5806\u9876\u662f\u6700\u5927\u7684 topk \u4e2a\u503c\u4e2d\u7684\u6700\u5c0f\u503c\u3002 \uff08\u6bd4\u59821000\u4e2a\u6570\u627e10\u4e2a\uff0c\u6700\u540e\u5806\u91cc\u5269\u4f59\u7684\u662f [990, 991, 992, 996, 994, 993, 997, 998, 999, 995]\uff0c\u7b2c\u4e00\u4e2a 990 \u6700\u5c0f)</p> <p>\u6309\u7167\u8fd9\u4e2a\u601d\u8def\u5f88\u5bb9\u6613\u5199\u51fa\u6765\u4ee3\u7801\uff1a</p> <pre><code>import heapq\n\n\nclass TopK:\n    \"\"\"\u83b7\u53d6\u5927\u91cf\u5143\u7d20 topk \u5927\u4e2a\u5143\u7d20\uff0c\u56fa\u5b9a\u5185\u5b58\n    \u601d\u8def\uff1a\n    1. \u5148\u653e\u5165\u5143\u7d20\u524d k \u4e2a\u5efa\u7acb\u4e00\u4e2a\u6700\u5c0f\u5806\n    2. \u8fed\u4ee3\u5269\u4f59\u5143\u7d20\uff1a\n        \u5982\u679c\u5f53\u524d\u5143\u7d20\u5c0f\u4e8e\u5806\u9876\u5143\u7d20\uff0c\u8df3\u8fc7\u8be5\u5143\u7d20\uff08\u80af\u5b9a\u4e0d\u662f\u524d k \u5927\uff09\n        \u5426\u5219\u66ff\u6362\u5806\u9876\u5143\u7d20\u4e3a\u5f53\u524d\u5143\u7d20\uff0c\u5e76\u91cd\u65b0\u8c03\u6574\u5806\n    \"\"\"\n\n    def __init__(self, iterable, k):\n        self.minheap = []\n        self.capacity = k\n        self.iterable = iterable\n\n    def push(self, val):\n        if len(self.minheap) &gt;= self.capacity:\n            min_val = self.minheap[0]\n            if val &lt; min_val:  # \u5f53\u7136\u4f60\u53ef\u4ee5\u76f4\u63a5 if val &gt; min_val\u64cd\u4f5c\uff0c\u8fd9\u91cc\u6211\u53ea\u662f\u663e\u793a\u6307\u51fa\u8df3\u8fc7\u8fd9\u4e2a\u5143\u7d20\n                pass\n            else:\n                heapq.heapreplace(self.minheap, val)  # \u8fd4\u56de\u5e76\u4e14pop\u5806\u9876\u6700\u5c0f\u503c\uff0c\u63a8\u5165\u65b0\u7684 val \u503c\u5e76\u8c03\u6574\u5806\n        else:\n            heapq.heappush(self.minheap, val)  # \u524d\u9762 k \u4e2a\u5143\u7d20\u76f4\u63a5\u653e\u5165minheap\n\n    def get_topk(self):\n        for val in self.iterable:\n            self.push(val)\n        return self.minheap\n\n\ndef test():\n    import random\n    i = list(range(1000))  # \u8fd9\u91cc\u53ef\u4ee5\u662f\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5143\u7d20\uff0c\u8282\u7701\u5185\u5b58\n    random.shuffle(i)\n    _ = TopK(i, 10)\n    print(_.get_topk())  # [990, 991, 992, 996, 994, 993, 997, 998, 999, 995]\n\n\nif __name__ == '__main__':\n    test()\n</code></pre>"},{"location":"15_%E5%A0%86%E4%B8%8E%E5%A0%86%E6%8E%92%E5%BA%8F/heap_and_heapsort/#_6","title":"\u7ec3\u4e60\u9898","text":"<ul> <li>\u8fd9\u91cc\u6211\u7528\u6700\u5927\u5806\u5b9e\u73b0\u4e86\u4e00\u4e2a heapsort_reverse \u51fd\u6570\uff0c\u8bf7\u4f60\u5b9e\u73b0\u4e00\u4e2a\u6b63\u5e8f\u6392\u5e8f\u7684\u51fd\u6570\u3002\u4f3c\u4e4e\u4e0d\u6b62\u4e00\u79cd\u65b9\u5f0f</li> <li>\u8bf7\u4f60\u5b9e\u73b0\u4e00\u4e2a\u6700\u5c0f\u5806\uff0c\u4f60\u9700\u8981\u4fee\u6539\u90a3\u4e9b\u4ee3\u7801\u5462\uff1f</li> <li>\u6211\u4eec\u5b9e\u73b0\u7684\u5806\u6392\u5e8f\u662f inplace \u7684\u5417\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u4f60\u80fd\u6539\u6210 inplace \u7684\u5417\uff1f</li> <li>\u5806\u6392\u5e8f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u591a\u5c11\uff1f siftup \u548c siftdown \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u591a\u5c11\uff1f\uff08\u5c0f\u63d0\u793a\uff1a\u8003\u8651\u6811\u7684\u9ad8\u5ea6\uff0c\u5b83\u51b3\u5b9a\u4e86\u64cd\u4f5c\u6b21\u6570\uff09</li> <li>\u8bf7\u4f60\u601d\u8003 Top K \u95ee\u9898\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u591a\u5c11\uff1f</li> </ul>"},{"location":"15_%E5%A0%86%E4%B8%8E%E5%A0%86%E6%8E%92%E5%BA%8F/heap_and_heapsort/#_7","title":"\u5ef6\u4f38\u9605\u8bfb","text":"<ul> <li>\u300a\u7b97\u6cd5\u5bfc\u8bba\u300b\u7b2c 6 \u7ae0 Heapsort</li> <li>\u300aData Structures and Algorithms in Python\u300b 13.5 \u8282 Heapsort</li> <li>\u9605\u8bfb Python heapq \u6a21\u5757\u7684\u6587\u6863</li> </ul>"},{"location":"15_%E5%A0%86%E4%B8%8E%E5%A0%86%E6%8E%92%E5%BA%8F/heap_and_heapsort/#leetcode","title":"Leetcode","text":"<p>\u5408\u5e76 k \u4e2a\u6709\u5e8f\u94fe\u8868 https://leetcode.com/problems/merge-k-sorted-lists/description/</p>"},{"location":"16_%E4%BC%98%E5%85%88%E7%BA%A7%E9%98%9F%E5%88%97/priority_queue/","title":"\u4f18\u5148\u7ea7\u961f\u5217","text":"<p>\u4f60\u53ef\u80fd\u6bd4\u8f83\u5947\u602a\uff0c\u961f\u5217\u4e0d\u662f\u65e9\u5c31\u8bb2\u4e86\u561b\u3002\u8fd9\u91cc\u4e4b\u6240\u4ee5\u653e\u5230\u8fd9\u91cc\u8bb2\u4f18\u5148\u7ea7\u961f\u5217\uff0c\u662f\u56e0\u4e3a\u867d\u7136\u540d\u5b57\u6709\u961f\u5217\uff0c \u4f46\u5176\u5b9e\u662f\u4f7f\u7528\u5806\u6765\u5b9e\u73b0\u7684\u3002\u4e0a\u4e00\u7ae0\u8bb2\u5b8c\u4e86\u5806\uff0c\u8fd9\u4e00\u7ae0\u6211\u4eec\u5c31\u8d81\u70ed\u6253\u94c1\u6765\u5b9e\u73b0\u4e00\u4e2a\u4f18\u5148\u7ea7\u961f\u5217\u3002</p>"},{"location":"16_%E4%BC%98%E5%85%88%E7%BA%A7%E9%98%9F%E5%88%97/priority_queue/#_2","title":"\u5b9e\u73b0\u4f18\u5148\u7ea7\u961f\u5217","text":"<p>\u4f18\u5148\u7ea7\u961f\u5217(Priority Queue) \u987e\u540d\u601d\u4e49\uff0c\u5c31\u662f\u5165\u961f\u7684\u65f6\u5019\u53ef\u4ee5\u7ed9\u4e00\u4e2a\u4f18\u5148\u7ea7\uff0c\u901a\u5e38\u662f\u4e2a\u6570\u5b57\u6216\u8005\u65f6\u95f4\u6233\u7b49\uff0c \u5f53\u51fa\u961f\u7684\u65f6\u5019\u6211\u4eec\u5e0c\u671b\u6309\u7167\u7ed9\u5b9a\u7684\u4f18\u5148\u7ea7\u51fa\u961f\uff0c\u6211\u4eec\u6309\u7167 TDD(\u6d4b\u8bd5\u9a71\u52a8\u5f00\u53d1) \u7684\u65b9\u5f0f\u5148\u6765\u5199\u6d4b\u8bd5\u4ee3\u7801\uff1a</p> <pre><code>def test_priority_queue():\n    size = 5\n    pq = PriorityQueue(size)\n    pq.push(5, 'purple')    # priority, value\n    pq.push(0, 'white')\n    pq.push(3, 'orange')\n    pq.push(1, 'black')\n\n    res = []\n    while not pq.is_empty():\n        res.append(pq.pop())\n    assert res == ['purple', 'orange', 'black', 'white']\n</code></pre> <p>\u4e0a\u8fb9\u5c31\u662f\u671f\u671b\u7684\u884c\u4e3a\uff0c\u5199\u5b8c\u6d4b\u8bd5\u4ee3\u7801\u540e\u6211\u4eec\u6765\u7f16\u5199\u4f18\u5148\u7ea7\u961f\u5217\u7684\u4ee3\u7801\uff0c\u6309\u7167\u51fa\u961f\u7684\u65f6\u5019\u6700\u5927\u4f18\u5148\u7ea7\u5148\u51fa\u7684\u987a\u5e8f\uff1a</p> <pre><code>class PriorityQueue(object):\n    def __init__(self, maxsize):\n        self.maxsize = maxsize\n        self._maxheap = MaxHeap(maxsize)\n\n    def push(self, priority, value):\n        # \u6ce8\u610f\u8fd9\u91cc\u628a\u8fd9\u4e2a tuple push \u8fdb\u53bb\uff0cpython \u6bd4\u8f83 tuple \u4ece\u7b2c\u4e00\u4e2a\u5f00\u59cb\u6bd4\u8f83\n        # \u8fd9\u6837\u5c31\u5f88\u5de7\u5999\u5730\u5b9e\u73b0\u4e86\u6309\u7167\u4f18\u5148\u7ea7\u6392\u5e8f\n        entry = (priority, value)    # \u5165\u961f\u7684\u65f6\u5019\u4f1a\u6839\u636e priority \u7ef4\u6301\u5806\u7684\u7279\u6027\n        self._maxheap.add(entry)\n\n    def pop(self, with_priority=False):\n        entry = self._maxheap.extract()\n        if with_priority:\n            return entry\n        else:\n            return entry[1]\n\n    def is_empty(self):\n        return len(self._maxheap) == 0\n</code></pre>"},{"location":"16_%E4%BC%98%E5%85%88%E7%BA%A7%E9%98%9F%E5%88%97/priority_queue/#_3","title":"\u7ec3\u4e60\u9898","text":"<ul> <li>\u8bf7\u4f60\u5b9e\u73b0\u6309\u7167\u5c0f\u4f18\u5148\u7ea7\u5148\u51fa\u961f\u7684\u987a\u5e8f\u7684\u4f18\u5148\u7ea7\u961f\u5217</li> </ul>"},{"location":"17_%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/binary_search_tree/","title":"\u4e8c\u53c9\u67e5\u627e\u6811(BST)","text":"<p>\u4e8c\u53c9\u6811\u7684\u4e00\u79cd\u5e94\u7528\u5c31\u662f\u6765\u5b9e\u73b0\u5806\uff0c\u4eca\u5929\u6211\u4eec\u518d\u770b\u770b\u7528\u4e8c\u53c9\u67e5\u627e\u6811(Binary Search Tree, BST)\u3002 \u524d\u9762\u6709\u7ae0\u8282\u8bf4\u5230\u4e86\u67e5\u627e\u64cd\u4f5c\uff0c\u5305\u62ec\u7ebf\u6027\u67e5\u627e\u3001\u4e8c\u5206\u67e5\u627e\u3001\u54c8\u5e0c\u67e5\u627e\u7b49\uff0c\u7ebf\u6027\u67e5\u627e\u6548\u7387\u6bd4\u8f83\u4f4e\uff0c\u4e8c\u5206\u53c8\u8981\u6c42\u5fc5\u987b\u662f\u6709\u5e8f\u7684\u5e8f\u5217\uff0c \u4e3a\u4e86\u7ef4\u6301\u6709\u5e8f\u63d2\u5165\u7684\u4ee3\u4ef7\u6bd4\u8f83\u9ad8\u3001\u54c8\u5e0c\u67e5\u627e\u6548\u7387\u5f88\u9ad8\u4f46\u662f\u6d6a\u8d39\u7a7a\u95f4\u3002\u80fd\u4e0d\u80fd\u6709\u4e00\u79cd\u63d2\u5165\u548c\u67e5\u627e\u90fd\u6bd4\u8f83\u5feb\u7684\u6570\u636e\u7ed3\u6784\u5462\uff1f\u4e8c\u53c9\u67e5\u627e\u6811\u5c31\u662f\u8fd9\u6837\u4e00\u79cd\u7ed3\u6784\uff0c\u53ef\u4ee5\u9ad8\u6548\u5730\u63d2\u5165\u548c\u67e5\u8be2\u8282\u70b9\u3002</p>"},{"location":"17_%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/binary_search_tree/#bst_1","title":"BST \u5b9a\u4e49","text":"<p>\u4e8c\u53c9\u67e5\u627e\u6811\u662f\u8fd9\u6837\u4e00\u79cd\u4e8c\u53c9\u6811\u7ed3\u6784\uff0c\u5b83\u7684\u6bcf\u4e2a\u8282\u70b9\u5305\u542b\u4e00\u4e2a key \u548c\u5b83\u9644\u5e26\u7684\u6570\u636e\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u5185\u90e8\u8282\u70b9 V\uff1a</p> <ul> <li>\u6240\u6709 key \u5c0f\u4e8e V \u7684\u90fd\u88ab\u5b58\u50a8\u5728 V \u7684\u5de6\u5b50\u6811</li> <li>\u6240\u6709 key \u5927\u4e8e V \u7684\u90fd\u5b58\u50a8\u5728 V \u7684\u53f3\u5b50\u6811</li> </ul> <p></p> <p>\u6ce8\u610f\u8fd9\u4e2a\u9650\u5236\u6761\u4ef6\uff0c\u53ef\u522b\u548c\u5806\u641e\u6df7\u4e86\u3002\u8bf4\u767d\u4e86\u5c31\u662f\u5bf9\u4e8e\u6bcf\u4e2a\u5185\u90e8\u8282\u70b9\uff0c\u5de6\u5b50\u6811\u7684 key \u90fd\u6bd4\u5b83\u5c0f\uff0c\u53f3\u5b50\u6811\u90fd\u6bd4\u5b83\u5927\u3002 \u5982\u679c\u4e2d\u5e8f\u904d\u5386(\u4e8c\u53c9\u6811\u904d\u5386\u8bb2\u8fc7\u4e86)\u8fd9\u9897\u4e8c\u53c9\u6811\uff0c\u4f60\u4f1a\u53d1\u73b0\u8f93\u51fa\u7684\u987a\u5e8f\u6b63\u597d\u662f\u6709\u5e8f\u7684\u3002 \u6211\u4eec\u5148\u6765\u5b9a\u4e49\u4e00\u4e0b BST \u7684\u8282\u70b9\u7ed3\u6784\uff1a</p> <pre><code>class BSTNode(object):\n    def __init__(self, key, value, left=None, right=None):\n        self.key, self.value, self.left, self.right = key, value, left, right\n</code></pre>"},{"location":"17_%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/binary_search_tree/#bst_2","title":"\u6784\u9020\u4e00\u4e2a BST","text":"<p>\u6211\u4eec\u8fd8\u50cf\u4e4b\u524d\u6784\u9020\u4e8c\u53c9\u6811\u4e00\u6837\uff0c\u6309\u7167\u4e0a\u56fe\u6784\u9020\u4e00\u4e2a BST \u7528\u6765\u6f14\u793a\uff1a</p> <pre><code>class BST(object):\n    def __init__(self, root=None):\n        self.root = root\n\n    @classmethod\n    def build_from(cls, node_list):\n        cls.size = 0\n        key_to_node_dict = {}\n        for node_dict in node_list:\n            key = node_dict['key']\n            key_to_node_dict[key] = BSTNode(key, value=key)   # \u8fd9\u91cc\u503c\u6682\u65f6\u7528 \u548c key\u4e00\u6837\u7684\n\n        for node_dict in node_list:\n            key = node_dict['key']\n            node = key_to_node_dict[key]\n            if node_dict['is_root']:\n                root = node\n            node.left = key_to_node_dict.get(node_dict['left'])\n            node.right = key_to_node_dict.get(node_dict['right'])\n            cls.size += 1\n        return cls(root)\n\n\nNODE_LIST = [\n    {'key': 60, 'left': 12, 'right': 90, 'is_root': True},\n    {'key': 12, 'left': 4, 'right': 41, 'is_root': False},\n    {'key': 4, 'left': 1, 'right': None, 'is_root': False},\n    {'key': 1, 'left': None, 'right': None, 'is_root': False},\n    {'key': 41, 'left': 29, 'right': None, 'is_root': False},\n    {'key': 29, 'left': 23, 'right': 37, 'is_root': False},\n    {'key': 23, 'left': None, 'right': None, 'is_root': False},\n    {'key': 37, 'left': None, 'right': None, 'is_root': False},\n    {'key': 90, 'left': 71, 'right': 100, 'is_root': False},\n    {'key': 71, 'left': None, 'right': 84, 'is_root': False},\n    {'key': 100, 'left': None, 'right': None, 'is_root': False},\n    {'key': 84, 'left': None, 'right': None, 'is_root': False},\n]\nbst = BST.build_from(NODE_LIST)\n</code></pre>"},{"location":"17_%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/binary_search_tree/#bst_3","title":"BST \u64cd\u4f5c","text":""},{"location":"17_%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/binary_search_tree/#_1","title":"\u67e5\u627e","text":"<p>\u5982\u4f55\u67e5\u627e\u4e00\u4e2a\u6307\u5b9a\u7684\u8282\u70b9\u5462\uff0c\u6839\u636e\u5b9a\u4e49\u6211\u4eec\u77e5\u9053\u6bcf\u4e2a\u5185\u90e8\u8282\u70b9\u5de6\u5b50\u6811\u7684 key \u90fd\u6bd4\u5b83\u5c0f\uff0c\u53f3\u5b50\u6811\u7684 key \u90fd\u6bd4\u5b83\u5927\uff0c\u6240\u4ee5 \u5bf9\u4e8e\u5e26\u67e5\u627e\u7684\u8282\u70b9 search_key\uff0c\u4ece\u6839\u8282\u70b9\u5f00\u59cb\uff0c\u5982\u679c search_key \u5927\u4e8e\u5f53\u524d key\uff0c\u5c31\u53bb\u53f3\u5b50\u6811\u67e5\u627e\uff0c\u5426\u5219\u53bb\u5de6\u5b50\u6811\u67e5\u627e\u3002 \u4e00\u76f4\u5230\u5f53\u524d\u8282\u70b9\u662f None \u4e86\u8bf4\u660e\u6ca1\u627e\u5230\u5bf9\u5e94 key\u3002</p> <p></p> <p>\u597d\uff0c\u64b8\u4ee3\u7801\uff1a</p> <pre><code>    def _bst_search(self, subtree, key):\n        if subtree is None:   # \u6ca1\u627e\u5230\n            return None\n        elif key &lt; subtree.key:\n            return self._bst_search(subtree.left, key)\n        elif key &gt; subtree.key:\n            return self._bst_search(subtree.right, key)\n        else:\n            return subtree\n\n    def get(self, key, default=None):\n        node = self._bst_search(self.root, key)\n        if node is None:\n            return default\n        else:\n            return node.value\n</code></pre>"},{"location":"17_%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/binary_search_tree/#key","title":"\u83b7\u53d6\u6700\u5927\u548c\u6700\u5c0f key \u7684\u8282\u70b9","text":"<p>\u5176\u5b9e\u8fd8\u6309\u7167\u5176\u5b9a\u4e49\uff0c\u6700\u5c0f\u503c\u5c31\u4e00\u76f4\u5411\u7740\u5de6\u5b50\u6811\u627e\uff0c\u6700\u5927\u503c\u4e00\u76f4\u5411\u53f3\u5b50\u6811\u627e\uff0c\u9012\u5f52\u67e5\u627e\u5c31\u884c\u3002</p> <pre><code>    def _bst_min_node(self, subtree):\n        if subtree is None:\n            return None\n        elif subtree.left is None:   # \u627e\u5230\u5de6\u5b50\u6811\u7684\u5934\n            return subtree\n        else:\n            return self._bst_min_node(subtree.left)\n\n    def bst_min(self):\n        node = self._bst_min_node(self.root)\n        return node.value if node else None\n</code></pre>"},{"location":"17_%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/binary_search_tree/#_2","title":"\u63d2\u5165","text":"<p>\u63d2\u5165\u8282\u70b9\u7684\u65f6\u5019\u6211\u4eec\u9700\u8981\u4e00\u76f4\u4fdd\u6301 BST \u7684\u6027\u8d28\uff0c\u6bcf\u6b21\u63d2\u5165\u4e00\u4e2a\u8282\u70b9\uff0c\u6211\u4eec\u90fd\u901a\u8fc7\u9012\u5f52\u6bd4\u8f83\u628a\u5b83\u653e\u5230\u6b63\u786e\u7684\u4f4d\u7f6e\u3002 \u4f60\u4f1a\u53d1\u73b0\u65b0\u8282\u70b9\u603b\u662f\u88ab\u4f5c\u4e3a\u53f6\u5b50\u7ed3\u70b9\u63d2\u5165\u3002\uff08\u8bf7\u4f60\u601d\u8003\u8fd9\u662f\u4e3a\u4ec0\u4e48\uff09</p> <p></p> <pre><code>    def _bst_insert(self, subtree, key, value):\n        \"\"\" \u63d2\u5165\u5e76\u4e14\u8fd4\u56de\u6839\u8282\u70b9\n\n        :param subtree:\n        :param key:\n        :param value:\n        \"\"\"\n        if subtree is None:   # \u63d2\u5165\u7684\u8282\u70b9\u4e00\u5b9a\u662f\u6839\u8282\u70b9\uff0c\u5305\u62ec root \u4e3a\u7a7a\u7684\u60c5\u51b5\n            subtree = BSTNode(key, value)\n        elif key &lt; subtree.key:\n            subtree.left = self._bst_insert(subtree.left, key, value)\n        elif key &gt; subtree.key:\n            subtree.right = self._bst_insert(subtree.right, key, value)\n        return subtree\n\n    def add(self, key, value):\n        node = self._bst_search(self.root, key)\n        if node is not None:   # \u66f4\u65b0\u5df2\u7ecf\u5b58\u5728\u7684 key\n            node.value = value\n            return False\n        else:\n            self.root = self._bst_insert(self.root, key, value)\n            self.size += 1\n            return True\n</code></pre>"},{"location":"17_%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/binary_search_tree/#_3","title":"\u5220\u9664\u8282\u70b9","text":"<p>\u5220\u9664\u64cd\u4f5c\u76f8\u6bd4\u4e0a\u8fb9\u7684\u64cd\u4f5c\u8981\u9ebb\u70e6\u5f88\u591a\uff0c\u9996\u5148\u9700\u8981\u5b9a\u4f4d\u4e00\u4e2a\u8282\u70b9\uff0c\u5220\u9664\u8282\u70b9\u540e\uff0c\u6211\u4eec\u9700\u8981\u59cb\u7ec8\u4fdd\u6301 BST \u7684\u6027\u8d28\u3002 \u5220\u9664\u4e00\u4e2a\u8282\u70b9\u6d89\u53ca\u5230\u4e09\u79cd\u60c5\u51b5\uff1a</p> <ul> <li>\u8282\u70b9\u662f\u53f6\u8282\u70b9</li> <li>\u8282\u70b9\u6709\u4e00\u4e2a\u5b69\u5b50</li> <li>\u8282\u70b9\u6709\u4e24\u4e2a\u5b69\u5b50</li> </ul> <p>\u6211\u4eec\u5206\u522b\u6765\u770b\u770b\u4e09\u79cd\u60c5\u51b5\u4e0b\u5982\u4f55\u5220\u9664\u4e00\u4e2a\u8282\u70b9\uff1a</p>"},{"location":"17_%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/binary_search_tree/#_4","title":"\u5220\u9664\u53f6\u8282\u70b9","text":"<p>\u8fd9\u662f\u6700\u7b80\u5355\u7684\u4e00\u79cd\u60c5\u51b5\uff0c\u53ea\u9700\u8981\u628a\u5b83\u7684\u7236\u4eb2\u6307\u5411\u5b83\u7684\u6307\u9488\u8bbe\u7f6e\u4e3a None \u5c31\u597d\u3002</p> <p></p>"},{"location":"17_%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/binary_search_tree/#_5","title":"\u5220\u9664\u53ea\u6709\u4e00\u4e2a\u5b69\u5b50\u7684\u8282\u70b9","text":"<p>\u5220\u9664\u6709\u4e00\u4e2a\u5b69\u5b50\u7684\u8282\u70b9\u65f6\uff0c\u6211\u4eec\u62ff\u6389\u9700\u8981\u5220\u9664\u7684\u8282\u70b9\uff0c\u4e4b\u540e\u628a\u5b83\u7684\u7236\u4eb2\u6307\u5411\u5b83\u7684\u5b69\u5b50\u5c31\u884c\uff0c\u56e0\u4e3a\u6839\u636e BST \u5de6\u5b50\u6811\u90fd\u5c0f\u4e8e\u8282\u70b9\uff0c\u53f3\u5b50\u6811\u90fd\u5927\u4e8e\u8282\u70b9\u7684\u7279\u6027\uff0c\u5220\u9664\u5b83\u4e4b\u540e\u8fd9\u4e2a\u6761\u4ef6\u4f9d\u65e7\u6ee1\u8db3\u3002</p> <p></p>"},{"location":"17_%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/binary_search_tree/#_6","title":"\u5220\u9664\u6709\u4e24\u4e2a\u5b69\u5b50\u7684\u5185\u90e8\u8282\u70b9","text":"<p>\u5047\u5982\u6211\u4eec\u60f3\u5220\u9664 12 \u8fd9\u4e2a\u8282\u70b9\u6539\u600e\u4e48\u505a\u5462\uff1f\u4f60\u7684\u7b2c\u4e00\u53cd\u5e94\u53ef\u80fd\u662f\u6309\u7167\u4e0b\u56fe\u7684\u65b9\u5f0f\uff1a</p> <p></p> <p>\u4f46\u662f\u8fd9\u79cd\u65b9\u5f0f\u53ef\u80fd\u4f1a\u5f71\u54cd\u6811\u7684\u9ad8\u5ea6\uff0c\u964d\u4f4e\u67e5\u627e\u7684\u6548\u7387\u3002\u8fd9\u91cc\u6211\u4eec\u7528\u53e6\u4e00\u79cd\u975e\u5e38\u5de7\u5999\u7684\u65b9\u5f0f\u3002 \u8fd8\u8bb0\u5f97\u4e0a\u8fb9\u63d0\u5230\u7684\u5417\uff0c\u5982\u679c\u4f60\u4e2d\u5e8f\u904d\u5386 BST \u5e76\u4e14\u8f93\u51fa\u6bcf\u4e2a\u8282\u70b9\u7684 key\uff0c\u4f60\u4f1a\u53d1\u73b0\u5c31\u662f\u4e00\u4e2a\u6709\u5e8f\u7684\u6570\u7ec4\u3002 <code>[1 4 12 23 29 37 41 60 71 84 90 100]</code>\u3002\u8fd9\u91cc\u6211\u4eec\u5b9a\u4e49\u4e24\u4e2a\u6982\u5ff5\uff0c\u903b\u8f91\u524d\u4efb(predecessor)\u548c\u540e\u7ee7(successor)\uff0c\u8bf7\u770b\u4e0b\u56fe:</p> <p></p> <p>12 \u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u7684\u903b\u8f91\u524d\u4efb\u548c\u540e\u7ee7\u5206\u522b\u662f 4 \u548c 23 \u8282\u70b9\u3002\u4e8e\u662f\u6211\u4eec\u8fd8\u6709\u4e00\u79cd\u65b9\u6cd5\u6765\u5220\u9664 12 \u8fd9\u4e2a\u8282\u70b9\uff1a</p> <ul> <li>\u627e\u5230\u5f85\u5220\u9664\u8282\u70b9 N(12) \u7684\u540e\u7ee7\u8282\u70b9 S(23)</li> <li>\u590d\u5236\u8282\u70b9 S \u5230\u8282\u70b9 N</li> <li>\u4ece N \u7684\u53f3\u5b50\u6811\u4e2d\u5220\u9664\u8282\u70b9 S\uff0c\u5e76\u66f4\u65b0\u5176\u5220\u9664\u540e\u7ee7\u8282\u70b9\u540e\u7684\u53f3\u5b50\u6811</li> </ul> <p>\u8bf4\u767d\u4e86\u5c31\u662f\u627e\u5230\u540e\u7ee7\u5e76\u4e14\u66ff\u6362\uff0c\u8fd9\u91cc\u4e4b\u6240\u4ee5\u80fd\u4fdd\u8bc1\u8fd9\u79cd\u65b9\u6cd5\u662f\u6b63\u786e\u7684\uff0c\u4f60\u4f1a\u53d1\u73b0\u66ff\u6362\u540e\u4f9d\u65e7\u662f\u4fdd\u6301\u4e86 BST \u7684\u6027\u8d28\u3002 \u6709\u4e2a\u95ee\u9898\u662f\u5982\u4f55\u627e\u5230\u540e\u7ee7\u8282\u70b9\u5462\uff1f\u5f85\u5220\u9664\u8282\u70b9\u7684\u53f3\u5b50\u6811\u7684\u6700\u5c0f\u7684\u8282\u70b9\u4e0d\u5c31\u662f\u540e\u7ee7\u561b\uff0c\u4e0a\u8fb9\u6211\u4eec\u5df2\u7ecf\u5b9e\u73b0\u4e86\u627e\u5230\u6700\u5c0f key \u7684\u65b9\u6cd5\u4e86\u3002</p> <p></p> <p>\u6211\u4eec\u5f00\u59cb\u7f16\u5199\u4ee3\u7801\u5b9e\u73b0\uff0c\u548c\u4e4b\u524d\u7684\u64cd\u4f5c\u7c7b\u4f3c\uff0c\u6211\u4eec\u8fd8\u662f\u901a\u8fc7\u8f85\u52a9\u51fd\u6570\u7684\u5f62\u5f0f\u6765\u5b9e\u73b0\uff0c\u8fd9\u4e2a\u9012\u5f52\u51fd\u6570\u4f1a\u6bd4\u8f83\u590d\u6742\uff0c\u8bf7\u4f60\u4ed4\u7ec6\u7406\u89e3:</p> <pre><code>    def _bst_remove(self, subtree, key):\n        \"\"\"\u5220\u9664\u8282\u70b9\u5e76\u8fd4\u56de\u6839\u8282\u70b9\"\"\"\n        if subtree is None:\n            return None\n        elif key &lt; subtree.key:\n            subtree.left = self._bst_remove(subtree.left, key)\n            return subtree\n        elif key &gt; subtree.key:\n            subtree.right = self._bst_remove(subtree.right, key)\n            return subtree\n        else:  # \u627e\u5230\u4e86\u9700\u8981\u5220\u9664\u7684\u8282\u70b9\n            if subtree.left is None and subtree.right is None:    # \u53f6\u8282\u70b9\uff0c\u8fd4\u56de None \u628a\u5176\u7236\u4eb2\u6307\u5411\u5b83\u7684\u6307\u9488\u7f6e\u4e3a None\n                return None\n            elif subtree.left is None or subtree.right is None:  # \u53ea\u6709\u4e00\u4e2a\u5b69\u5b50\n                if subtree.left is not None:\n                    return subtree.left   # \u8fd4\u56de\u5b83\u7684\u5b69\u5b50\u5e76\u8ba9\u5b83\u7684\u7236\u4eb2\u6307\u8fc7\u53bb\n                else:\n                    return subtree.right\n            else:  # \u4fe9\u5b69\u5b50\uff0c\u5bfb\u627e\u540e\u7ee7\u8282\u70b9\u66ff\u6362\uff0c\u5e76\u4ece\u5f85\u5220\u8282\u70b9\u7684\u53f3\u5b50\u6811\u4e2d\u5220\u9664\u540e\u7ee7\u8282\u70b9\n                successor_node = self._bst_min_node(subtree.right)\n                subtree.key, subtree.value = successor_node.key, successor_node.value\n                subtree.right = self._bst_remove(subtree.right, successor_node.key)\n                return subtree\n\n    def remove(self, key):\n        assert key in self\n        self.size -= 1\n        return self._bst_remove(self.root, key)\n</code></pre> <p>\u5b8c\u6574\u4ee3\u7801\u4f60\u53ef\u4ee5\u5728\u672c\u7ae0\u7684 bst.py  \u627e\u5230\u3002 \u53e6\u5916\u63a8\u8350\u4e00\u4e2a\u53ef\u4ee5\u5728\u7ebf\u6f14\u793a\u8fc7\u7a0b\u7684\u7f51\u5740\u5927\u5bb6\u53ef\u4ee5\u624b\u52a8\u6267\u884c\u4e0b\u770b\u770b\u6548\u679c\uff1a https://www.cs.usfca.edu/~galles/visualization/BST.html</p>"},{"location":"17_%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/binary_search_tree/#_7","title":"\u65f6\u95f4\u590d\u6742\u5ea6\u5206\u6790","text":"<p>\u4e0a\u8fb9\u4ecb\u7ecd\u7684\u64cd\u4f5c\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u4e8c\u53c9\u6811\u7684\u5f62\u72b6\u6709\u5173\u3002\u5e73\u5747\u6765\u8bf4\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u548c\u6811\u7684\u9ad8\u5ea6\u6210\u6b63\u6bd4\u7684\uff0c\u6811\u7684\u9ad8\u5ea6 h \u662f log(n)\uff0c \u4f46\u662f\u6700\u574f\u60c5\u51b5\u4e0b\u4ee5\u4e0a\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f O(n)\u3002\u4e3a\u4e86\u6539\u5584 BST \u6709\u5f88\u591a\u53d8\u79cd\uff0c\u611f\u5174\u8da3\u8bf7\u53c2\u8003\u5ef6\u4f38\u9605\u8bfb\u4e2d\u7684\u5185\u5bb9\u3002</p> <p></p>"},{"location":"17_%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/binary_search_tree/#_8","title":"\u7ec3\u4e60\u9898\uff1a","text":"<ul> <li>\u8bf7\u4f60\u5b9e\u73b0\u67e5\u627e BST \u6700\u5927\u503c\u7684\u51fd\u6570</li> </ul>"},{"location":"17_%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/binary_search_tree/#_9","title":"\u5ef6\u4f38\u9605\u8bfb","text":"<ul> <li>\u300aData Structures and Algorithms in Python\u300b14 \u7ae0\uff0c\u6811\u7684\u6982\u5ff5\u548c\u7b97\u6cd5\u8fd8\u6709\u5f88\u591a\uff0c\u6211\u4eec\u8fd9\u91cc\u4ecb\u7ecd\u6700\u57fa\u672c\u7684\u5e2e\u4f60\u6253\u4e2a\u57fa\u7840</li> <li>\u4e86\u89e3\u7ea2\u9ed1\u6811\u3002\u666e\u901a\u4e8c\u53c9\u67e5\u627e\u6811\u6709\u4e2a\u5f88\u5927\u7684\u95ee\u9898\u5c31\u662f\u96be\u4ee5\u4fdd\u8bc1\u6811\u7684\u5e73\u8861\uff0c\u6781\u7aef\u60c5\u51b5\u4e0b\u67d0\u4e9b\u8282\u70b9\u53ef\u80fd\u4f1a\u975e\u5e38\u6df1\uff0c\u5bfc\u81f4\u67e5\u627e\u590d\u6742\u5ea6\u5927\u5e45\u9000\u5316\u3002\u800c\u5e73\u8861\u4e8c\u53c9\u6811\u5c31\u662f\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u8bf7\u641c\u7d22\u5bf9\u5e94\u8d44\u6599\u4e86\u89e3\u4e0b\u3002</li> <li>\u4e86\u89e3 mysql \u7d22\u5f15\u4f7f\u7528\u7684 B-Tree \u7ed3\u6784(\u591a\u8def\u5e73\u8861\u67e5\u627e\u6811)\uff0c\u8fd9\u4e2a\u662f\u540e\u7aef\u9762\u8bd5\u6570\u636e\u5e93\u7684\u5e38\u8003\u70b9\u3002\u60f3\u60f3\u4e3a\u4ec0\u4e48\uff1f\u5f53\u5143\u7d20\u975e\u5e38\u591a\u7684\u65f6\u5019\uff0c\u4e8c\u53c9\u6811\u7684\u6df1\u5ea6\u4f1a\u5f88\u6df1\uff0c\u5bfc\u81f4\u591a\u6b21\u78c1\u76d8\u67e5\u627e\u3002\u4eceB\u6811\u3001B+\u6811\u3001B*\u6811\u8c08\u5230R \u6811</li> </ul>"},{"location":"17_%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/binary_search_tree/#leetcode","title":"Leetcode","text":"<p>\u9a8c\u8bc1\u662f\u5426\u662f\u5408\u6cd5\u4e8c\u53c9\u641c\u7d22\u6811 [validate-binary-search-tree](https://leetcode.com/problems/validate-binary-search-tree/</p>"},{"location":"18_%E5%9B%BE%E4%B8%8E%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86/graph/","title":"\u56fe","text":"<p>\u4e4b\u524d\u4eec\u8bb2\u8fc7\u5f88\u591a\u6570\u636e\u7ed3\u6784\u4e86\uff0c\u5305\u62ec\u7ebf\u6027\u7ed3\u6784\u3001\u94fe\u5f0f\u7ed3\u6784\u3001\u6811\u7ed3\u6784\u7b49\uff0c\u8fd9\u4e9b\u7ed3\u6784\u57fa\u672c\u5c31\u80fd\u5e94\u4ed8\u6211\u4eec\u7684\u4e1a\u52a1\u5f00\u53d1\u4e86\u3002 \u8fd9\u4e00\u7ae0\u6765\u770b\u4e0b\u56fe\u7ed3\u6784\uff0c\u56fe\u7684\u4f7f\u7528\u4e5f\u6bd4\u8f83\u5e7f\u6cdb\uff0c\u6bd4\u5982\u4eba\u7269\u5173\u7cfb\u3001\u8def\u5f84\u9009\u62e9\u7b49\u7b49\uff0c\u76f8\u6bd4\u524d\u9762\u7684\u4e00\u4e9b\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u8981\u76f8\u5bf9\u590d\u6742\u4e00\u4e9b\u3002 \u4e0d\u8fc7\u4e5f\u4e0d\u7528\u62c5\u5fc3\uff0c\u9664\u975e\u662f\u7279\u5b9a\u7684\u540e\u7aef\u4e1a\u52a1\uff0c\u4e00\u822c\u56fe\u7ed3\u6784\u7684\u4f7f\u7528\u6bd4\u8f83\u5c11\u3002\u8fd9\u4e00\u7ae0\u6211\u4eec\u7b80\u5355\u5730\u4ecb\u7ecd\u4e0b\u56fe\u7ed3\u6784\uff0c\u4ee5\u53ca\u56fe\u7684\u641c\u7d22\u7b97\u6cd5\u3002</p>"},{"location":"18_%E5%9B%BE%E4%B8%8E%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86/graph/#_2","title":"\u4ec0\u4e48\u662f\u56fe\uff1f","text":"<p>\u6211\u4eec\u5148\u6765\u8003\u8651\u65e5\u5e38\u751f\u6d3b\u4e2d\u7684\u4e00\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u5728\u51fa\u884c\u7684\u65f6\u5019\u4e00\u822c\u4f1a\u8003\u8651\u4f7f\u7528\u5730\u56fe\u8f6f\u4ef6\u641c\u4e0b\u4ece\u4e00\u4e2a\u5730\u70b9\u5230\u53e6\u5916\u4e00\u4e2a\u5730\u70b9\u7684\u8def\u7ebf\u3002 \u8fd9\u91cc\u628a\u5730\u70b9\u62bd\u8c61\u6210\u4e00\u4e2a\u5708\uff0c\u8def\u5f84\u62bd\u8c61\u6210\u7ebf\uff0c\u4e8e\u662f\u4e4e\u5c31\u6709\u4e86\u4e0b\u9762\u7684\u56fe\uff0c\u5176\u5b9e\u8fd8\u662f\u975e\u5e38\u597d\u7406\u89e3\u7684\u3002</p> <p></p> <p>\u7b80\u5355\u5730\u8bf4\u5c31\u662f\u6709\u8282\u70b9(node)\u548c\u8fb9(edge)\u7ec4\u6210\u7684\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u76f8\u90bb\u7684\u8282\u70b9\u79f0\u4e4b\u4e3a\u90bb\u5c45\u3002 \u6ce8\u610f\u56fe\u5206\u4e3a\u6709\u5411\u56fe\u548c\u65e0\u5411\u56fe\uff0c \u6bd4\u5982\u6709\u4e9b\u8def\u662f\u5355\u884c\u9053\uff0c\u6709\u4e9b\u662f\u53cc\u884c\u9053\uff0c\u6709\u5411\u56fe\u6211\u4eec\u7528\u7bad\u5934\u6307\u5411\uff0c\u65e0\u5411\u56fe\u5c31\u662f\u4e00\u6761\u76f4\u7ebf\u8fde\u63a5\u3002</p>"},{"location":"18_%E5%9B%BE%E4%B8%8E%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86/graph/#_3","title":"\u56fe\u7684\u8868\u793a","text":"<p>\u90a3\u6211\u4eec\u600e\u4e48\u628a\u4e00\u4e2a\u56fe\u62bd\u8c61\u6210\u4ee3\u7801\u6765\u8868\u793a\u5462\uff1f\u56e0\u4e3a\u6700\u7ec8\u6211\u4eec\u8fd8\u662f\u9700\u8981\u4ee3\u7801\u6765\u5b9e\u73b0\u7684\u3002\u901a\u5e38\u6709\u4e24\u79cd\u8868\u793a\u65b9\u6cd5\uff0c\u90bb\u63a5\u8868\u6cd5\u548c\u90bb\u63a5\u77e9\u9635\u8868\u793a\u3002</p> <p></p> <ul> <li>\u90bb\u63a5\u8868\u6cd5\uff1a\u5bf9\u4e8e\u6bcf\u4e2a\u56fe\u4e2d\u7684\u70b9\uff0c\u5c06\u5b83\u7684\u90bb\u5c45\u653e\u5230\u4e00\u4e2a\u94fe\u8868\u91cc</li> <li>\u90bb\u63a5\u77e9\u9635\uff1a\u5bf9\u4e8e n \u4e2a\u70b9\uff0c\u6784\u9020\u4e00\u4e2a n * n \u7684\u77e9\u9635\uff0c\u5982\u679c\u6709\u4ece\u70b9 i \u5230\u70b9 j \u7684\u8fb9\uff0c\u5c31\u5c06\u77e9\u9635\u7684\u4f4d\u7f6e matrix[i][j] \u7f6e\u4e3a 1.</li> </ul> <p>\u4e0d\u8fc7\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u7528\u77e9\u9635\u5b58\u50a8\u56fe\u662f\u975e\u5e38\u8017\u8d39\u7a7a\u95f4\u7684\uff0c\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u77e9\u9635\u662f\u7a00\u758f\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u540e\u8fb9\u9009\u62e9\u4f7f\u7528\u90bb\u63a5\u8868\u3002</p>"},{"location":"18_%E5%9B%BE%E4%B8%8E%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86/graph/#_4","title":"\u56fe\u7684\u904d\u5386","text":"<p>\u904d\u5386\u56fe\u6700\u5e38\u7528\u7684\u6709\u4e24\u79cd\u65b9\u5f0f\uff0c\u5c31\u662f\u4f60\u5e38\u542c\u5230\u7684 BFS \u548c DFS.</p> <ul> <li>BFS: Breadth First Search\uff0c\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22</li> <li>DFS: Depdth First Search\uff0c\u6df1\u5ea6\u4f18\u5148\u641c\u7d22</li> </ul>"},{"location":"18_%E5%9B%BE%E4%B8%8E%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86/graph/#bfs","title":"BFS","text":"<p>BFS \u7c7b\u4f3c\u4e8e\u6811\u7684\u5c42\u5e8f\u904d\u5386\uff0c\u4ece\u7b2c\u4e00\u4e2a\u8282\u70b9\u5f00\u59cb\uff0c\u5148\u8bbf\u95ee\u79bb A \u6700\u8fd1\u7684\u70b9\uff0c\u63a5\u7740\u8bbf\u95ee\u6b21\u8fd1\u7684\u70b9\u3002\u6211\u4eec\u5148\u6765\u6784\u9020\u4e00\u4e2a\u56fe\uff1a</p> <p><pre><code>graph = {\n    'A': ['B', 'F'],\n    'B': ['C', 'I', 'G'],\n    'C': ['B', 'I', 'D'],\n    'D': ['C', 'I', 'G', 'H', 'E'],\n    'E': ['D', 'H', 'F'],\n    'F': ['A', 'G', 'E'],\n    'G': ['B', 'F', 'H', 'D'],\n    'H': ['G', 'D', 'E'],\n    'I': ['B', 'C', 'D'],\n}\n</code></pre> \u5982\u4f55\u300e\u7531\u8fd1\u53ca\u8fdc\u300f\u5730\u8bbf\u95ee\u8282\u70b9\u5462\uff1f\u6211\u4eec\u5148\u8bbf\u95ee\u8d77\u70b9 A \u7684\u90bb\u5c45\uff0c\u7136\u540e\u90bb\u5c45\u8bbf\u95ee\u5b8c\u518d\u8bbf\u95ee\u90bb\u5c45\u7684\u90bb\u5c45\u4e0d\u5c31\u884c\u4e86\uff1f \u5c31\u662f\u8fd9\u4e2a\u601d\u60f3\uff0c\u4e0d\u8fc7\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u961f\u5217\u8f85\u52a9\uff0c\u961f\u5217\u4e4b\u524d\u8bf4\u8fc7\u662f\u4e00\u79cd\u5148\u8fdb\u5148\u51fa\u7ed3\u6784\uff0c\u6211\u4eec\u53ea\u9700\u8981\u628a\u8d77\u70b9\u7684\u90bb\u5c45\u5148\u5165\u961f\uff0c \u5f53\u90bb\u5c45\u8bbf\u95ee\u5b8c\u4e86\u518d\u53bb\u8bbf\u95ee\u90bb\u5c45\u7684\u90bb\u5c45\u5c31\u53ef\u4ee5\u4e86\uff0c\u5bf9\u4e8e\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u7684\u8282\u70b9\uff0c\u6211\u4eec\u7528\u4e00\u4e2a set \u8bb0\u5f55\u5b83\u5c31\u597d\u4e86\u3002\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code># -*- coding: utf-8 -*-\n\nfrom collections import deque\n\n\nGRAPH = {\n    'A': ['B', 'F'],\n    'B': ['C', 'I', 'G'],\n    'C': ['B', 'I', 'D'],\n    'D': ['C', 'I', 'G', 'H', 'E'],\n    'E': ['D', 'H', 'F'],\n    'F': ['A', 'G', 'E'],\n    'G': ['B', 'F', 'H', 'D'],\n    'H': ['G', 'D', 'E'],\n    'I': ['B', 'C', 'D'],\n}\n\n\nclass Queue(object):\n    def __init__(self):\n        self._deque = deque()\n\n    def push(self, value):\n        return self._deque.append(value)\n\n    def pop(self):\n        return self._deque.popleft()\n\n    def __len__(self):\n        return len(self._deque)\n\n\ndef bfs(graph, start):\n    search_queue = Queue()\n    search_queue.push(start)\n    searched = set()\n    while search_queue:   # \u961f\u5217\u4e0d\u4e3a\u7a7a\u5c31\u7ee7\u7eed\n        cur_node = search_queue.pop()\n        if cur_node not in searched:\n            yield cur_node\n            searched.add(cur_node)\n            for node in graph[cur_node]:\n                search_queue.push(node)\n\nprint('bfs:')\nbfs(GRAPH, 'A')\n\"\"\"\nbfs:\nA\nB\nF\nC\nI\nG\nE\nD\nH\n\"\"\"\n</code></pre> <p></p>"},{"location":"18_%E5%9B%BE%E4%B8%8E%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86/graph/#dfs","title":"DFS","text":"<p>\u6df1\u5ea6\u4f18\u5148\u641c\u7d22(DFS)\u662f\u6bcf\u9047\u5230\u4e00\u4e2a\u8282\u70b9\uff0c\u5982\u679c\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\uff0c\u5c31\u76f4\u63a5\u53bb\u8bbf\u95ee\u5b83\u7684\u90bb\u5c45\u8282\u70b9\uff0c\u4e0d\u65ad\u52a0\u6df1\u3002\u4ee3\u7801\u5176\u5b9e\u5f88\u7b80\u5355\uff1a</p> <pre><code>DFS_SEARCHED = set()\n\n\ndef dfs(graph, start):\n    if start not in DFS_SEARCHED:\n        print(start)\n        DFS_SEARCHED.add(start)\n    for node in graph[start]:\n        if node not in DFS_SEARCHED:\n            dfs(graph, node)\n\n\nprint('dfs:')\ndfs(GRAPH, 'A')  # A B C I D G F E H\n</code></pre>"},{"location":"18_%E5%9B%BE%E4%B8%8E%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86/graph/#_5","title":"\u601d\u8003\u9898","text":"<ul> <li>DFS \u4e2d\u6211\u4eec\u4f7f\u7528\u5230\u4e86\u9012\u5f52\uff0c\u8bf7\u4f60\u7528\u6808\u6765\u6539\u5199\u8fd9\u4e2a\u51fd\u6570\uff1f\uff08\u4ee3\u7801\u91cc\u6709\u7b54\u6848\uff0c\u6211\u5efa\u8bae\u4f60\u5148\u5c1d\u8bd5\u81ea\u5df1\u5b9e\u73b0\uff09</li> </ul>"},{"location":"18_%E5%9B%BE%E4%B8%8E%E5%9B%BE%E7%9A%84%E9%81%8D%E5%8E%86/graph/#_6","title":"\u5ef6\u4f38\u9605\u8bfb","text":"<p>\u56fe\u7684\u7b97\u6cd5\u8fd8\u6709\u5f88\u591a\uff0c\u8fd9\u91cc\u5c31\u4e0d\u4e00\u4e00\u5217\u4e3e\u4e86\uff0c\u611f\u5174\u8da3\u7684\u8bfb\u8005\u53ef\u4ee5\u7ee7\u7eed\u9605\u8bfb\u4e00\u4e0b\u6750\u6599\u3002</p> <ul> <li>\u6570\u636e\u7ed3\u6784\u4e4b\u56fe</li> <li>\u300a\u7b97\u6cd5\u56fe\u89e3\u300b\u7b2c\u516d\u7ae0</li> </ul>"},{"location":"19_python%E5%86%85%E7%BD%AE%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/builtins/","title":"Python \u5237\u9898\u5e38\u7528\u5185\u7f6e\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784","text":"<p>\u76f8\u4fe1\u5230\u8fd9\u91cc\u5927\u5bb6\u5bf9\u5e38\u7528\u7684\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u53ca\u5176\u5b9e\u73b0\u90fd\u6bd4\u8f83\u719f\u6089\u4e86\u3002 \u4e4b\u524d\u5728\u6bcf\u7ae0\u7684\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u4e2d\u6d89\u53ca\u5230\u7684\u7ae0\u8282\u6211\u90fd\u4f1a\u63d0\u5230\u5bf9\u5e94\u7684 python \u5185\u7f6e\u6a21\u5757\uff0c\u4e00\u822c\u5982\u679c\u5185\u7f6e\u7684\u53ef\u4ee5\u6ee1\u8db3\u9700\u6c42\uff0c\u6211\u4eec\u4f18\u5148\u4f7f\u7528\u5185\u7f6e\u6a21\u5757\uff0c \u56e0\u4e3a\u5728\u6027\u80fd\u548c\u5bb9\u9519\u6027\u65b9\u9762\u5185\u7f6e\u6a21\u5757\u8981\u597d\u4e8e\u6211\u4eec\u81ea\u5df1\u5b9e\u73b0\uff08\u6bd4\u5982\u6709\u4e9b\u662f c \u5b9e\u73b0\u7684\uff09\u3002\u672c\u7ae0\u6211\u4eec\u4e0d\u4f1a\u518d\u5bf9\u6bcf\u4e2a\u6a21\u5757\u7684\u539f\u7406\u8be6\u7ec6\u8bf4\u660e\uff0c\u4ec5\u5217\u4e3e\u51fa\u4e00\u4e9b\u5e38\u89c1\u6a21\u5757\u4f9b\u5927\u5bb6\u53c2\u8003\uff0c \u5982\u679c\u6709\u9700\u8981\u6700\u597d\u7684\u5b66\u4e60\u65b9\u5f0f\u5c31\u662f\u53c2\u8003 Python \u7684\u5b98\u65b9\u6587\u6863\u3002\u5f88\u591a\u9ad8\u7ea7\u7684\u6570\u636e\u7ed3\u6784\u6211\u4eec\u4e5f\u53ef\u4ee5\u901a\u8fc7 google \u641c\u7d22\u73b0\u6210\u7684\u5e93\u62ff\u6765\u76f4\u63a5\u7528\u3002</p> <ul> <li>\u5e38\u7528\u5185\u7f6e\u6570\u636e\u7c7b\u578b\uff1alist, tuple, dict, set, frozenset</li> <li>collections \u6a21\u5757\uff1aCounter(\u8ba1\u6570\u5668), deque(\u53cc\u7aef\u961f\u5217), OrderedDict(\u6709\u5e8f\u5b57\u5178)\uff0cdefaultdict(\u9ed8\u8ba4\u503c\u5b57\u5178)</li> <li>heapq: \u5806\u64cd\u4f5c</li> <li>bisect: \u4e8c\u5206\u67e5\u627e</li> </ul> <p>\u4e0b\u8fb9\u6211\u5217\u4e86\u4e00\u4e2a\u5e38\u7528 python \u5185\u7f6e\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u7684\u8868\u683c\uff0c\u5982\u679c\u6709\u9057\u6f0f\u53ef\u4ee5\u5728 issue \u4e2d\u63d0\u51fa\u3002\u786e\u4fdd\u4f60\u4e86\u89e3\u8fd9\u4e9b\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u7684\u4f7f\u7528\u4ee5\u53ca\u65f6\u95f4\u3001\u7a7a\u95f4\u590d\u6742\u5ea6\u3002</p> \u6570\u636e\u7ed3\u6784/\u7b97\u6cd5 \u8bed\u8a00\u5185\u7f6e \u5185\u7f6e\u5e93 \u7ebf\u6027\u7ed3\u6784 list(\u5217\u8868)/tuple(\u5143\u7ec4) array(\u6570\u7ec4\uff0c\u4e0d\u5e38\u7528)/collections.namedtuple \u94fe\u5f0f\u7ed3\u6784 collections.deque(\u53cc\u7aef\u961f\u5217) \u5b57\u5178\u7ed3\u6784 dict(\u5b57\u5178) collections.Counter(\u8ba1\u6570\u5668)/OrderedDict(\u6709\u5e8f\u5b57\u5178)/defaultdict(\u9ed8\u8ba4\u5b57\u5178) \u96c6\u5408\u7ed3\u6784 set(\u96c6\u5408)/frozenset(\u4e0d\u53ef\u53d8\u96c6\u5408) \u6392\u5e8f\u7b97\u6cd5 sorted \u4e8c\u5206\u7b97\u6cd5 bisect\u6a21\u5757 \u5806\u7b97\u6cd5 heapq\u6a21\u5757 \u4f18\u5148\u7ea7\u961f\u5217 queue.PriorityQueue/heapq \u7f13\u5b58\u7b97\u6cd5 functools.lru_cache(Least Recent Used, python3)/cache"},{"location":"19_python%E5%86%85%E7%BD%AE%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/builtins/#_1","title":"\u4e00\u4e9b\u5751","text":"<p>\u5982\u679c\u4f60\u4f7f\u7528 python2 or python3 \u5237\u9898\uff08\u6bd4\u5982\u529b\u6263leetcode\uff09\uff0c\u6709\u4e00\u4e9b\u5751\u6216\u8005\u6280\u5de7\u9700\u8981\u6ce8\u610f\uff1a</p> <ul> <li>\u5b57\u5178\u987a\u5e8f\u3002python3 \u548c python2 \u7684 dict \u6709\u6240\u7528\u4e0d\u540c\uff0cpython3.7 \u4e4b\u540e\u7684 dict \u4f1a\u4fdd\u6301\u63d2\u5165\u987a\u5e8f(\u4e0d\u662f\u5b57\u5178\u5e8f), python2 \u4e0d\u8981\u4f9d\u8d56 dict \u8fed\u4ee3\u987a\u5e8f\uff0c\u8bf7\u4f7f\u7528 OrderedDict</li> <li>\u77e9\u9635\u3002\u6b63\u786e\u521d\u59cb\u5316\u4e00\u4e2a\u4e0d\u53ef\u53d8\u5bf9\u8c61\u7684\u4e8c\u7ef4\u6570\u7ec4\uff1a<code>dp = [ [0]*col for _ in range(row) ]</code>\uff0c\u4e0d\u8981\u7528 <code>dp = [[0] * n] * m</code>\uff0c \u5426\u5219\u91cc\u8fb9\u90fd \u5f15\u7528\u7684\u540c\u4e00\u4e2a list\uff0c\u4fee\u6539\u4e00\u4e2a\u90fd\u4f1a\u53d8\u3002<code>[[0 for _ in range(col)] for _ in range(row)]</code> \u4e5f\u53ef\u4ee5(\u7a0d\u6162)\uff0c\u56e0\u4e3a\u6570\u5b57 0 \u662f\u4e0d\u53ef\u53d8\u5bf9\u8c61</li> <li>\u6df1\u6d45\u62f7\u8d1d\u3002\u7ecf\u5e38\u5728\u56de\u6eaf\u9898\u4e2d\u9700\u8981<code>res,path=[],[]</code>\uff0cpath \u662f\u7528\u6765\u56de\u6eaf\u7684\u8def\u5f84\u3002\u627e\u5230\u4e00\u4e2a\u7ed3\u679c\u7684\u65f6\u5019\u9700\u8981\u7528 <code>res.append(path[:])</code> \u800c \u4e0d\u662f<code>res.append(path)#\u9519\uff01</code> \uff0c\u56e0\u4e3a\u8fd9\u91ccappend\u7684path\u7684\u5f15\u7528\uff0c\u4e4b\u540e\u4fee\u6539\u4e86 path \u7ed3\u679c\u5c31\u662f\u9519\u7684\uff01(\u6216\u8005\u7528copy\u6a21\u5757\uff0c\u4e0d\u8fc7\u4e0d\u5982[:]\u8bed\u6cd5\u7b80\u6d01)</li> <li>int\u8303\u56f4\u3002python\u5728\u6570\u503c\u8303\u56f4\u5efa\u8bae\u7528\uff1a<code>MAXINT = 2**63-1; MININT = -2**63</code> \u3002\u56e0\u4e3a python2 sys.maxint \u548c python3 sys.maxsize \u4e0d\u7edf\u4e00</li> <li>\u4f18\u5148\u7ea7\u961f\u5217\uff1a\u4f7f\u7528\u5185\u7f6equeue.PriorityQueue or heapq \uff0c\u5b9a\u4e49\u4e00\u4e2a Item \u7c7b\u5b9e\u73b0\"\u5c0f\u4e8e\" \u9b54\u672f\u65b9\u6cd5\u5c31\u53ef\u4ee5\u5b9e\u73b0\uff0c\u4e0b\u8fb9\u6709\u4ee3\u7801\u6f14\u793a</li> <li>\u7f13\u5b58\u3002python3 \u7684 functools \u6a21\u5757\u81ea\u5e26\u4e86 cache(\u7b49\u4ef7\u4e8elru_cache(maxsize=None)) \u548c lru_cache \u88c5\u9970\u5668\uff0c\u5728\u4e00\u4e9b\u9700\u8981\u9012\u5f52\u8bb0\u5fc6\u5316\u641c\u7d22\u7684\u65f6\u5019\u4f1a\u5f88\u65b9\u4fbf</li> <li>\u9664\u6cd5\u53d8\u66f4\uff1apython2\u548c python3 \u9664\u6cd5\u505a\u4e86\u53d8\u66f4\u8981\u6ce8\u610f\u3002\u8fd8\u6709\u8d1f\u6570\u9664\u6cd5\u3002 python2 <code>int(6/-123)==-1, int(-3/2)==-2</code>\uff0c\u4f46\u662f python3 <code>int(6/-123)==0, int(-3/2)==-1</code>\u3002 \u6b63\u6570\u7684\u6574\u6570\u9664\u6cd5\u7edf\u4e00\u7528\"//\"\u3002\u6bd4\u5982\u4e8c\u5206\u6c42\u4e2d\u95f4\u503c <code>mid=(l+r)//2</code> \u6216\u8005 <code>mid=l+(r-l)//2</code>\uff0c\u56e0\u4e3apython\u5929\u751f\u652f\u6301\u5927\u6570\u4e0d\u4f1a\u6ea2\u51fa\u4e24\u79cd\u5199\u6cd5\u90fd\u884c\u3002\u8d1f\u6570\u6574\u6570\u9664\u6cd5\u7edf\u4e00\u5199 int(a/b)\u3002 \u51e1\u662f\u9047\u5230\u9664\u6cd5\u8fd0\u7b97\u7684\u9898\u76ee\u5efa\u8bae\u7edf\u4e00\u4f7f\u7528 python3 \u63d0\u4ea4\u3002</li> <li>\u81ea\u5b9a\u4e49\u6392\u5e8f\u51fd\u6570\u3002python2 \u53ef\u4ee5\u7528 <code>nums.sort(cmp=lambda a, b: a - b)</code>\uff0c\u4f46\u662fpython3\u79fb\u9664\u4e86cmp\u53c2\u6570\u3002 python3\u5982\u679c\u60f3\u8981\u7528\u81ea\u5b9a\u4e49\u6392\u5e8f\u51fd\u6570\u53ef\u4ee5\u4f7f\u7528 functools.cmp_to_key \u51fd\u6570\u6539\u6210 <code>nums.sort(key=cmp_to_key(lambda a, b: a - b))</code></li> </ul>"},{"location":"19_python%E5%86%85%E7%BD%AE%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/builtins/#python_1","title":"python \u9012\u5f52\u66b4\u6808(\u6808\u6ea2\u51fa)","text":"<p>python \u9012\u5f52\u51fd\u6570\u9ed8\u8ba4\u9012\u5f52\u6df1\u5ea6\u6bd4\u8f83\u5c0f\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7 <code>sys.getrecursionlimit()</code> \u51fd\u6570\u6253\u5370\u51fa\u6765\u3002 \u6211\u5728 mac \u673a\u5668\u4e0a\u6d4b\u8bd5\u7684\u65f6\u5019\uff0c\u4ee5\u4e0b\u7ed3\u679c python2 \u8f93\u51fa 1000\u3002\u8fd9\u5c31\u5bfc\u81f4\u4e00\u4e9b\u9012\u5f52\u51fd\u6570\u6d4b\u8bd5\u7528\u4f8b\u7a0d\u5fae\u591a\u4e00\u4e9b\u5c31\u4f1a\u62a5\u9519\u3002 (\u4e00\u4e2a\u7528\u4f8b\u8d85\u8fc7\u4e0a\u5343\u4e2a\u6570\u636e\u5c31\u4f1a\u62a5\u9519\u4e86)</p> <pre><code>import sys\nprint(sys.getrecursionlimit()) # \u6211\u7684 mac \u673a\u5668\u4e0a\u8f93\u51fa 1000\n</code></pre> <p>\u53ef\u4ee5\u628a\u4ee5\u4e0b\u4ee3\u7801\u8bbe\u7f6e\u6700\u5927\u6808\u6df1\u5ea6\uff0c\u653e\u5230\u6587\u4ef6\u5f00\u5934\uff0c\u5728\u725b\u5ba2\u4e0a\u63d0\u4ea4\u4ee3\u7801\u7684\u65f6\u5019\u53ef\u4ee5\u907f\u514d\u4e00\u4e9b\u9012\u5f52\u4ee3\u7801\u62a5\u9519\u3002 (leetcode \u4f3c\u4e4e\u7ed9\u8bbe\u7f6e\u4e86\uff0c\u7c7b\u4f3c\u7684\u9898\u76ee\u53d1\u73b0\u529b\u6263\u4e0a\u63d0\u4ea4\u4e0d\u4f1a\u6808\u6ea2\u51fa\u4f46\u662f\u5728\u725b\u5ba2\u5c31\u4f1a)</p> <pre><code>import sys\nsys.setrecursionlimit(100000) # \u8bbe\u7f6e\u51fd\u6570\u6808\u6df1\u5ea6\u8db3\u591f\u5927\uff0c\u907f\u514d\u6808\u6ea2\u51fa\u9519\u8bef\n</code></pre>"},{"location":"19_python%E5%86%85%E7%BD%AE%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/builtins/#python-int","title":"python int \u503c\u8303\u56f4","text":"<pre><code># \u4e58\u65b9 \uff08\u6bd4\u8f83\u63a8\u8350\u2b50\ufe0f\uff0cpy2/3 \u90fd\u517c\u5bb9\u4e0d\u5bb9\u6613\u51fa\u9519)\nMAXINT = 2**63-1\nMININT = -2**63\n\n# py3\nimport sys\nMAXINT = sys.maxsize\nMININT = -sys.maxsize - 1\n\n# py2\nsys.maxint\n\n# \u4f4d\u8fd0\u7b97\nMAXINT = (1&lt;&lt;63) - 1\nMININT = ~MAXINT\n</code></pre>"},{"location":"19_python%E5%86%85%E7%BD%AE%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/builtins/#python_2","title":"python \u8d1f\u6570\u4f4d\u8fd0\u7b97\u7684\u5751","text":"<ol> <li>Python3 \u4e2d\u7684\u6574\u578b\u662f\u8865\u7801\u5f62\u5f0f\u5b58\u50a8\u7684</li> <li>Python3 \u4e2d bin \u4e00\u4e2a\u8d1f\u6570\uff08\u5341\u8fdb\u5236\u8868\u793a\uff09\uff0c\u8f93\u51fa\u7684\u662f\u5b83\u7684\u539f\u7801\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u52a0\u4e0a\u4e2a\u8d1f\u53f7</li> <li>\u4e3a\u4e86\u83b7\u5f97\u8d1f\u6570\uff08\u5341\u8fdb\u5236\u8868\u793a\uff09\u7684\u8865\u7801\uff0c\u9700\u8981\u624b\u52a8\u5c06\u5176\u548c\u5341\u516d\u8fdb\u5236\u6570 0xffffffff \u8fdb\u884c\u6309\u4f4d\u4e0e\u64cd\u4f5c\uff0c\u5f97\u5230\u7ed3\u679c\u662f\u4e2a\u5341\u516d\u8fdb\u5236\u6570\uff0c\u518d\u4ea4\u7ed9 bin() \u8fdb\u884c\u8f93\u51fa\uff0c \u5f97\u5230\u7684\u624d\u662f\u4f60\u60f3\u8981\u7684\u8865\u7801\u8868\u793a\u3002</li> </ol> <pre><code># \u6574\u6570\u8f6c\u6362 https://leetcode-cn.com/problems/convert-integer-lcci/\nclass Solution:\n    def convertInteger(self, A: int, B: int) -&gt; int:\n        return bin((A &amp; 0xffffffff) ^ (B &amp; 0xffffffff)).count('1')\n</code></pre> <p>\u53c2\u8003\uff1a - https://www.runoob.com/w3cnote/python-negative-storage.html - https://leetcode-cn.com/problems/convert-integer-lcci/solution/python3-zhu-yi-qi-dui-yu-fu-shu-de-cun-chu-fang-sh/</p>"},{"location":"19_python%E5%86%85%E7%BD%AE%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/builtins/#python-list","title":"python list \u6280\u5de7","text":"<pre><code># \u6392\u5e8f\u5d4c\u5957 list\uff0c\u6bd4\u5982\u5143\u7d20\u503c\u662f\u4e00\u4e2a tuple \u6216\u8005 list\nl = [('a', 1), ('c', 2), ('b',3)]\nsorted(l, key=lambda p:p[0]) # \u6839\u636e\u7b2c1\u4e2a\u503c\u6392\u5e8f\uff0c[('a', 1), ('b', 3), ('c', 2)]\nsorted(l, key=lambda p:p[1]) # \u6839\u636e\u7b2c2\u4e2a\u503c\u6392\u5e8f\uff0c[('a', 1), ('c', 2), ('b', 3)]\nsorted(l, key=lambda p:(-p[0], p[1])) # \u5148\u6839\u636e\u7b2c\u4e00\u4e2a\u5012\u6392\uff0c\u5982\u679c\u76f8\u7b49\u518d\u6839\u636e\u7b2c\u4e8c\u4e2a\u6b63\u6392\u5e8f\n\n# \u540c\u65f6\u83b7\u53d6\u6700\u5927\u503c\u7684\u4e0b\u6807\u548c\u503c\nl = [1,2,5,4,3]\nmaxi, maxval = max(enumerate(l), key=lambda iv: iv[1]) # 2, 5\n\n# python3 \u6392\u5e8flist\u81ea\u5b9a\u4e49\u51fd\u6570(python2 \u76f4\u63a5\u7528 cmp \u53c2\u6570\uff0c python3 \u9700\u8981\u7528 cmp_to_key \u8f6c\u6210 key \u53c2\u6570)\nfrom functools import cmp_to_key\nnums = [3,2,1,4,5]\nsorted(nums, key=cmp_to_key(lambda a,b: a-b) ) # [1 ,2 ,3, 4, 5]\nsorted(nums, key=cmp_to_key(lambda a,b: b-a) ) # [5, 4, 3, 2, 1]\n\n# \u4e00\u884c\u4ee3\u7801\u5224\u65ad\u5217\u8868\u662f\u5426\u6709\u5e8f\nissorted = all(l[i] &lt;= l[i+1] for i in range(len(l) - 1))\n\n# python3 \u4e00\u884c\u4ee3\u7801\u6c42\u524d\u7f00\u548c\nfrom itertools import accumulate\npresums = list(accumulate([1,2,3])) # [1, 3, 6]\n\n# \u4e00\u884c\u4ee3\u7801\u6c42\u77e9\u9635\u5143\u7d20\u603b\u548c https://stackoverflow.com/questions/10713150/how-to-sum-a-2d-array-in-python\nallsum = sum(map(sum, matrix)) # \u6216\u8005 allsum = sum((sum(row) for row in matrix))\n# \u4e00\u884c\u4ee3\u7801\u5224\u65ad\u4e00\u4e2a\u5143\u7d20\u662f\u5426\u5728\u77e9\u9635\u4e2d\uff0c\u6bd4\u5982\u5224\u65ad 1 \u662f\u5426\u5728\u77e9\u9635matrix\u4e2d\nany(1 in row for row in matrix)\n# \u4e00\u884c\u4ee3\u7801\u83b7\u53d6\u77e9\u9635\u6700\u5927\u3001\u6700\u5c0f\u503c\nmaxval = max(map(max, matrix))\n</code></pre>"},{"location":"19_python%E5%86%85%E7%BD%AE%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/builtins/#python-dict","title":"python dict \u6280\u5de7","text":"<pre><code># python \u6839\u636e key\uff0cvalue \u6392\u5e8f\u5b57\u5178\nd = {'d': 4, 'a': 1, 'b': 2, 'c':3}\n# dict sort by **key** and reverse\ndict(sorted(d.items()))  # {'a': 1, 'b': 2, 'c': 3, 'd': 4}\ndict(sorted(d.items(), reverse=True)) # {'d': 4, 'c': 3, 'b': 2, 'a': 1}\n\n# dict sort by **value** and reverse\ndict(sorted(d.items(), key = lambda kv:kv[1])) # {'a': 1, 'b': 2, 'c': 3, 'd': 4}\ndict(sorted(d.items(), key = lambda kv:kv[1], reverse=True)) # {'d': 4, 'c': 3, 'b': 2, 'a': 1}\n\n# \u83b7\u53d6\u5b57\u5178\u5bf9\u5e94\u7684\u6700\u5927\u503c\u5bf9\u5e94\u7684 key,value\nmydict = {'A':4,'B':10,'C':0,'D':87}\nmaximum = max(mydict, key=mydict.get)  # Just use 'min' instead of 'max' for minimum.\nmaxk, maxv = maximum, mydict[maximum]\n# \u6216\u8005\nmaxk, maxv = max(mydict.items(), key=lambda k: k[1])\n\n# \u652f\u6301\u9ed8\u8ba4\u503c\u7684\u6709\u5e8f\u5b57\u5178 (OrderedDict and defaultdict)  (\u6ce8\u610f\u662f key \u63d2\u5165\u987a\u5e8f\u4e0d\u662f\u5b57\u5178\u5e8f)\n# https://stackoverflow.com/questions/6190331/how-to-implement-an-ordered-default-dict\nod = OrderedDict()  # collections.OrderedDict()\nod[i] = od.get(i, 0) + 1 # \u95f4\u63a5\u5b9e\u73b0\u4e86 defaultdict(int) \uff0c\u540c\u65f6\u4fdd\u6301\u4e86\u63d2\u5165\u5b57\u5178\u7684 key \u987a\u5e8f\n</code></pre>"},{"location":"19_python%E5%86%85%E7%BD%AE%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/builtins/#_2","title":"\u94fe\u8868\u9898\u76ee\u8c03\u8bd5\u51fd\u6570","text":"<pre><code># \u7f16\u5199\u94fe\u8868\u9898\u76ee\u7ecf\u5e38\u7528\u5230\u7684\u4e00\u4e9b\u901a\u7528\u51fd\u6570\u548c\u8c03\u8bd5\u51fd\u6570\uff0c\u5b9a\u4e49\u7b49\uff0c\u65b9\u4fbf\u4ee3\u7801\u8c03\u8bd5\n\nclass ListNode(object):\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\n    def __str__(self):\n        return 'Node({})'.format(self.val)\n\n    # \u7528\u6765\u8f93\u51fa\u8c03\u8bd5\n    __repr__ = __str__\n\n\n# \u7f29\u5199\uff0c\u5355\u6d4b\u65b9\u4fbf\u5199\uff0c\u6bd4\u5982\u6784\u5efa\u94fe\u8868 1-&gt;2-&gt;3  N(1, N(2, N(3)))\nN = Node = ListNode\n\n\ndef to_list(head):\n    \"\"\"linked list to python []\"\"\"\n    res = []\n    curnode = head\n    while curnode:\n        res.append(curnode.val)\n        curnode = curnode.next\n    return res\n\n\ndef gen_list(nums):\n    \"\"\"\u7528\u6570\u7ec4\u751f\u6210\u4e00\u4e2a\u94fe\u8868\u65b9\u4fbf\u6d4b\u8bd5 [1,2,3] 1-&gt;2-&gt;3\n    \"\"\"\n    if not nums:\n        return None\n    head = ListNode(nums[0])\n    pre = head\n    for i in range(1, len(nums)):\n        node = ListNode(nums[i])\n        pre.next = node\n        pre = node\n    return head\n\n\ndef print_list(head):\n    \"\"\"\u6253\u5370\u94fe\u8868\"\"\"\n    cur = head\n    res = \"\"\n    while cur:\n        res += \"{}-&gt;\".format(cur.val)\n        cur = cur.next\n    res += \"nil\"\n    print(res)\n</code></pre>"},{"location":"19_python%E5%86%85%E7%BD%AE%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/builtins/#_3","title":"\u5185\u7f6e\u5e93\u5b9e\u73b0\u4f18\u5148\u7ea7\u961f\u5217\u7684\u4e09\u79cd\u65b9\u5f0f","text":"<pre><code>def test_buildin_PriorityQueue():  # python3\n    \"\"\"\n    \u6d4b\u8bd5\u5185\u7f6e\u7684 PriorityQueue\n    https://pythonguides.com/priority-queue-in-python/\n    \"\"\"\n    from queue import PriorityQueue\n    q = PriorityQueue()\n    q.put((10, 'Red balls'))\n    q.put((8, 'Pink balls'))\n    q.put((5, 'White balls'))\n    q.put((4, 'Green balls'))\n    while not q.empty():\n        item = q.get()\n        print(item)\n\n\ndef test_buildin_heapq_as_PriorityQueue():\n    \"\"\"\n    \u6d4b\u8bd5\u4f7f\u7528 heapq \u5b9e\u73b0\u4f18\u5148\u7ea7\u961f\u5217\uff0c\u4fdd\u5b58\u4e00\u4e2a tuple \u6bd4\u8f83\u5143\u7d20(tuple\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f\u4f18\u5148\u7ea7)\n    \u5b9e\u9645\u4e0a\u662f\u5229\u7528\u4e86\u5143\u7ec4tuple\u6bd4\u8f83\u4ece\u7b2c\u4e00\u4e2a\u5f00\u59cb\u6bd4\u8f83\u7684\u6027\u8d28\n    \"\"\"\n    import heapq\n    s_roll = []\n    heapq.heappush(s_roll, (4, \"Tom\"))\n    heapq.heappush(s_roll, (1, \"Aruhi\"))\n    heapq.heappush(s_roll, (3, \"Dyson\"))\n    heapq.heappush(s_roll, (2, \"Bob\"))\n    while s_roll:\n        deque_r = heapq.heappop(s_roll)\n        print(deque_r)\n\n\n# python3 \u6ca1\u6709\u4e86 __cmp__ \u9b54\u6cd5\u51fd\u6570 https://stackoverflow.com/questions/8276983/why-cant-i-use-the-method-cmp-in-python-3-as-for-python-2\nclass Item:\n    def __init__(self, key, weight):\n        self.key, self.weight = key, weight\n\n    def __lt__(self, other): # heapq \u6e90\u7801\u5b9e\u73b0\u53ea\u7528\u4e86 \u5c0f\u4e8e \u6bd4\u8f83\uff0c\u8fd9\u91cc\u5b9a\u4e49\u4e86\u5c31\u53ef\u4ee5 push \u4e00\u4e2a item \u7c7b\n        return self.weight &lt; other.weight\n\n#   def __eq__(self, other): # \u8fd9\u4e2a\u53ef\u4ee5\u7701\u7565\uff0c\u53ea\u8981\u5b9a\u4e49\u4e86 __lt__ \u9b54\u6cd5\u51fd\u6570\u5c31\u53ef\u4ee5\u4e86\n#       return self.weight == other.weight\n#\n#   def __str__(self):\n#       return '{}:{}'.format(self.key,self.weight)\n\n# Item.__lt__ = lambda self, other: self.weight &lt; other.weight # \u5bf9\u4e8e\u5df2\u6709\u7684\u7c7b\uff0c\u76f4\u63a5\u52a0\u4e00\u53e5\u5c31\u53ef\u4ee5\u5b9e\u73b0\u4f5c\u4e3a heap item \u4e86\n\ndef test_heap_item():\n    \"\"\"\n    \u6d4b\u8bd5\u4f7f\u7528 Item \u7c7b\u5b9e\u73b0\u4f18\u5148\u7ea7\u961f\u5217\uff0c\u56e0\u4e3a heapq \u5185\u7f6e\u4f7f\u7528\u7684\u662f\u5c0f\u4e8e\u8fd0\u7b97\u6cd5\uff0c\n    \u91cd\u5199\u9b54\u672f &lt; \u6bd4\u8f83\u65b9\u6cd5\u5373\u53ef\u5b9e\u73b0\n    \"\"\"\n    import heapq\n    pq = []\n    heapq.heappush(pq, Item('c', 3))\n    heapq.heappush(pq, Item('a', 1))\n    heapq.heappush(pq, Item('b', 2))\n    while pq:\n        print(heapq.heappop(pq))\n</code></pre>"},{"location":"19_python%E5%86%85%E7%BD%AE%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/builtins/#python_3","title":"python \u5982\u4f55\u5b9e\u73b0\u6700\u5927\u5806","text":"<p>python\u81ea\u5e26\u4e86heapq \u6a21\u5757\u5b9e\u73b0\u4e86\u6700\u5c0f\u5806(min-heaq)\uff0c\u4f46\u662f\u5982\u679c\u60f3\u8981\u5b9e\u73b0\u6700\u5927\u5806(max-heap)\uff0c\u6709\u51e0\u79cd\u5b9e\u73b0\u65b9\u5f0f\uff1a</p> <ol> <li>\u5bf9\u653e\u5165\u7684\u6570\u5b57\u53d6\u53cd\u3002\u6bd4\u5982 10 \u653e\u5165 -10 \uff0c\u7136\u540e\u53d6\u51fa\u6765\u7684\u65f6\u5019\u518d\u53d6\u53cd\u3002\u4e2a\u4eba\u503e\u5411\u4e8e\u8fd9\u79cd\uff0c\u53ef\u4ee5\u81ea\u5df1\u5c01\u88c5\u4e00\u4e2a\u7c7b\u9632\u6b62\u6765\u56de\u53d6\u53cd\u641e\u6655</li> <li>\u76f4\u63a5\u6839\u636e heapq \u6a21\u5757\u7684\u51fd\u6570\u5c01\u88c5\u51e0\u4e2a\u6700\u5927\u5806\u7684\u51fd\u6570\uff0c\u4e5f\u662f\u901a\u8fc7\u53d6\u53cd\u5b9e\u73b0</li> <li>\u65b0\u5efa\u4e00\u4e2a\u5bf9\u8c61\u91cd\u5199 <code>__lt__</code> \u9b54\u672f\u65b9\u6cd5\u3002\u8fd9\u79cd\u65b9\u5f0f\u4e5f\u53ef\u4ee5\uff0c\u4f46\u662f\u91cd\u5199\u9b54\u672f\u65b9\u6cd5\u4fee\u6539\u4e86\u8bed\u4e49\u4e0d\u592a\u597d(\u4e2a\u4eba\u4e0d\u63a8\u8350)</li> </ol> <pre><code># \u65b9\u6cd51:\u5c01\u88c5\u4e00\u4e2a max heap \u7c7b\nimport heapq\nclass MaxHeap:\n    \"\"\"\n    https://stackoverflow.com/questions/2501457/what-do-i-use-for-a-max-heap-implementation-in-python\n    \"\"\"\n    def __init__(self, capacity):\n        self.capacity = capacity\n        self.minheap = []\n\n    def push(self, val):\n        heapq.heappush(self.minheap, -val)  # push\u53d6\u53cd\u540e\u7684\u6570\u5b57, 1 -&gt; -1\n\n    def pop(self):\n        val = heapq.heappop(self.minheap)\n        return -val # \u62ff\u51fa\u6765\u7684\u6570\u5b57\u518d\u53d6\u53cd\n\n    def max(self):\n        return -self.minheap[0] # min-heap \u7684\u6570\u7ec4\u6700\u5c0f\u503c\u662f m[0]\uff0c\u6700\u5927\u503c\u53d6\u53cd\n\n# \u65b9\u6cd52: \u91cd\u65b0\u5b9a\u51e0\u4e2a\u65b0\u7684 max-heap \u65b9\u6cd5\nimport heapq\ndef maxheappush(h, item):\n    return heapq.heappush(h, -item)\n\ndef maxheappop(h):\n    return -heapq.heappop(h)\n\ndef maxheapval(h):\n    return -h[0]\n</code></pre>"},{"location":"19_python%E5%86%85%E7%BD%AE%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/builtins/#lru_cachecache","title":"lru_cache/cache \u4f18\u5316\u8bb0\u5fc6\u5316\u641c\u7d22","text":"<p>python3 functools \u6a21\u5757\u7684 cache \u529f\u80fd\u548c lru_cache(maxsize=None) \u4e00\u6837\uff0c\u4e0d\u8fc7\u66f4\u52a0\u8f7b\u91cf\u66f4\u5feb\u3002\u5728\u8bb0\u5fc6\u5316\u9012\u5f52\u641c\u7d22\u7684\u65f6\u5019\u5f88\u65b9\u4fbf\u3002 \u6ce8\u610f\u8fd9\u91cc\u7684\u53c2\u6570 <code>maxsize=None</code> \u4e00\u5b9a\u8981\u8bbe\u7f6e\u4e3a None\uff0c\u5426\u5219\u9ed8\u8ba4\u7684 maxsize=128\u3002 \u4e3e\u4e00\u4e2a\u529b\u6263\u4e0a\u7684\u4f8b\u5b50\uff0c\u5982\u679c\u4e0d\u52a0 cache \u9012\u5f52\u51fd\u6570\u56e0\u4e3a\u4f1a\u5927\u91cf\u91cd\u590d\u8ba1\u7b97\u76f4\u63a5\u8d85\u65f6\uff0c\u4f46\u662f\u52a0\u4e00\u4e2a\u88c5\u9970\u5668\u5c31\u53ef\u4ee5\u901a\u8fc7\u3002 \u5f53\u7136\u4e86\u5982\u679c\u4f60\u7528 python2 \u6ca1\u6709\u8fd9\u4e2a\u88c5\u9970\u5668\uff0c\u4f60\u53ef\u4ee5\u76f4\u63a5\u7528 python \u7684 dict \u6765\u5b9e\u73b0\u3002(\u5b58\u5728\u5c31\u8fd4\u56de\uff0c\u5426\u5219\u8ba1\u7b97\u7ed3\u679c\u4fdd\u5b58\u5230 dict \u91cc)</p> <pre><code>\"\"\"\n[337] \u6253\u5bb6\u52ab\u820d III\nhttps://leetcode-cn.com/problems/house-robber-iii/description/\n\"\"\"\n# cache \u7b49\u4ef7\u4e8e functools.lru_cache(maxsize=None), \u4e0d\u8fc7python3\u7248\u672c\u4f4e\u53ef\u80fd\u6ca1\u6709 cache \u53ea\u6709 lru_cache\nfrom functools import cache, lru_cache\n\n\nclass Solution(object):\n    def rob(self, root):\n        \"\"\"\n        \u601d\u8def 1\uff1a\u9012\u5f52\u6c42\u89e3\uff08\u6ce8\u610f\u4e0d\u52a0 cache \u4f1a\u8d85\u65f6\uff01\uff01)\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        # @lru_cache(maxsize=None) # \u6ce8\u610f\u5982\u679c python3 \u7248\u672c\u4e0d\u662f\u5f88\u65b0\u7684\u8bdd\uff0c\u53ea\u80fd\u7528 lru_cache(maxsize=None)\n        @cache  # NOTE: \u4e0d\u52a0 cache \u4f1a\u76f4\u63a5\u8d85\u65f6\uff0c\u5c31\u53ea\u80fd\u7528\u52a8\u6001\u89c4\u5212\u4e86\n        def dfs(root):\n            if root is None:\n                return 0\n\n            if root.left is None and root.right is None:  # \u5de6\u53f3\u5b69\u5b50\u90fd\u662f\u7a7a\n                return root.val\n            # \u4e0d\u5077\u7236\u8282\u70b9,\u8003\u8651\u5077 root \u7684\u5de6\u53f3\u5b69\u5b50\n            val1 = dfs(root.left) + dfs(root.right)\n            # \u5077\u7236\u8282\u70b9\n            val2 = root.val\n            if root.left:\n                val2 += dfs(root.left.left) + dfs(root.left.right)\n            if root.right:\n                val2 += dfs(root.right.left) + dfs(root.right.right)\n            return max(val1, val2)\n\n        return dfs(root)\n</code></pre>"},{"location":"19_python%E5%86%85%E7%BD%AE%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/builtins/#leetcode","title":"leetcode \u4e8c\u53c9\u6811\u8c03\u8bd5\u51fd\u6570","text":"<pre><code>\"\"\"\n\u4e8c\u53c9\u6811\u6811\u76f8\u5173\u95ee\u9898\u8c03\u8bd5\u51fd\u6570\n\"\"\"\n\n\nclass TreeNode(object):  # leetcode tree \u8282\u70b9\u5b9a\u4e49\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n    def __str__(self):\n        return \"TreeNode:{} left:{} right:{}\".format(self.val, self.left, self.right)\n    __repr__ = __str__\n\n\ndef gen_tree_from_lc_input(vals_str):  # [1,2,3] -&gt; root TreeNode\n    \"\"\" \u6839\u636e \u8f93\u5165\u751f\u6210\u4e00\u4e2a tree\uff0c\u8fd4\u56de root \u8282\u70b9\uff0c\u6ce8\u610f\u8f93\u5165\u5b57\u7b26\u4e32\n    # [450] \u5220\u9664\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u8282\u70b9\n    # https://leetcode-cn.com/problems/delete-node-in-a-bst/description/\n    # \u6bd4\u5982 450 \u9898\u76ee\u5355\u6d4b\u4ee3\u7801\u53ef\u4ee5\u8fd9\u4e48\u5199\n    def test():\n        s = Solution()\n        root = gen_tree_from_lc_input(\"[2,1]\")\n        key = 1\n        res = \"[2]\"\n        assert to_lc_tree_str(s.deleteNode(root, key)) == res\n    \"\"\"\n    import ast\n    valids = vals_str.replace(\"null\", \"None\")\n    vals = ast.literal_eval(valids)\n    # \u4ee5\u4e0b\u5c31\u662f gen_tree \u51fd\u6570\u7684\u5185\u5bb9\uff0c\u4e3a\u4e86\u65b9\u4fbf\u5355\u72ec\u4f7f\u7528\u4e0d\u8c03\u7528\u51fd\u6570\u4e86\n    if not vals:\n        return None\n    nodemap = {}\n    for i in range(len(vals)):\n        if vals[i] is not None:  # \u4e00\u5f00\u59cb\u5199\u7684 if vals[i]\uff0c\u4f46\u662f 0 \u8282\u70b9\u5c31\u9519\u4e86! \u5e94\u8be5\u663e\u793a\u5224\u65ad\u662f\u5426\u4e3a None(\u7a7a\u8282\u70b9)\n            nodemap[i] = TreeNode(vals[i])\n        else:\n            nodemap[i] = None\n\n    root = nodemap[0]\n    for i in range(len(vals)):\n        l = 2*i + 1\n        r = 2*i + 2\n        cur = nodemap.get(i, None)\n        left = nodemap.get(l, None)\n        right = nodemap.get(r, None)\n        if cur:\n            cur.left = left\n            cur.right = right\n    return root\n\n\ndef to_lc_tree_str(root):  # root TreeNode -&gt; [1,2,3,null]\n    \"\"\"\u8fd4\u56de\u5c42\u5e8f\u5e8f\u5217\u5316\u540e\u7684\u6811\u5b57\u7b26\u4e32\uff0c\u53ef\u4ee5\u548c leetcode \u8f93\u51fa\u7ed3\u679c\u6bd4\u5bf9\u5b57\u7b26\u4e32\"\"\"\n    import json\n    if not root:\n        return '[]'\n    curnodes = [root]\n    res = [root.val]\n    while curnodes:\n        nextnodes = []\n        for node in curnodes:\n            if node:\n                if node.left:\n                    nextnodes.append(node.left)\n                    res.append(node.left.val)\n                else:\n                    nextnodes.append(None)\n                    res.append(None)\n                if node.right:\n                    nextnodes.append(node.right)\n                    res.append(node.right.val)\n                else:\n                    nextnodes.append(None)\n                    res.append(None)\n        curnodes = nextnodes\n\n    while res[-1] is None:  # \u6700\u540e\u7a7a\u8282\u70b9\u53bb\u6389\n        res.pop()\n    s = json.dumps(res)\n    s = s.replace(\" \", \"\")\n    return s\n\n\ndef gen_tree(vals):\n    \"\"\"\n    \u6839\u636e\u5c42\u5e8f\u904d\u5386\u7ed3\u679c\u751f\u6210\u4e8c\u53c9\u6811\u5e76\u4e14\u8fd4\u56de root\u3002\n    \u628a\u9898\u76ee\u4e2d\u8f93\u5165 null \u6362\u6210 None\n    vals = [1,2,3,None,5]\n    \"\"\"\n    if not vals:\n        return None\n    nodemap = {}\n    for i in range(len(vals)):\n        if vals[i]:\n            nodemap[i] = TreeNode(vals[i])\n        else:\n            nodemap[i] = None\n\n    root = nodemap[0]\n    for i in range(len(vals)):\n        l = 2*i + 1\n        r = 2*i + 2\n        cur = nodemap.get(i, None)\n        left = nodemap.get(l, None)\n        right = nodemap.get(r, None)\n        if cur:\n            cur.left = left\n            cur.right = right\n    return root\n</code></pre>"},{"location":"19_python%E5%86%85%E7%BD%AE%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/builtins/#python_4","title":"python \u4ea4\u6362\u5217\u8868\u5143\u7d20\u7684\u5751(\u4ea4\u6362\u526f\u4f5c\u7528)","text":"<pre><code># 41. \u7f3a\u5931\u7684\u7b2c\u4e00\u4e2a\u6b63\u6570 https://leetcode-cn.com/problems/first-missing-positive/\nclass Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        \u5e73\u5e38\u4e60\u60ef\u4e86 python \u91cc\u8fb9\u4ea4\u6362\u5143\u7d20 a,b=b,a \u8fd9\u91cc\u4f60\u53ef\u80fd\u8fd9\u4e48\u5199\uff0c\u90a3\u5c31\u4e2d\u62db\u4e86!\n        nums[i], nums[nums[i]-1] =  nums[nums[i]-1], nums[i] # \u8fd9\u4e48\u5199\u6b7b\u5faa\u73af\uff01\n        \u8fd9\u4e2a\u7b49\u4ef7\u4e8e\n        x, y = nums[nums[i]-1], nums[i]\n        nums[i] = x  # \u8fd9\u4e00\u6b65 nums[i] \u5df2\u7ecf\u4fee\u6539\u4e86\uff0c\u4e0b\u8fb9\u4e00\u53e5\u8d4b\u503c\u4e0d\u662f\u671f\u671b\u7684 nums[i]\u4e86\n        nums[nums[i]-1] = y\n\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        for i in range(n):\n            while 1 &lt;= nums[i] &lt;= n and nums[nums[i]-1] != nums[i]:\n                # NOTE: \u6ce8\u610f\u8fd9\u4e00\u53e5\u4ea4\u6362\u53f3\u8fb9\u6709\u526f\u4f5c\u7528\u7684\uff0c\u4e0d\u80fd\u98a0\u5012\uff01\uff01\uff01\n                # nums[i], nums[nums[i]-1] =  nums[nums[i]-1], nums[i] # \u8fd9\u4e48\u5199\u6b7b\u5faa\u73af\uff01\n                nums[nums[i]-1], nums[i] = nums[i], nums[nums[i]-1] # \u6709\u526f\u4f5c\u7528\u7684\u653e\u524d\u8fb9\n        for i in range(n):\n            if nums[i] != i+1:\n                return i+1\n\n        return n+1\n</code></pre>"},{"location":"19_python%E5%86%85%E7%BD%AE%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/builtins/#acm","title":"\u517c\u5bb9\u4ee3\u7801ACM/\u6838\u5fc3\u63d0\u4ea4\u683c\u5f0f","text":"<p>\u6ce8\u610f\u725b\u5ba2\u7f51\u6709\u4e24\u79cd\u6a21\u5f0f\uff0c\u4e00\u79cd\u662f\u548c leetcode \u4e00\u6837\u7684\u63d0\u4ea4(\u65e0\u9700\u5904\u7406\u8f93\u5165)\uff0c\u53ea\u9700\u8981\u63d0\u4ea4\u6838\u5fc3\u4ee3\u7801\u3002 \u4e00\u79cd\u662f ACM \u6a21\u5f0f\uff0c\u8fd8\u9700\u8981\u81ea\u5df1\u5904\u7406\u8f93\u5165\u548c\u8f93\u51fa\u3002 \u5efa\u8bae\u4f7f\u7528\u8fd9\u79cd\u517c\u5bb9\u5199\u6cd5\uff0c\u540c\u6837\u7684\u9898\u76ee\u53ef\u4ee5\u540c\u65f6\u63d0\u4ea4\u5230 \u725b\u5ba2\u3001leetcode \u548c acwing(python3)\u3002 \u8fd9\u9053\u9898\u76ee\u4e3a\u4f8b\u5b50 [679] \u5956\u54c1\u5206\u914d https://www.acwing.com/problem/content/681/</p> <pre><code># \u8fd9\u6bb5\u4ee3\u7801\u53ef\u4ee5\u76f4\u63a5\u4ee5OJ\u8f93\u5165\u6a21\u5f0f\u63d0\u4ea4\uff0c\u5982\u679c\u9898\u76ee\u4e00\u6837\uff0c\u76f4\u63a5\u590d\u5236 Solution \u7c7b\u5c31\u53ef\u4ee5\u540c\u65f6\u63d0\u4ea4\u5230leetcode\nclass Solution:\n    def solve(self, scores):\n        \"\"\"\n        \u601d\u8def\uff1a\u8bb0\u5fc6\u5316\u641c\u7d22\u3002\u65f6\u95f4O(N)\n        \u5bf9\u4e8e\u65c1\u8fb9\u90fd\u6bd4\u81ea\u5df1\u5927\u7684\u70b9\uff0c\u5b83\u80af\u5b9a\u662f1\n        \u5bf9\u4e8e\u65c1\u8fb9\u6709\u6bd4\u81ea\u5df1\u5c0f\u7684\u70b9\uff0c\u5148\u7b97\u51fa\u6bd4\u81ea\u5df1\u5c0f\u7684\u70b9\u7684\u503c\u518d+1\u5c31\u597d\u4e86\u3002\n        \u6bcf\u4e2a\u70b9\u5982\u679c\u8ba1\u7b97\u8fc7\u4e86\u5c31\u8bb0\u5fc6\u5316\uff0c\u4e0b\u6b21\u518d\u8ba1\u7b97\u4ed6\u7684\u65f6\u5019\u4e0d\u7528\u91cd\u590d\u9012\u5f52\u76f4\u63a5\u8fd4\u56de\u3002\n        \u53c2\u8003\uff1ahttps://www.acwing.com/solution/acwing/content/1520/\n        \"\"\"\n        from functools import lru_cache\n        n = len(scores)\n\n        @lru_cache(maxsize=None)\n        def dfs(x):\n            left = (x-1+n) % n\n            right = (x+1) % n\n\n            if scores[x] &lt;= scores[left] and scores[x] &lt;= scores[right]:  # \u6ce8\u610f\u662f &lt;= \uff0c\u4e0b\u8fb9\u662f &lt;\n                return 1\n\n            l, r = 0, 0\n            if scores[left] &lt; scores[x]:\n                l = dfs(left)\n            if scores[right] &lt; scores[x]:\n                r = dfs(right)\n\n            return max(l, r) + 1\n\n        return sum([dfs(i) for i in range(n)])\n\n\nif __name__ == \"__main__\":  # python3 \u63d0\u4ea4\uff0cpython3 input \u90fd\u5f53\u505a str \u8f93\u5165\n    so = Solution() # \u6784\u9020 Solution \u5b9e\u4f8b\u540e\u7eed\u8c03\u7528\n    n = int(input())\n    for i in range(n):\n        arrlen = input()\n        arr = list(map(int, input().split()))\n        print(so.solve(arr))\n</code></pre>"},{"location":"20_%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8D%97/interview/","title":"\u6ce8\u610f\u4e8b\u9879","text":"<ul> <li>\u7535\u5b50\u7b80\u5386\u5c3d\u91cf\u7528 pdf \u683c\u5f0f\uff0c\u65b9\u4fbf\u8de8\u5e73\u53f0\u6253\u5f00\u3002doc \u7b49\u683c\u5f0f\u5728\u4e0d\u540c\u7684\u7535\u8111\u4e0a\u6253\u5f00\u4f1a\u6709\u6392\u7248\u95ee\u9898\uff0c\u5f88\u591a\u540e\u7aef\u6280\u672f\u9762\u8bd5\u5b98\u53ef\u80fd\u4f7f\u7528\u7684\u662f mac \u6216\u8005 linux\u3002</li> <li>\u63d0\u524d\u590d\u4e60\u56de\u987e\u91cd\u70b9\u77e5\u8bc6\uff0c\u9632\u6b62\u5361\u5728\u57fa\u7840\u4e0a\u3002\u6bd4\u5982 mac \u4e0b\u8457\u540d\u7684 brew \u5de5\u5177\u4f5c\u8005\u9762\u8bd5 google \u5c31\u56e0\u4e3a\u6ca1\u5199\u51fa\u6765\u53cd\u8f6c\u4e8c\u53c9\u6811\u88ab\u62d2\uff0c\u540e\u6765\u53bb\u4e86\u82f9\u679c\ud83d\ude02.(\u8fd9\u5c31\u53ea\u80fd\u770b\u4eba\u54c1\u548c\u8fd0\u6c14\u548c\u773c\u7f18\u4e86\uff0c\u5982\u679c\u6ca1\u89c1\u5230\u4e8c\u9762\u9762\u8bd5\u5b98\u6216\u8005 hr\uff0c\u5927\u6982\u7387\u662f\u6302\u4e86)\u3002\uff08\u6811\u3001\u94fe\u8868\u3001\u54c8\u5e0c\u8868\u3001\u4e8c\u5206\u3001\u5feb\u6392\u3001TCP/UDP\u3001HTTP\u3001\u6570\u636e\u5e93ACID\u3001\u7d22\u5f15\u4f18\u5316\u7b49\u5e38\u8003\u70b9\uff09\u3002</li> <li>\u767d\u677f\u7f16\u7a0b\uff0c\u7ec3\u4e60\u5728\u7eb8\u4e0a\u624b\u5199\u4ee3\u7801\u3002\u867d\u7136\u5f88\u591a\u6c42\u804c\u8005\u90fd\u5f88\u62b5\u89e6\u624b\u5199\u4ee3\u7801\uff0c\u4f46\u662f\u767d\u677f\u7f16\u7a0b\u786e\u5b9e\u662f\u4e00\u79cd\u6bd4\u8f83\u597d\u7684\u533a\u5206\u65b9\u5f0f\u3002\u4f60\u7684\u601d\u8003\u8fc7\u7a0b\u3001\u7f16\u7801\u4e60\u60ef\u3001\u7f16\u7801\u89c4\u8303\u7b49\u90fd\u80fd\u770b\u51fa\u6765\u3002</li> <li>\u5982\u679c\u88ab\u95ee\u5230\u5de5\u7a0b\u91cc\u4e0d\u4f1a\u4f7f\u7528\u4f46\u662f\u6bd4\u8f83\u5201\u94bb\u7684\u7b97\u6cd5\u9898\uff0c\u5efa\u8bae\u4f60\u548c\u9762\u8bd5\u5b98\u6c9f\u901a\u7684\u65f6\u5019\u95ee\u95ee\u8fd9\u4e2a\u7b97\u6cd5\u6216\u8005\u9898\u76ee\u5728\u5f00\u53d1\u4e2d\u6709\u54ea\u4e9b\u5b9e\u9645\u4f7f\u7528\u573a\u666f\uff0c\u770b\u770b\u5bf9\u65b9\u600e\u4e48\u8bf4\ud83d\ude0e\u3002\u5c11\u6570\u516c\u53f8\u559c\u6b22\u8003\u4e00\u4e9b\u7b97\u6cd5\u7ade\u8d5b\u9898\uff0c\u8fd9\u79cd\u5bf9\u4e8e\u6ca1\u6709ACM\uff0c\u4fe1\u606f\u5b66\u7ade\u8d5b\u80cc\u666f\u7684\u5f00\u53d1\u8005\u6765\u8bf4\u6bd4\u8f83\u5403\u529b\u3002\u5927\u90e8\u5206\u4e1a\u52a1\u5f00\u53d1\u5c97\u4f4d\u5e94\u8be5\u53ea\u4f1a\u8003\u5bdf\u57fa\u7840\u7b97\u6cd5\u9898</li> <li>\u9762\u8bd5\u7684\u65f6\u5019\u51c6\u5907\u5145\u5206\uff0c\u7b80\u5386\u8981\u4e0e\u62db\u8058\u65b9\u9700\u6c42\u5bf9\u7b49\uff0c\u751a\u81f3\u53ef\u4ee5\u9488\u5bf9\u4e0d\u540c\u516c\u53f8\u51c6\u5907\u4e0d\u540c\u7684\u7b80\u5386\u5185\u5bb9\u3002\u7b14\u8005\u6bcf\u6b21\u9762\u8bd5\u90fd\u4f1a\u5e26\u4e0a\u767d\u7eb8\u3001\u7b14\u3001\u7b80\u5386\u3001\u7535\u8111\u7b49\uff0c\u5373\u4f7f\u9762\u8bd5\u6ca1\u8fc7\uff0c\u81f3\u5c11\u4e5f\u8ba9\u9762\u8bd5\u5b98\u611f\u89c9\u6211\u662f\u6709\u8bda\u610f\u7684\uff0c\u7ed9\u5bf9\u65b9\u7559\u4e0b\u597d\u5370\u8c61\u3002</li> <li>\u52a0\u5206\u9879\uff1agithub\u3001\u4e2a\u4eba\u6280\u672f\u535a\u5ba2\u3001\u5f00\u6e90\u9879\u76ee\u3001\u6280\u672f\u8bba\u575b\u5e10\u53f7\u7b49\uff0c\u8ba9\u9762\u8bd5\u5b98\u6709\u66f4\u591a\u6e20\u9053\u4e86\u89e3\u4f60\uff0c\u6709\u65f6\u5019\u4ec5\u4ec5\u6839\u636e\u51e0\u5341\u5206\u949f\u7684\u9762\u8bd5\u6765\u8bc4\u5224\u9762\u8bd5\u8005\u662f\u6709\u5931\u504f\u9887\u7684\u3002\uff08\u6bd4\u5982\u9762\u8bd5\u8005\u4e34\u573a\u53d1\u6325\u4e0d\u597d\uff1b\u9762\u8bd5\u5b98\u4e2a\u4eba\u504f\u597d\uff1b\u4f1a\u7684\u90fd\u4e0d\u95ee\uff0c\u95ee\u7684\u90fd\u4e0d\u4f1a\u7b49\uff09</li> </ul>"},{"location":"20_%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8D%97/interview/#_2","title":"\u767d\u677f\u7f16\u7a0b","text":"<p>\u5176\u5b9e\u6211\u4e2a\u4eba\u662f\u53cd\u5bf9\u51fa\u7eaf\u7b97\u6cd5\u9898\u76ee\u7684\uff0c\u5c24\u5176\u662f\u6709\u4e9b\u6bd4\u8f83\u5201\u94bb\u7684\u76f4\u63a5\u51fa\u7b97\u6cd5\u7ade\u8d5b\u9898\uff0c\u8fd9\u5bf9\u4e0e\u5f88\u591a\u505a\u5de5\u7a0b\u7684\u540c\u5b66\u6765\u8bf4\u662f\u6bd4\u8f83\u5403\u4e8f\u7684\u3002\u6ca1\u4e8b\u7684\u65f6\u5019\u53ef\u4ee5\u53bb LeetCode \u4e4b\u7c7b\u7684\u7f51\u7ad9\u5237\u5237\u57fa\u7840\u9898\u3002 \u4e00\u822c\u6765\u8bf4 web \u4e1a\u52a1\u5f00\u53d1\u8005\u638c\u63e1\u5e38\u89c1\u7684\u7f16\u7a0b\u8bed\u8a00\u5185\u7f6e\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u5c31\u591f\u7528\u4e86\u3002</p> <ul> <li>\u7ec3\u4e60\u624b\u5199\u5e38\u89c1\u7684\u7b97\u6cd5\uff0c\u6bd4\u5982\u5feb\u6392\uff0c\u4e8c\u5206\uff0c\u5f52\u5e76\u7b49\uff0c\u8bb0\u4f4f\u5e38\u89c1\u6392\u5e8f\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6</li> <li>\u903b\u8f91\u6b63\u786e\u662f\u524d\u63d0</li> <li>\u6709\u56fe\u793a\u63cf\u8ff0\u601d\u8def\u6700\u597d\uff0c\u5982\u679c\u65f6\u95f4\u7d27\u4ee3\u7801\u6ca1\u5199\u51fa\u6765\uff0c\u53ef\u4ee5\u76f4\u63a5\u63cf\u8ff0\u81ea\u5df1\u7684\u601d\u8def\u3002</li> <li>\u5b57\u4e0d\u8981\u5199\u592a\u5927\uff0c\u5c3d\u91cf\u5de5\u6574\u3002\u6bcf\u884c\u4ee3\u7801\u4e4b\u95f4\u7559\u6709\u4e00\u5b9a\u7684\u7a7a\u9699\uff0c\u65b9\u4fbf\u4f60\u4fee\u6539\uff08\u751a\u81f3\u7b14\u8005\u4e4b\u524d\u4f1a\u5e26\u4e0a\u94c5\u7b14\u548c\u6a61\u76ae\u624b\u5199\u4ee3\u7801\uff09</li> <li>\u5982\u679c\u5b9e\u5728\u5199\u4e0d\u51fa\u6765\u53ef\u4ee5\u548c\u9762\u8bd5\u5b98\u4ea4\u6d41\uff0c\u5f88\u591a\u65f6\u5019\u5982\u679c\u7ed9\u4e0d\u51fa\u6700\u4f18\u65b9\u6848\u5c3d\u91cf\u60f3\u4e00\u4e2a\u6b21\u4f18\u65b9\u6848\uff0c\u522b\u4e0a\u6765\u5c31\u8bf4\u4e0d\u4f1a</li> <li>\u60f3\u4e0d\u8d77\u6765\u7684\u51fd\u6570\u540d\u5199\u4f2a\u4ee3\u7801\uff0c\u4e00\u822c\u9762\u8bd5\u5b98\u4e0d\u4f1a\u5f3a\u5236\u8bf4\u8ba9\u4f60\u8bb0\u4f4f\u6bcf\u4e2a api \u7684\u540d\u5b57</li> <li>\u5982\u679c\u6709\u591a\u4f59\u7684\u65f6\u95f4\uff08\u4e00\u822c\u4e0d\u4f1a\u6709\uff09\u6ce8\u610f\u4e00\u4e9b\u8fb9\u754c\u6761\u4ef6\uff0c\u9632\u5fa1\u6027\u7f16\u7a0b\u3001\u4ee3\u7801\u98ce\u683c\u3001\u5355\u5143\u6d4b\u8bd5\u7b49\u4e1c\u897f\uff0c\u60f3\u597d\u4e00\u4e9b\u5f02\u5e38\u60c5\u51b5\uff08\u7a7a\u503c\u3001\u8fb9\u754c\u503c\u7b49\uff09\u7684\u6d4b\u8bd5\u7528\u4f8b</li> </ul>"},{"location":"20_%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8D%97/interview/#_3","title":"\u624b\u5199\u4ee3\u7801\u6ce8\u610f\u4e8b\u9879","text":"<p>\u8fd9\u91cc\u6211\u5c31\u76f4\u63a5\u5f15\u7528\u300a\u5251\u6307offer\u300b\u91cc\u5185\u5bb9\uff0c\u5927\u5bb6\u5199\u4ee3\u7801\u7684\u65f6\u5019\u53ef\u4ee5\u591a\u52a0\u6ce8\u610f\uff0c\u5bf9\u4e8e\u5e94\u5bf9\u7b97\u6cd5\u9762\u8bd5\uff0c\u5982\u679c\u51c6\u5907\u65f6\u95f4\u6bd4\u8f83\u591a\uff0c\u63a8\u8350\u770b\u4e0b\u8fd9\u672c\u4e66\uff0c\u5e76\u4e14\u5237\u4e00\u4e0b leetcode \u4e0a\u7684\u57fa\u7840\u9898\u76ee\u7ec3\u7ec3\u624b\u611f\u3002</p> <ul> <li>\u89c4\u8303\u6027\uff1a\u4e66\u5199\u6e05\u6670\u3001\u5e03\u5c40\u6e05\u6670\u3001\u547d\u4ee4\u5408\u7406</li> <li>\u5b8c\u6574\u6027\uff1a\u5b8c\u6210\u57fa\u672c\u529f\u80fd\uff0c\u8003\u8651\u8fb9\u754c\u6761\u4ef6\uff0c\u505a\u597d\u9519\u8bef\u5904\u7406</li> <li>\u9c81\u68d2\u6027\uff1a\u9632\u5fa1\u5f0f\u7f16\u7a0b\uff0c\u5904\u7406\u65e0\u6548\u8f93\u5165</li> </ul>"},{"location":"20_%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8D%97/interview/#_4","title":"\u7ed3\u8bed","text":"<p>\u8fd9\u5957\u6559\u7a0b\u5217\u4e3e\u7684\u7b97\u6cd5\u5f88\u6709\u9650\uff0c\u5305\u62ec\u56fe\u7b97\u6cd5\u3001\u8d2a\u5fc3\uff0c\u52a8\u6001\u89c4\u5212\uff0c\u5206\u5e03\u5f0f\uff0c\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u7b49\u5f88\u591a\u6ca1\u6709\u6d89\u53ca\u5230\uff0c\u56e0\u4e3a\u5b83\u4eec\u786e\u5b9e\u9700\u8981\u8bfb\u8005\u66f4\u6df1\u5165\u7684\u7406\u8bba\u57fa\u7840\uff0c\u800c\u4e14\u8fd9\u5957\u6559\u7a0b\u7684\u76ee\u7684\u4e5f\u4e0d\u662f\u9488\u5bf9\u7b97\u6cd5\u7ade\u8d5b\u3002 \u4e0d\u8fc7\u4e86\u89e3\u4e86\u672c\u6559\u7a0b\u6d89\u53ca\u5230\u7684\u5927\u90e8\u5206\u7b97\u6cd5\u662f\u53ef\u4ee5\u5e94\u4ed8\u7edd\u5927\u591a\u6570\u7684\u4e1a\u52a1\u5f00\u53d1\u7684\u3002\u5982\u679c\u8bfb\u8005\u5bf9\u7b97\u6cd5\u6709\u5174\u8da3\uff0c\u672c\u6559\u7a0b\u5f15\u7528\u7684\u51e0\u672c\u53c2\u8003\u4e66\u90fd\u53ef\u4ee5\u53bb\u6df1\u5165\u5b66\u4e60\u3002\u5e0c\u671b\u672c\u6559\u7a0b\u80fd\u5bf9\u4f60\u5b66\u4e60\u7b97\u6cd5\u3001\u517b\u6210\u826f\u597d\u7684\u601d\u7ef4\u65b9\u5f0f\u548c\u7f16\u7801\u4e60\u60ef\u7b49\u6709\u6240\u5e2e\u52a9\u3002</p>"},{"location":"20_%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8D%97/interview/#_5","title":"\u5ef6\u4f38\u9605\u8bfb","text":"<p>\u76ee\u524d\u5e02\u9762\u4e0a\u6709\u4e00\u4e9b\u4e13\u95e8\u9488\u5bf9\u7b97\u6cd5\u9762\u8bd5\u7684\u4e66\u4f9b\u5927\u5bb6\u53c2\u8003\uff0c\u5982\u679c\u4f60\u6b63\u5728\u51c6\u5907\u7b97\u6cd5\u9762\u8bd5\uff0c\u6211\u5f3a\u70c8\u5efa\u8bae\u4f60\u770b\u770b\u4e0b\u9762\u7684\u53c2\u8003\u8d44\u6599\u5b66\u4e60\u89e3\u9898\u6280\u5de7:</p> <ul> <li>\u90a3\u4e9b\u5e74\uff0c\u6211\u4eec\u4e00\u8d77\u8dea\u8fc7\u7684\u7b97\u6cd5\u9898[\u89c6\u9891]</li> <li>\u300a\u7a0b\u5e8f\u5458\u9762\u8bd5\u91d1\u5178\uff08\u7b2c5\u7248\uff09\u300b</li> <li>\u300a\u5251\u6307Offer\u300b</li> <li>python leetCode</li> </ul>"},{"location":"20_%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8D%97/interview/#_6","title":"\u5237\u9898\u7f51\u7ad9","text":"<p>leetcode \u548c\u725b\u5ba2\u7f51\u662f\u56fd\u5185\u5e38\u7528\u7684\u4e24\u4e2a\u5237\u9898\u7f51\u7ad9\uff0c\u7b14\u8005\u5efa\u8bae\u5237\u4e00\u4e0b\u9ad8\u9891\u7684 200 \u9053\u9898\u5de6\u53f3\uff0c\u57fa\u672c\u53ef\u4ee5\u5e94\u4ed8\u5927\u90e8\u5206\u516c\u53f8\u7684\u7b97\u6cd5\u9762\u8bd5\u4e86\u3002</p> <ul> <li>https://leetcode-cn.com/</li> <li>https://www.nowcoder.com/exam/oj</li> </ul>"}]}